{\rtf1\ansi\deff0\deftab720{\fonttbl
{\f0\fswiss Arial;}
{\f1\fswiss\fcharset0 Arial;}
{\f2\fnil Arial;}
{\f3\fnil\fcharset0 Courier New;}
{\f4\fnil Courier New;}
{\f5\fnil\fcharset0 Arial;}
{\f6\fnil\fcharset2 Symbol;}
{\f7\fmodern Courier New;}
{\f8\fmodern\fcharset0 Courier New;}
}
{\colortbl
 ;
\red0\green0\blue0;
\red0\green128\blue0;
\red128\green0\blue0;
\red0\green0\blue255;
}
{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10}
{\up $}{\footnote {\up $} InstantObjects Welcome}
{\up +}{\footnote {\up +} main:000010}
}
\viewkind4\uc1\pard\keepn\sb25\sa25\cf1\lang1040\b\f0\fs24 InstantObjects Welcome\f1 
\par \cf2\lang1033\b0\strike\f2\fs16 Glossary\cf3\strike0{\v Scribble20>main}\lang1040\cf1\b\f0 
\par \pard\b0\fs18 Welcome to InstantObjects, the integrated framework for developing object-oriented business solutions in Delphi.
\par 
\par InstantObjects is a RAD technology that enables creation of applications based on persistent business objects. It simplifies the process of realizing ideas into products; shortens time-to-marke\lang1033\f1 t\lang1040\f0 , and helps keep business focus.
\par 
\par Even though it is still a bolted\lang1033\f1 -\lang1040\f0 on technology, InstantObjects integrates with the Delphi IDE and Object Pascal in a simple, flexible and intuitive manner. There are no sophisticated environments that have to be comprehended before application development can begin.
\par 
\par \f1 You can find more information about this Open-Source project at:  \cf4\strike\f3\fs20 www.instantobjects.org\cf3\strike0\f4{\v *! ExecFile("http://www.instantobjects.org/")}\cf1\f0\fs18 
\par \cf3 
\par \{bmc instantobjects_logo.gif\}\cf1 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble20}
{\up $}{\footnote {\up $} Glossary}
{\up K}{\footnote {\up K} Glossary}
}
\viewkind4\uc1\pard\keepn\lang1033\b\fs24 Glossary
\par \cf2\lang1040\b0\strike\f2\fs16 InstantObjects Welcome\cf3\strike0{\v Scribble10>main}\lang1033\cf1\lang3081\fs18 
\par \pard\lang1033\f5 The following definitions are provided to enhance the clarity, consistency and understanding of some of the terms used in this document.
\par \f2\fs10 
\par \b\f5\fs18 Attribute\b0  - means InstantObjects Attribute. A business class property with persistence provided by the InstantObjects framework.\cf0\b\f2\fs22 
\par \cf1\f5\fs18 Business Class\b0  - is a class that models an object in the business domain. The class is derived from TInstantObject to provide persistence through the InstantObjects framework.\b 
\par Class\b0  - is a blueprint from which objects are created.\b 
\par Column\b0  - see Field.
\par \b Connection\b0  - is a component used to gain access to a specific database.
\par \b Container Attribute\b0  - has an attribute type of either Parts or References.\b 
\par Evolving a database\b0  - the process of restructuring a database to accommodate a modified model in such a way that existing data is preserved.
\par \b Field\b0  - the smallest structure in a database. It represents an attribute of a business class and actually stores the attribute value within the database.
\par \b Broker\b0  - is used by InstantObjects to manage objects persistently, and is database specific.\b 
\par \pard\sb25\sa25 InstantObjects\b0  - \lang1040\f0 the integrated framework for developing object-oriented \lang1033\f1 persistent \lang1040\f0 business solutions in Delphi.\lang1033\b\f5 
\par \pard Model\b0  - means an InstantObjects Model that is a collection of classes and their metadata representing a business domain and the information needed to provide data persistence.\b 
\par Object\b0  - is an instance of a class.
\par \b Persistence\b0  - the issue of how to save objects to permanent storage. Persistence provides the ability for objects to exist between executions of a system or application.
\par \lang1040\b\f0 RAD\lang1033\f1  -\b0  Rapid Application Development.\f5 
\par \b Record\b0  - A structure that is composed of a set of values for every field within a table and represents the attribute values for a unique instance of the table's business class.\lang3081\f2 
\par \lang1033\b\f5 Relational Attribute\b0  - has an attribute type of either Part, Reference, Parts or References.\b 
\par Table\b0  - the chief structure in a database. It is composed of fields and records and usually represents the collection of attribute values for instances of a single, specific business class.\b 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble30}
{\up $}{\footnote {\up $} License Agreement}
{\up +}{\footnote {\up +} main:000020}
{\up K}{\footnote {\up K} License Agreement;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 License Agreement \cf1\b0\fs16 
\par \cf2\strike\f2 InstantObjects Welcome\cf3\strike0{\v Scribble10>main}\cf1\f0
\par \pard\sb25\sa25\cf3\b\fs18\{bm\f1 l\f0  Powered by InstantObjects 150x38.gif\}
\par \cf1 
\par \b0\f1 InstantObjects source files are released under the Mozilla Public License Version 1.1. \f0 You may obtain a copy of the License at\f1  \cf4\strike\f4\fs20 www.mozilla.org/MPL/MPL-1.1.html\cf3\strike0{\v *! ExecFile("http://www.mozilla.org/MPL/MPL-1.1.html")}\cf1\f1\fs18 .\f0 
\par 
\par \cf4\strike\f4\fs20 www.instantobjects.org\cf3\strike0{\v *! ExecFile("http://www.instantobjects.org")}\cf1\f0\fs18 
\par \b 
\par \pard\plain\f1

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble40}
{\up $}{\footnote {\up $} Installing InstantObjects}
{\up +}{\footnote {\up +} main:000030}
{\up K}{\footnote {\up K} Installing InstantObjects;InstantObjects,Installing;}
}
\viewkind4\uc1\pard\keepn\b\f1\fs24 Installing \f0 InstantObjects\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike\f2 InstantObjects Welcome\cf3\strike0{\v Scribble10>main}\cf1\f0 
\par \pard\f1\fs18 To cover the needs of most developers, we offer two different approaches to install InstantObjects.
\par 
\par The \b\i first one\b0\i0  is oriented to proficient developers, and is the method used during the development of InstantObjects (that is, on the constantly changing SVN source materials).
\par This method is very flexible, as you can choose which parts of InstantObjects you will install and when. It will require a good knowledge about package compile, build and install.
\par 
\par You will find detailed instructions in the \b Install.txt\b0  file located in:
\par \b     <installdir>/Docs\b0 
\par     
\par The \b\i second one\b0\i0  is more oriented to normal developers that would prefer installing some more features even if they know they will never use it, but by means of an easier procedure that does most of the job for them.
\par \pard\sb25\f2\fs10 
\par \pard\sb25\tx1435\f1\fs18 You will find detailed instructions in the \b Install.txt\b0  file located in:
\par \b     <installdir>/Source/PackageGroups
\par \pard\sb25\b0\f2\fs10 
\par \pard\sb25\tx1435\f1\fs18 IMPORTANT NOTE:
\par One aspect to consider when choosing an installation approach. With the second approach, the PackageGroups files will be kept up to date \i only\i0  for official releases (that is Alpha, Beta, RC and final), so it will \i not \i0 often contain the latest SVN source materials. If you foresee downloading the "bleeding edge" of InstantObjects from SVN quite often, we advise you to go for the first approach and continue to use it for subsequent updates.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble50}
{\up $}{\footnote {\up $} User Guide for InstantObjects 2.0}
{\up +}{\footnote {\up +} main:000040}
{\up K}{\footnote {\up K} Using InstantObjects;InstantObjects,Using,Guide;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 User Guide for InstantObjects 2.0 \cf1\b0\fs16 
\par \pard\keepn\keep\li95\sb25\sa25\cf2\strike Group Topics\cf3\strike0{\v Scribble60>nav}\cf1 
\par \pard\sb25\sa25\fs18 This user guide contains \f1 practical\f0  guidelines for building InstantObjects\lang1033\f1  \lang1040\f0 based applications. The intention is to give an overview o\f1 f\f0  the classes, components and tools that make up the InstantObjects framework. Although the guide is very detailed, it has not been the intention to cover all aspects of the framework. If more information is needed, \lang1033\f1 please\lang1040\f0  refer to the Symbol Reference.
\par Th\lang1033\f1 is\lang1040\f0  guide \lang1033\f1 contains\lang1040\f0  three parts \lang1033\f1 that\lang1040\f0  constitute almost any InstantObjects based development process.
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\keep\fi-200\li295\sb25\sa25\tx280\lang1033\f1\fs18  \cf2\lang1040\strike\f0 Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1 
\par \lang1033\f1{\pntext\f6\'B7\tab} \cf2\lang1040\strike\f0 Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1 
\par \lang1033\f1{\pntext\f6\'B7\tab} \cf2\lang1040\strike\f0 Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1 
\par \pard\sb25\sa25\f2\fs10 
\par \pard\keep\li95\sb25\sa25\lang1033\f1\fs18 There is also a section on \cf2\lang1040\strike Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf1\lang1033 .\lang1040\f0 
\par \pard\sb25\sa25 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble60}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Us\lang1033\f1 er Guide\lang1040\f0  \cf1\b0\fs16 
\par \cf2\strike Using InstantObjects\cf3\strike0\fs18{\v Scribble50>main}\cf1\fs16 
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1 
\par \cf2\strike Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1 
\par \cf2\strike\f1 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf1\strike\f0 
\par \strike0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble70}
{\up $}{\footnote {\up $} Creating the Business Model}
{\up +}{\footnote {\up +} creatingbusinessmodel:000010}
{\up K}{\footnote {\up K} Creating the Business Model;Business Model,Creating;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Creating the Business Model\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike Group Topics\cf3\strike0{\v Scribble80>nav}\cf1\tab\cf2\strike Using InstantObjects\cf3\strike0{\v Scribble50>main}\cf1  
\par \pard\sb25\sa25\tx1435\fs18 Object Oriented applications are based on models. This section covers the definition of the InstantObjects business\lang1033\f1  \lang1040\f0 model, which is \lang1033\f1  \lang1040\f0 the initial step in the creation of an InstantObjects based application. The InstantObjects Model Explorer is the central tool in this process.
\par \lang1033\f1 T\lang1040\f0 he InstantObjects business\lang1033\f1  \lang1040\f0 model\lang1033\f1  consists of a collection of user designed classes, many of which are related through inheritance or association. Most if not all of the data controlled by these classes is required to be persisted or stored in such a way that the relationships among this data are retained.  In addition to the simple class attribute types, which provide persistence for the \lang1040\f0 Object Pascal equivalent simple type\lang1033\f1 s (eg string or integer)\lang1040\f0  \lang1033\f1 , the InstantObjects framework provides several class attribute types to facilitate the persistence of instances of related classes. These attribute types are known as relational or complex attributes.
\par \pard\sb25\sa25\f2\fs10 
\par \cf3\fs18#{\footnote # RelationalAttributeTypes}\cf0\b\fs22 Re\lang1040 lational \lang1033 Attribute T\lang1040 ypes\cf1\b0\f0\fs18 
\par The relational types are\lang1033\f1 :\lang1040\f0  Reference, Part, References and Parts.\lang1033\f1  It is important to understand the nature of the relationship that each of these attribute types provides so that the desired behaviour is reflected within the \lang1040\f0 business\lang1033\f1  \lang1040\f0 model\lang1033\f1 .
\par \f2\fs10 
\par \lang1040\b\f1\fs18 Container attributes \b0 is the collective name for the subset of relational types consisting of Parts and References type attributes.\lang1033\b 
\par \b0\f2\fs10 
\par \lang1040\b\f0\fs18 Reference\b0 
\par Reference is the simplest object relation supported by InstantObjects. A reference defines a unidirectional relation from one object to another. The object referred to lives outside the referring object and knows nothing about the relation itself.
\par See \cf2\strike TInstantReference\cf3\strike0{\v Scribble9520>main}\cf1  for more information.
\par \f2\fs10 
\par \b\f0\fs18 Part\f1 
\par \b0\f0 Objects in Part relations are tied together more closely. A Part relation is bi-directional, meaning the object at each end of the relation knows about the object at the other end. The object referred to in a Part relation is considered to be a part of the owning object and as such can only be reached via the owning object. In addition, an object referred to in a part relation is disposed along with its owner.
\par See \cf2\strike TInstantPart\cf3\strike0{\v Scribble9250>main}\cf1  for more information.
\par \f2\fs10 
\par \b\f0\fs18 References\b0 
\par Like its singular counterpart, Reference, the References relation is unidirectional. But instead of just referring to a single object, a References relation can refer to any number of objects and thereby defining a one-to-many relation to objects outside of the referring object.
\par See \cf2\strike TInstantReferences\cf3\strike0{\v Scribble9780>main}\cf1  for more information.
\par \f2\fs10 
\par \b\f0\fs18 Parts\f1 
\par \b0\f0 Parts is the one-to-many counterpart of the equivalent one-to-one relation type, Part. A Parts relation can refer to any number of objects that are all considered to be part of the referring object.
\par See \cf2\strike TInstantParts\cf3\strike0{\v Scribble9390>main}\cf1  for more information.
\par Parts and References are known as container attributes. When defining an attribute of one of these types, a corresponding array property and optional methods to access the container attribute \lang1033\f1 are\lang1040\f0  added to the class. For any of the relational types, the class of the related object(s) must be specified as the Object Class of the attribute.
\par \f2\fs10 
\par \f1\fs18 Notes:
\par \pard\sb25\sa25\tx200 For \i "External Storage support"\i0  of the Part, Parts and References attribute, refer to \cf2\strike External Storage of Attributes\cf3\strike0{\v Scribble220>main}\cf1 .
\par \pard\sb25\sa25\tx1435\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble80}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Creating the Business Model \cf1\b0\fs16 
\par \cf2\strike Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 The \lang1033\f1 InstantObjects \lang1040\f0 Model Explorer\cf3\strike0{\v Scribble90>main}
\par \cf2\lang1033\strike\f1 Declaring Model Units\cf3\strike0{\v Scribble110>main}\cf1\lang1040\f0 
\par \cf2\strike Defining Classes\cf3\strike0{\v Scribble120>main}\cf1 
\par \cf2\strike Adding Business Rules\cf3\strike0{\v Scribble240>main}
\par \cf2\strike Building/Evolving the Business Model\cf3\strike0{\v Scribble270>main}
\par \cf1 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble90}
{\up $}{\footnote {\up $} The InstantObjects Model Explorer}
{\up +}{\footnote {\up +} creatingbusinessmodel:000020}
{\up K}{\footnote {\up K} InstantObjects Model Explorer;Model Explorer;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 The InstantObjects Model Explorer \cf1\b0\fs16 
\par \cf2\strike Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\sb25\sa25\fs18 The first step in building an application with InstantObjects is to define the classes and relations that make up the business model. The business model\lang1033\f1  for the application\lang1040\f0  is created\lang1033\f1  and managed\lang1040\f0  in the \lang1033\f1 InstantObjects \lang1040\f0 Model Explorer, which can be opened via the View\lang1033\f1  \lang1040\f0 menu in the Delphi IDE.\lang1033\f1  T\lang1040\f0 he \lang1033\f1 InstantObjects \lang1040\f0 Model Explorer\lang1033\f1  window is non-modal and can be docked, if desired, in the Delphi IDE. This allows the \lang1040\f0 Explorer\lang1033\f1  window to remain open while working in other areas of the IDE.
\par \lang1040\f2\fs10 
\par \cf0\b\fs22 Th\lang1033\f5 e \lang1040\f2 InstantObjects Model Explorer \lang1033\f5 (\lang1040\f2 with \f5 "\f2 Inheritance\f5 "\f2  view of classes\lang1033\f5 )\cf3\lang1040\b0\f0\fs18 
\par \{bmc ModelExplorerInheritance.gif\}
\par \cf1\f2\fs10 
\par \lang1033\f1\fs18 T\lang1040\f0 he \lang1033\f1 InstantObjects \lang1040\f0 Model Explorer\lang1033\f1  window has two main areas of interest.
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f1\fs18 The toolbar that holds the action speed buttons. \f5 The speed buttons display mouse-over, pop-up hints. These speed buttons provide access to the configuration aspects for model code units, persistence broker connections and type of class view presented in the tree view pane;\cf0\lang1040\b\f2\fs22 
\par \pard\sb25\sa25\cf1\b0\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 The tree view pane that displays the model's classes.\cf0\b\f5\fs22  \cf1\b0\fs18 The tree view pane has a mouse right button click, \cf2\strike pop-up menu\cf3\strike0{\v Scribble100>main}\cf1  that is used to access the procedures for managing the model.\cf0\lang1040\b\f2\fs22 
\par \pard\sb25\sa25\cf1\b0\fs10 
\par \cf0\lang1033\b\fs22 Class Views
\par \cf1\b0\fs18 A\f5  useful feature of the \f1 InstantObjects \lang1040\f0 Model Explorer\lang1033\f1  when creating or managing the class model is the ability to toggle \f5 the tree view pane \f1 between inheritance and relational  type views. This is done using the 'View [Type]' speed button on the toolbar. The button has a context sensitive glyph, \cf3\{bmc ModelExplorerViewRelationsButton.gif\} \cf0 or\cf1  \cf3\{bmc ModelExplorerViewInheritanceButton.gif\}\cf0 ,\cf1  and pop-up hint.
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f5\fs18 Inheritance View - The tree view is based on the class inheritance structure;
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f5\fs18 Relations View - The tree view is based on the relationships between the classes.
\par \pard\sb25\sa25\f2\fs10 
\par \f1\fs18 The Relations view for the above example Inheritance view is shown below.\cf0\lang1040\b\f2\fs22 
\par The InstantObjects Model Explorer \lang1033\f5 (\lang1040\f2 with \f5 "Relations"\f2  view of classes\lang1033\f5 )\cf3\lang1040\b0\f0\fs18 
\par \{bmc ModelExplorerRelations.gif\}\cf1 
\par 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble100}
}
\viewkind4\uc1\pard\lang1033\b\fs24 The InstantObjects Model Explorer Pop-up Menu
\par 
\par \cf3\b0\f2\fs18\{bmc ModelExplorerPop-upMenu.gif\}\cf1\lang3081 
\par 
\par 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble110}
{\up $}{\footnote {\up $} Declaring Model Units}
{\up +}{\footnote {\up +} creatingbusinessmodel:000030}
{\up K}{\footnote {\up K} Declaring Model Units;Model Units,Declaring;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Declaring Model Units
\par \cf2\lang1040\b0\strike\f0\fs16 Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\sb25\sa25\lang1033\f1\fs18 It is good practice to keep an application's business classes encapsulated and separated from other classes such as the user interface classes. The convention when using InstantObjects is to create separate code units within the application's IDE project solely for the purpose of containing the \lang1040\f0 business \lang1033\f1 classes that constitute an InstantObjects model. \lang1040\f0 Th\lang1033\f1 is\lang1040\f0  model can be placed in one or more \lang1033\f1 code \lang1040\f0 units in the project. These units are referred to as model units.
\par \f2\fs10 
\par \lang1033\f1\fs18 The InstantObjects Model Explorer needs to know which of the application project's units are intended to be model units. This is done using\lang1040\f0  the \cf3\{bmc ModelExplorerSelectUnitsButton.gif\}\cf1 Select Units button on the toolbar of the InstantObjects Model Explorer. \lang1033\f1 T\lang1040\f0 he Select Units button\lang1033\f1  \lang1040\f0 will open a dialog showing all the units of the current project. The left side of the dialog shows the model units and the right side shows the other units included in the project. Use the buttons between the two lists to move one or more units from one side to the other. \lang1033\f1  Select the OK or Cancel button to close the dialog and save or cancel, respectively, any changes. \lang1040\f0 When \lang1033\f1 the \lang1040\f0 model unit(s)\lang1033\f1  has been declared \lang1040\f0 the business model\lang1033\f1  can be created or maintained using the \f5 tree view pane's right button click, \cf2\strike pop-up menu\cf3\strike0{\v Scribble100>main}\cf1  \lang1040\f0 .
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc ModelUnitSelector.gif\}\cf1 
\par \pard\lang3081\f2 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble120}
{\up $}{\footnote {\up $} Defining Classes}
{\up +}{\footnote {\up +} creatingbusinessmodel:000040}
{\up K}{\footnote {\up K} Defining Classes;Classes,Defining;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Defining Classes \cf1\b0\fs16 
\par \cf2\strike Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\sb25\sa25\fs18 Classes can be added\lang1033\f1 , deleted\lang1040\f0  and edited\lang1033\f1  as follows (note that keyboard short cuts are also available):
\par \lang1040\f0\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\fs18 Add a new class to the model by right-clicking in the empty area of the \lang1033\f1 tree view pane in InstantObjects \lang1040\f0 Model Explorer\lang1033\f1 . This will launch the \cf2\strike pop-up menu\cf3\strike0{\v Scribble100>main}\cf1\lang1040\f0 . Select New Class from the menu\lang1033\f1  to\lang1040\f0  bring up the Class Editor with an empty class definition\lang1033\f1 ;\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 Delete a class selected in the tree view pane \lang1040\f0 by right-clicking\lang1033\f1  on it and selecting Delete Class from the \cf2\strike pop-up menu\cf3\strike0{\v Scribble100>main}\cf0 .  As expected, confirmation dialog is launched before the delete action is accepted;\cf1\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 Edit a class selected in the tree view pane \lang1040\f0 by right-clicking\lang1033\f1  on it and selecting Edit Class from the \cf2\strike pop-up menu\cf3\strike0{\v Scribble100>main}\cf0 . This will \cf1\lang1040\f0 bring up the Class Editor \lang1033\f1 and will allow editing of many of the class's properties and attributes.\cf0\lang1040\f0 
\par \pard\sb25\sa25\tx200\cf3 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble130}
{\up $}{\footnote {\up $} Class Editor}
{\up +}{\footnote {\up +} creatingbusinessmodel:000050}
{\up K}{\footnote {\up K} Class Editor;Editor, Class;}
}
\viewkind4\uc1\pard\keepn\lang1033\b\fs24 Class Editor\cf1\lang3081\b0\f2\fs18 
\par \cf3\cf1 
\par \pard\lang1033\f5 The Class Editor is used to manage a class's properties and attributes. It contains the tabbed pages as follows:
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\strike\f5\fs18 Class Page\cf3\strike0{\v Scribble140>main}\cf1  - This is where the class's properties are defined;\lang3081\f2 
\par \pard\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\lang1033\strike\f5\fs18 Attributes Page\cf3\strike0{\v Scribble150>main}\cf1  - This is where the class attributes are managed.\lang3081\f2 
\par \pard\sb25\sa25\lang1040\f0 
\par \pard\lang3081\f2 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble140}
{\up $}{\footnote {\up $} Class Editor - Class Page}
{\up +}{\footnote {\up +} creatingbusinessmodel:000060}
{\up K}{\footnote {\up K} Class Editor,Class Page;}
}
\viewkind4\uc1\pard\keepn\lang1033\b\fs24 Class Editor - Class Page\cf1\lang3081\b0\f2\fs18 
\par \cf3\cf1 
\par \pard\sb25\sa25\lang1040\f0 This is where you specify the name and base class, the model unit to hold the class and the persistence \lang1033\f1 properties\lang1040\f0  of the class.
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc ClassEditor\lang1033\f1 Class\lang1040\f0 .gif\}
\par \cf1\f2\fs10 
\par \lang1033\f1\fs18 The \b class name \b0 can be any valid Object Pascal class identifier.\lang1040\f0 
\par The default \b base class \b0 of any business class is \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1 , the class from which persistence capabilities are inherited. When classes are present in your model, you can choose any of these as the immediate base class instead.
\par The \lang1033\f1 model \lang1040\b\f0 unit \b0 in which \lang1033\f1 a\lang1040\f0  new class \lang1033\f1 will\lang1040\f0  be placed can be selected from the list of available model units.\lang1033\f1  This entry is read only when editing an existing class.\lang1040\f0 
\par The class\lang1033\f1  \b persistence\lang1040\f0  \b0 can be defined as either \lang1033\i\f1 stored\lang1040\f0  \i0 or \i embedded\i0 . Instances of \lang1033\i\f1 stored\lang1040\f0  \i0 classes can be \lang1033\f1 independently \lang1040\f0 stored in and retrieved from \lang1033\f1 the database\lang1040\f0 . \lang1033\f1 An i\lang1040\f0 nstance of \lang1033\f1 an \lang1040\i\f0 embedded \i0 class can exist in the database only as \lang1033\f1 an attribute\lang1040\f0  of \lang1033\f1 its owner, which is \lang1040\f0 another \i embedded \i0 or \lang1033\i\f1 stored\lang1040\f0  \lang1033\i0\f1 class instance. In practice this means that the attribute values of an \lang1040\i\f0 embedded \i0 class \lang1033\f1 are stored in the database in a BLOB type field.\lang1040\f0  \lang1033\f1 Therefore, i\lang1040\f0 f you want instances of a class to be \lang1033\f1 independently \lang1040\f0 retrievable or available by query, define the class\lang1033\f1  persistence as\lang1040\f0  \lang1033\i\f1 stored\lang1040\i0\f0 .
\par \f1 S\i tored \i0 persistence is also required for those classes used by Reference attributes or other \cf2\strike attributes with \i external \i0 storage\cf3\strike0{\v Scribble220>main}\cf1 . A class, used only for objects that are owned by other objects, should be defined with \i embedded \i0 persistence if the owning objects use \i embedded \i0 storage for the attribute. If, however, the owning objects use \i external \i0 storage kind for the attribute, define the owned class with \i stored \i0 persistence.\f0 
\par For classes\lang1033\f1  with \i stored\lang1040\f0  \lang1033\i0\f1 persistence\lang1040\f0 , a \b storage name \b0 can be specified. The storage name defines the \lang1033\f1 name\lang1040\f0  \lang1033\f1 of the \lang1040\f0 table\lang1033\f1 , \lang1040\f0 in which attributes of instances of the class are stored. By default, the storage name equals the class name without the preceding \lang1033\f1 '\lang1040\f0 T\lang1033\f1 '\lang1040\f0 . Change the \lang1033\f1 default \lang1040\f0 storage name \lang1033\f1 as desired\lang1040\f0 .
\par \pard\lang3081\f2 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble150}
{\up $}{\footnote {\up $} Class Editor - Attributes Page}
{\up +}{\footnote {\up +} creatingbusinessmodel:000070}
{\up K}{\footnote {\up K} Class Editor,Attributes Page;}
}
\viewkind4\uc1\pard\keepn\lang1033\b\fs24 Class Editor - Attributes Page\cf1\lang3081\b0\f2\fs18 
\par \cf3\cf1 
\par \pard\sb25\sa25\lang1033\f1 This where the\lang1040\f0  attributes of the class\lang1033\f1  are managed\lang1040\f0 . The top view of the page lists the attributes that are \lang1033\b\f1 I\lang1040\f0 ntroduced \b0 by the class. The bottom view lists the attributes that are \lang1033\b\f1 I\lang1040\f0 nherited \b0 from the base class.
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc ClassEditorAttributes.gif\}
\par \cf1\f2\fs10 
\par \f0\fs18 Attributes can be added\lang1033\f1 , deleted\lang1040\f0  and edited\lang1033\f1  as follows (note that keyboard short cuts are also available):
\par \lang1040\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f0\fs18 Add a new \lang1033\f1 a\lang1040\f0 ttribute\lang1033\f1  \lang1040\f0 to the model by right-clicking in the \lang1033\b\f1 Introduced \b0 view pane. This will launch the \cf2\strike pop-up menu\cf3\strike0{\v Scribble160>main}\cf1\lang1040\f0 . Select \lang1033\f1 New\lang1040\f0  from the menu\lang1033\f1  to\lang1040\f0  bring up the \cf2\lang1033\strike\f1 Attribute\lang1040\f0  Editor\cf3\strike0{\v Scribble170>main}\cf1  with an empty \lang1033\f1 attribute\lang1040\f0  definition\lang1033\f1  so that the new a\lang1040\f0 ttribute\lang1033\f1 's properties can be set;\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 Delete an a\lang1040\f0 ttribute\lang1033\f1  selected in the \b Introduced \b0 view pane \lang1040\f0 by right-clicking\lang1033\f1  on it and selecting Delete from the \cf2\strike pop-up menu\cf3\strike0{\v Scribble160>main}\cf0 .  As expected, a confirmation dialog is launched before the delete action is accepted;\cf1\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 Edit an a\lang1040\f0 ttribute\lang1033\f1  selected in the \b Introduced \b0 view pane \lang1040\f0 by right-clicking\lang1033\f1  on it and selecting Edit from the \cf2\strike pop-up menu\cf3\strike0{\v Scribble160>main}\cf0 . This will \cf1\lang1040\f0 bring up the \cf2\lang1033\strike\f1 Attribute\lang1040\f0  Editor\cf3\strike0{\v Scribble170>main}\cf1  \lang1033\f1 and will allow editing of many of the a\lang1040\f0 ttribute\lang1033\f1 's properties.\cf0\lang1040\f0 
\par \pard\cf1\lang3081\f2 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble160}
}
\viewkind4\uc1\pard\lang1033\b\fs24 Class Editor - Attributes Page Pop-up menu
\par 
\par \cf3\b0\f2\fs18\{bmc ClassEditorAttributesPop-upMenu.gif\}\cf1\lang3081 
\par 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble170}
{\up $}{\footnote {\up $} Attribute Editor}
{\up +}{\footnote {\up +} creatingbusinessmodel:000080}
{\up K}{\footnote {\up K} Attribute Editor;Defining Attributes;Attributes,Editor;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Attribute Editor \cf1\b0\fs16 
\par \cf2\strike Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1\tab\lang1033\f1\tab\cf2\lang1040\ul\f0 See Also\cf3\ulnone{\v Scribble180}\cf1  
\par \pard\lang1033\f5\fs18 The Attribute Editor is used to manage an attribute's properties. It contains the tabbed pages as follows:
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\strike\f5\fs18 Definition Page\cf3\strike0{\v Scribble190>main}\cf1  - This is where the attribute's properties are defined;\lang3081\f2 
\par \pard\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\lang1033\strike\f5\fs18 Access Page\cf3\strike0{\v Scribble200>main}\cf1  - This is where access for the attribute is defined;\lang3081\f2 
\par \pard\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\cf2\lang1033\strike\f5\fs18 Presentation Page\cf3\strike0{\v Scribble210>main}\cf1  - This is where the attribute's presentation and default properties are defined.\lang1040\f0 
\par \pard\sb25\sa25\tx200\lang1033\f5 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble180}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\sb25\sa25\cf1\b0\f2\fs10 
\par \pard\li60\sb25\sa25\cf2\strike\fs18 External Storage of Attributes\cf3\strike0{\v Scribble220>main}\cf1 
\par \pard\lang3081 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble190}
{\up $}{\footnote {\up $} Attribute Editor - Definition Page}
{\up +}{\footnote {\up +} creatingbusinessmodel:000090}
{\up K}{\footnote {\up K} Attribute Editor,Definition Page;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Attribute Editor - Definition Page\cf1\b0\fs18 
\par \cf3\cf1 
\par \pard\sb25\sa25\lang1040\f0 This is where the \lang1033\f1 main properties \lang1040\f0 of \lang1033\f1 an\lang1040\f0  attribute \lang1033\f1 are managed\lang1040\f0 .\lang1033\f1  The edit controls on this page are context sensitive. The context varies based on attribute type and whether the attribute is new or existing.\lang1040\f0 
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc AttributeEditorDefinition.gif\}
\par \cf1\f2\fs10 
\par \f0\fs18 The \b name \b0 of the attribute can be any valid Object Pascal identifier. The \b storage name \b0 specifies the \lang1033\f1 table\lang1040\f0  column \lang1033\f1 name \lang1040\f0 in which attribute values are stored. By default, the storage name is the same as the attribute name.
\par The \b type \b0 of the attribute can be selected from the list of all the types supported by InstantObjects. Some of the available types are known as simple types, others are known as relational\lang1033\f1  \lang1040\f0 types. The simple types generally have an Object Pascal equivalent simple type\lang1033\f1  (eg string or integer)\lang1040\f0 . The \cf2\strike relational types\cf3\strike0{\v RelationalAttributeTypes>main}\lang1033\f1  \cf1\lang1040\f0 are used to define relations\lang1033\f1 hips\lang1040\f0  \lang1033\f1 between\lang1040\f0  instances of the\lang1033\f1  attribute's owner\lang1040\f0  class \lang1033\f1 and\lang1040\f0  objects\lang1033\f1  of \lang1040\f0 other \lang1033\f1 classes\lang1040\f0 .\lang1033\f1  \lang1040\f0 The relational types are\lang1033\f1 :\lang1040\f0  Reference, Part, References and Parts.
\par \lang1033\f1 When defining relational \lang1040\f0 attribute \lang1033\f1 types the \b object class\b0  entry is used to nominate the business class type that the attribute will be referencing. The list of available existing classes is presented for selection in the drop-down list.\lang1040\f0 
\par \lang1033\f5 See \cf2\strike h\lang1040\f2 ow to use external storage\cf3\strike0{\v HowToUseExternalStorage>main}\cf0\lang1033\f5  for information on usage of the \b storage kind\b0  and \b external storage name\b0  entries.\cf1\lang3081\f2 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble200}
{\up $}{\footnote {\up $} Attribute Editor - Access Page}
{\up +}{\footnote {\up +} creatingbusinessmodel:000110}
{\up K}{\footnote {\up K} Attribute Editor,Access Page;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Attribute Editor - Access Page\cf1\b0\fs18 
\par \cf3\cf1 
\par \pard\sb25\sa25\lang1033\f1 This is where the\lang1040\f0  \lang1033\f1 properties relating to \lang1040\f0 access \lang1033\f1 to \lang1040\f0 the attribute \lang1033\f1 are\lang1040\f0  specif\lang1033\f1 ied\lang1040\f0 . \lang1033\f1 The edit controls on this page are context sensitive. The context varies based on attribute type and whether the attribute is new or existing.\lang1040\f0 
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc AttributeEditorAccess.gif\}
\par \cf1\f2\fs10 
\par \f0\fs18 For every \lang1033\f1 persistent \lang1040\f0 attribute a corresponding property is added to the class\lang1033\f1 .\lang1040\f0  \lang1033\f1 T\lang1040\f0 he value of the attribute \lang1033\f1 is \lang1040\f0 accessed\lang1033\f1  through this property\lang1040\f0 .
\par The \lang1033\b\f1 V\lang1040\f0 isibility \lang1033\b0\f1 entry sets the\i  \i0 class \lang1040\f0 visibility scope of this property. 
\par \lang1033\f1 The \b Options \b0 check box group offers options for simple attribute properties to be \b indexed \b0 (in its table), \b required \b0 or \b readonly\b0 . The \b Default \b0 option relates to \cf2\strike container \lang1040\f2 attributes\cf3\strike0{\v \lang1033 RelationalAttributeTypes\lang1040 >main}\cf1\lang1033\f1 . It specifies whether this attribute is the default container attribute for its class.\lang1040\f0 
\par \lang1033\f1 The \b\f2 M\lang1040 ethods \lang1033\b0\f1 check box group relate to\lang1040\f0  \cf2\lang1033\strike\f1 container \lang1040\f2 attributes\cf3\strike0{\v \lang1033 RelationalAttributeTypes\lang1040 >main}\cf1\lang1033\f1 .\lang1040\f0  \lang1033\f1 M\lang1040\f0 ethods can be selected to manipulate the content of the attribute. Th\lang1033\f1 e selected\lang1040\f0  methods will be created with the same visibility scope as the property.\lang1033\f1  The \b Singular Name \b0 entry will be used when creating these methods. The Attribute Editor offers a default singular name derived from the attribute Name entered on the Definition page, however this might not always be appropriate and in these cases the entry can be edited. \lang1040\f0 In addition to the array property created to access objects contained in \lang1033\f1 these\lang1040\f0  attributes, a count property reflecting the number of objects in the container will\lang1033\f1  also\lang1040\f0  be added.
\par \pard\lang3081\f2 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble210}
{\up $}{\footnote {\up $} Attribute Editor - Presentation Page}
{\up +}{\footnote {\up +} creatingbusinessmodel:000120}
{\up K}{\footnote {\up K} Attribute Editor,Presentation Page;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Attribute Editor - Presentation Page\cf1\b0\fs18 
\par \cf3\cf1 
\par \pard\sb25\sa25\lang1033\f1 This where the\lang1040\f0  \lang1033\f1 properties relating to the presentation and other miscellaneous aspects\lang1040\f0  \lang1033\f1 of \lang1040\f0 the attribute \lang1033\f1 is\lang1040\f0  specif\lang1033\f1 ied\lang1040\f0 . \lang1033\f1 The visibility of this page is context sensitive based on attribute type.\lang1040\f0 
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc AttributeEditor\lang1033\f1 Presentation\lang1040\f0 .gif\}
\par \cf1\f2\fs10 
\par \f0\fs18 For some of the simple attribute types, settings regarding the presentation of the attribute can be specified on the last page of the Attribute Editor. An \b edit mask \b0 to be used when editing the value of the attribute can be specified in Mask. The characters that are accepted during input when editing the attribute value can be specified in \b Valid Characters\b0 .\lang1033\f1  \b Display Width \b0 can be used to set the default display width to be used when \lang1040\f0 editing the value of the attribute\lang1033\f1 . These properties are used by the \lang1040\f0 InstantObjects \cf2\strike user interface\lang1033\f1  \lang1040\f0 components\cf3\strike0{\v Scribble210>main}\cf1\lang1033\f1 .\lang1040\f0  
\par \pard\lang3081\f2 
\par \lang1033\f5 A \b Default Value \b0 can be entered that will be used as the initial value for new attribute instances and whenever the value is re-initialised (eg by calling the attribute's Reset method).\lang3081\f2 
\par \pard\plain\f1

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble220}
{\up $}{\footnote {\up $} External Storage of Attributes}
{\up +}{\footnote {\up +} creatingbusinessmodel:000100}
{\up K}{\footnote {\up K} External Storage of Attributes;Attributes,External Storage;}
}
\viewkind4\uc1\pard\keepn\b\f1\fs24 External Storage of Attributes\cf1\b0\f0\fs16 
\par \pard\keepn\sb25\sa25\cf2\lang1033\strike\f1 Example\cf3\strike0{\v Scribble230>example}\cf1\tab\tab\cf2\lang1040\strike\f0 Creating the Business Model\cf3\strike0{\v Scribble70>main} \cf1\f1\fs18 
\par \pard\lang1033 The E\lang1040\f0 xternal \lang1033\f1 S\lang1040\f0 torage\lang1033\f1  option\lang1040\f0  \lang1033\f1 for \cf2\strike relational attributes\cf3\strike0{\v RelationalAttributeTypes>main}\cf1\lang1040\f0  \lang1033\f1 was introduced to resolve several shortcomings and issues in earlier versions of InstantObjects. These include the following:
\par \f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f1\fs18 the \lang1040\f0 inability to fully query the database from a SQL-enabled (non-IO) interface;
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 the \lang1040\f0 inability to define foreign keys to enforce referential integrity at the database level;
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\f0\fs18 difficulty in repairing a "corrupted"\lang1033\f1  \lang1040\f0 blob\lang1033\f1  due to the nature of its binary storage. This was somewhat alleviated with the introduction of the XML option for blobs but had the added problem of increased blob size and resulted in poorer performance\lang1040\f0 ;
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1\fs18 the \lang1040\f0 poor retrieve performance due to \lang1033\f1 the \lang1040\f0 missing implementation of load-on-demand feature for part, parts and references attributes\lang1033\f1 .\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \lang1033\f1\fs18 The e\lang1040\f0 xternal storage\lang1033\f1  option\lang1040\f0  \lang1033\f1 provides\lang1040\f0  the ability to \lang1033\f1 specify that\lang1040\f0  a particular part, parts or reference\f1 s\f0  attribute should be mapped outside of \lang1033\f1 its\lang1040\f0  class\lang1033\f1  \lang1040\f0 table\lang1033\f1 . For \cf2\strike container attributes\cf3\strike0{\v RelationalAttributeTypes>main}\cf1\lang1040\f0  \lang1033\f1 this mapping is implemented through an\lang1040\f0  additional \lang1033\f1 linking\lang1040\f0  \lang1033\f1 table\lang1040\f0 . In the case of part attributes, the intermediate \lang1033\f1 object\lang1040\f0  is not needed because the relationship \lang1033\f1 between\lang1040\f0  the owner and the part is 1:1.
\par \f2\fs10 
\par \f0\fs18 Th\lang1033\f1 e\lang1040\f0  \lang1033\f1 linking\lang1040\f0  table has fields to hold information about\lang1033\f1  both\lang1040\f0  the relationships and the sequence of elements in the \lang1033\f1 container\lang1040\f0  attribute.\f2\fs10 
\par \f0\fs18 The mapping of the \lang1033\f1 external reference(s)\lang1040\f0  attribute is very similar\lang1033\f1  to that for the external p\lang1040\f0 art\lang1033\f1 (\lang1040\f0 s\lang1033\f1 ) \lang1040\f0 attribute\lang1033\f1 .\lang1040\f0  \lang1033\f1 T\lang1040\f0 he only difference is \lang1033\f1 one of ownership which results in \lang1040\f0 th\lang1033\f1 e\lang1040\f0  part\lang1033\f1 (\lang1040\f0 s\lang1033\f1 )\lang1040\f0  attribute's \lang1033\f1 table record(s)\lang1040\f0  \lang1033\f1 being\lang1040\f0  deleted when the \lang1033\f1 its related class\lang1040\f0  \lang1033\f1 table record\lang1040\f0  is deleted\lang1033\f1 .\lang1040\f0  \lang1033\f1 T\lang1040\f0 his of course does not happen with reference\lang1033\f1 (\lang1040\f0 s\lang1033\f1 )\lang1040\f0  attributes.
\par \f2\fs10 
\par \cf3\b\fs22#{\footnote # HowToUseExternalStorage}\cf0 How to use external storage\cf1\ul\f0\fs18 
\par \ulnone\b0\f1 The external storage option can be applied in the \f2 Attribute Editor\f1  by setting \i Storage Kind \i0 to the value "External" when defining a new attribute.
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc AttributeEditorDefinitionExternal.gif\}\cf1 
\par \f2\fs10 
\par \f0\fs18 The\lang1033\f1  \lang1040\b\f0 Storage Kind\b0\i  \i0 combo-box \lang1033\f1 allows a selection\lang1040\f0  between \i Embedded \i0 (the classic model) and \i External \i0 (the new model). For Part attributes that (in addition to defining the target class \i stored \i0 and not \i embedded\i0 ) is enough. For Parts and References you also need \lang1033\f1 an\lang1040\f0  \b External Storage Name\lang1033\b0\f1  entry\lang1040\f0 , that is the name the \lang1033\f1 linking\lang1040\f0  table will have. \lang1033\f1 The default naming \lang1040\f0 convention\lang1033\f1  is to \lang1040\f0 use "<\lang1033\f1 class\lang1040\f0  \lang1033\f1 storage\lang1040\f0  name>_<attribute name>"\lang1033\f1  for new attributes\lang1040\f0 , but\lang1033\f1  any other suitable\lang1040\f0  naming scheme\lang1033\f1  may be used\lang1040\f0 .\lang1033\f1  If \b Auto\b0  is checked the default naming scheme will be used to update the \lang1040\b\f0 External Storage Name\lang1033\b0\f1  entry to the current values of its component names (ie \lang1040\f0 <\lang1033\f1 class\lang1040\f0  \lang1033\f1 storage\lang1040\f0  name>\lang1033\f1  and \lang1040\f0 <attribute name>\lang1033\f1 ).\lang1040\f0 
\par \pard\f2\fs10 
\par \pard\sb25\sa25\lang1033\f1\fs18 IMPORTANT\lang1040\f0  NOTE\lang1033\f1 S:
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\b\i External Storage and Class Persistence\b0\i0  - A cl\lang1040\f0 ass must \lang1033\f1 have its Persistence property set to\lang1040\f0  \i stored\i0  \lang1033\f1 if it is referred\lang1040\f0  \lang1033\f1 to by attributes that use\lang1040\f0  \i external \i0 storage. \lang1033\f1 A c\lang1040\f0 lass\lang1033\f1  defined with\lang1040\f0  \i embedded\i0  \lang1033\f1 Persistence may only be used by\lang1040\f0  \i embedded\i0  (the \lang1033\f1 InstantObjects \lang1040\f0 historical arrangement) part and parts attributes\lang1033\f1 ;\lang1040\f0 
\par \lang1033\b\i\f1{\pntext\f6\'B7\tab}Performance Hint\b0\i0  - Currently (V2.0), the InstantObjects (IO) library does not create parent class indices for the linking tables in the database. A significant improvement in performance, therefore, can often be achieved by manually adding these indices (fields 'ParentClass' and 'ParentId', non-unique) to the linking tables for your external \cf2\strike container attributes\cf3\strike0{\v RelationalAttributeTypes>main}\cf1 . Remember that these manually added indices will be removed by each IO database build and probably after an evolve, so they will need to monitored and re-added as necessary. The need to add these indices manually will be eliminated after the introduction of Referential Integrity (RI) options to IO. This is expected to happen in the near future and will enhance both the integrity of data in and performance of the database for brokers that can implement RI. \lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard\cf0\fs20 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble230}
{\up $}{\footnote {\up $} Example Class Definition with External Attributes}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Example\lang1033\f5  -\lang3081\f2  Class Definition with External Attributes\cf3\cf1\b0\fs18 
\par \pard\sb25\sa25\lang1040\f0 Here is a snippet from an example class definition with external attributes\lang1033\f1 . The storage name for the class TTest is assumed to be Test\lang1040\f0 :
\par \f2\fs10 
\par \f3\fs18   TTest2 = class(TInstantObject)
\par   \{IOMETADATA stored;
\par     TestPart: Part(TTest) external;
\par     TestParts: Parts(TTest) external 'Test2_TestParts';
\par     TestRef: Reference(TTest);
\par     TestRefs: References(TTest) external 'Test2_TestRefs'; \}
\par \fs10 
\par \f0\fs18 The TestPart attribute is an external part attribute, which \lang1033\f1 results in\lang1040\f0  a mapping very similar to TestRef\lang1033\f1 .\lang1040\f0  \lang1033\f1 I\lang1040\f0 nstead of having a blob field called TestPart, the Test2 table has \lang1033\f1 two reference fields,\lang1040\f0  TestPartId\lang1033\f1  and \lang1040\f0 TestPartClass, and the \lang1033\f1 referenced\lang1040\f0  \lang1033\f1 T\lang1040\f0 Test\lang1033\f1  \lang1040\f0 object\lang1033\f1 's attributes\lang1040\f0  \lang1033\f1 are\lang1040\f0  stored\lang1033\f1  as a record\lang1040\f0  in \lang1033\f1 the \lang1040\f0 Test\lang1033\f1  table \lang1040\f0 .
\par \f2\fs10 
\par \f0\fs18 The TestParts\lang1033\f1  external\lang1040\f0  attribute \lang1033\f1 results in\lang1040\f0  the creation of a \lang1033\f1 linking\lang1040\f0  table \lang1033\f1 named\lang1040\f0  Test2_TestParts which has relationships with both Test2 and Test:
\par Test2 --1:N--> Test2_TestParts --1:1--> Test.
\par \lang1033\f1 The\lang1040\f0  Test2_TestParts \lang1033\f1 linking\lang1040\f0  table has fields to hold information about \lang1033\f1 both \lang1040\f0 the relationships and the sequence of elements in the TestParts\lang1033\f1  \lang1040\f0 attribute.
\par \f2\fs10 
\par \f0\fs18 The mapping of the TestRefs attribute is very similar\lang1033\f1  to that for the \lang1040\f0 TestParts\lang1033\f1  \lang1040\f0 attribute\lang1033\f1 .\lang1040\f0  \lang1033\f1 T\lang1040\f0 he only difference is that the TestParts\lang1033\f1  \lang1040\f0 attribute's\lang1033\f1  Test\lang1040\f0  \lang1033\f1 table records\lang1040\f0  \lang1033\f1 are\lang1040\f0  deleted when the\lang1033\f1  related\lang1040\f0  Test2 \lang1033\f1 table record\lang1040\f0  is deleted\lang1033\f1 .\lang1040\f0  \lang1033\f1 T\lang1040\f0 his\lang1033\f1  cascade delete process,\lang1040\f0  of course\lang1033\f1 ,\lang1040\f0  does not happen with \lang1033\f1 the \lang1040\f0 TestRefs attribute\lang1033\f1 's Test\lang1040\f0  \lang1033\f1 table records\lang1040\f0 .
\par \pard\lang3081\f2 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble240}
{\up $}{\footnote {\up $} Adding Business Rules}
{\up +}{\footnote {\up +} creatingbusinessmodel:000130}
{\up K}{\footnote {\up K} Adding Business Rules;Business Rules,Adding;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Adding Business Rules \cf1\b0\fs16 
\par \cf2\strike Example 1\cf3\strike0{\v Scribble250>example}\cf1\tab\cf2\strike Example 2\cf3\strike0{\v Scribble260>example}\cf1\f1\tab\cf2\strike\f0 Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\sb25\sa25\fs18 Validation rules and other business related behavior is added to your business classes by adding the required code plus additional methods and properties to the class. Validation rules and side effects of changing the value of an attribute are often added to the setter method of the corresponding property. Complete validation of business objects before they are stored to the database can be added by overriding the BeforeStore method of the class. New objects can be initialized by overriding the Initialize method. For a complete list of the virtual methods of \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1 , please refer to the InstantObjects Reference Guide.
\par 
\par \pard\cf0\lang3081\f5 Note: BeforeStore is currently NOT called for \i embedded\i0  objects. Validation of \i embedded \i0 objects, however, can be done by using its owner's BeforeStore event.\cf1\lang1040 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble250}
{\up $}{\footnote {\up $} Adding Business Rules, Example 1}
{\up K}{\footnote {\up K} Adding Business Rules,Example 1;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Example 1\b0\fs20 
\par \cf2\strike\f1\fs16 Adding Business Rules\cf3\strike0\f0{\v Scribble240>main}\cf1  \cf0\f2\fs20 
\par \pard\f5 In InstantObjects you usually apply single-attribute business rules in the attribute's property setter method:
\par 
\par \b\f3 procedure\b0  TAddress.SetPostalCode(\b const \b0 Value: \b string\b0 );
\par \b begin\b0 
\par   \i // Validation: raise exceptions to prevent value assignment.
\par \i0   \b if \b0 (Length(Value) <> 6) \b and \b0 (Value <> '') \b then\b0 
\par     \b raise \b0 Exception.Create(\i 'Postal Code must be filled with 6 chars'\i0 );
\par   \i // Assignment: this code will usually be written by InstantObjects automatically.  
\par \i0   _PostalCode.Value := Value;
\par \i   // Post-assignment: do things as a consequence of an attribute's value change
\par   // (see also the virtual method AttributeChanged).
\par \i0   \b if \b0 (Value <> '') \b and \b0 (City = '') \b then\b0 
\par     GetDefaultCityByPostalCode(Value);
\par \b end\b0 ;
\par \f2 
\par \f5 If you need to apply business rules that involve more than one attribute, instead, you often use the BeforeStore virtual method(see \cf2\strike Example 2\cf3\strike0{\v Scribble260}\cf0 ).
\par 
\par When you code side effects, be aware that the property setters might be called more often than expected, for example when reading an object from an XML file or when you use the data-aware presentation layer. Here is an example:
\par 
\par \b\f3 procedure \b0 TShipment.SetMinShipDate(\b const \b0 Value: TDateTime);
\par \b begin\b0 
\par   \i // Assignment: this code will usually be written by InstantObjects automatically.  
\par \i0   _MinShipDate.Value := Value;
\par   MaxShipDate := 0;    
\par \b end\b0 ;
\par \f5 
\par The intent of this code is to reset MaxShipDate whenever MinShipDate changes, so that a user, in a hypothetical data-entry scenario, will have to re-enter a value for MaxShipDate. But things might not work always as expected. For example, SetMinShipDate might be called after SetMaxShipDate when streaming in an object from a XML file. The lesson here is: use the property setters and the BeforeStore method only to apply real business rules (like "MaxShipDate must be equal to or greater than MinShipDate"), and code data-entry rules (like "whenever a value for MinShipDate is entered, MaxShipDate should be reset") at the data-entry level (that is, not in the model classes).
\par 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble260}
{\up $}{\footnote {\up $} Adding Business Rules, Example 2}
{\up K}{\footnote {\up K} Adding Business Rules,Example 2;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Example 2\b0\fs20 
\par \cf2\strike\f1\fs16 Adding Business Rules\cf3\strike0\f0{\v Scribble240>main}\cf1 
\par \pard\cf0\f5\fs20 Business rules that involve more than one attribute are usually applied in BeforeStore, which gets called whenever the Store method is called to write an object (back) to the storage. Example:
\par 
\par \b\f3 procedure \b0 TShipment.BeforeStore;
\par \b begin\b0 
\par   \b if \b0 MinShipDate > MaxShipDate \b then\b0 
\par     \b raise \b0 Exception.Create(\i 'Date range error'\i0 );
\par   \b inherited\b0 ;
\par \b end\b0 ;
\par \f2 
\par \f5 You initialize an object by overriding Initialize (if you need to apply initialization code both when a new object is created and when it is retrieved from the storage), or AfterCreate (if you need to apply initialization code for newly created objects only). There is also an AfterRetrieve method that you can override to apply initialization code only when an existing object is read from the storage and materialized in memory. Here is an example of AfterCreate:
\par \f2 
\par \b\f3 procedure \b0 TContact.AfterCreate;
\par \b var
\par \b0   vCategory: TCategory;
\par \b begin\b0 
\par   \b inherited\b0 ;
\par   Id := InstantGenerateId;
\par   vCategory := TCategory.Retrieve(\i 'CAT000'\i0 );
\par   \b try\b0 
\par     Category := vCategory;
\par   \b finally\b0 
\par     vCategory.Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par \f5 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble270}
{\up $}{\footnote {\up $} Building/Evolving the Business Model}
{\up +}{\footnote {\up +} creatingbusinessmodel:000140}
{\up K}{\footnote {\up K} Building/Evolving the Business Model;Business Model,Building,Evolving;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 Building/Evolving the Business Model \b0\fs16 
\par \cf2\strike Creating the Business Model\cf3\strike0{\v Scribble70>main}\cf1  
\par \pard\sb25\sa25\fs18 The final step in the modeling phase is to make the model physical in terms of storage for the objects. The required tables and indices have to be created from the business model. InstantObjects allows \lang1033\f1 the\lang1040\f0  use\lang1033\f1  of\lang1040\f0  various types of databases as storage for \lang1033\f1 the business class \lang1040\f0 objects\lang1033\f1  by\lang1040  using different brokers.
\par \f2\fs10 
\par \f0\fs18 The Connection Manager \lang1033\f1 manages the\lang1040\f0  \f1 definition, \f0 creat\lang1033\f1 ion\lang1040\f0  \f1 and evolution of \lang1033 the\lang1040\f0  database. \lang1033\f1 It\lang1040\f0  \lang1033\f1 can be launched using the \cf3\{bmc ModelExplorerBuildDatabaseButton.gif\} \cf1 Build Database speed button\lang1040\f0  on the toolbar of the\lang1033\f1  \cf2\strike InstantObjects\lang1040\f0  Model Explorer\cf3\strike0{\v Scribble90>main}\f1 
\par \cf1\f2\fs10 
\par \cf3\f1\fs18\{bmc ConnectionManager.gif\}
\par \cf1\f2\fs10 
\par \b\f5\fs18 Defining a Broker Connection\b0\f0 
\par The first step in preparing the database is to \f1 define\f0  a connect\f1 or\f0  \f1 using a specific broker to establish a connection \f0 to the database.\f1 
\par Click the right mouse button over the \f0 Connection Manager\lang1033\f1  dialog and s\lang1040 elect New in the pop-up context menu. Choose the preferred Broker and its ConnectionDef Editor appears. The contents of the ConnectionDef Editor varies depending on the requirements of its related broker. The example image below is for the Interbase/Firebird IBX broker.
\par \f2\fs10 
\par \cf3\f0\fs18\{bmc ConnectionDefEditor.gif\}
\par \cf1\f2\fs10 
\par \f1\fs18 Define the connection properties and save the connection definition. Repeat this procedure for any other broker connections required.
\par \f2\fs10 
\par \b\f5\fs18 Building the Database for a Model\b0\f0 
\par \f1 WARNING: \i Any existing data in the database will be destroyed during the build process!
\par \i0 Select the desired Broker Connection in the \f0 Connection Manager\lang1033\f1  then\lang1040  to Build its database click the Build button. The Database Builder dialog appears. Click on the Show Build Sequence button and the Evolution Sequence pane will display the sequence of commands that will be executed during the actual build process. The individual steps can be disabled, enabled and re-ordered as desired using the check boxes on the left of each step in the sequence and the buttons on the right of the dialog. When the desired sequence is ready, click the Build Database button to execute it. The build progress and results are reported in the Evolution Log pane. 
\par \f2\fs10 
\par \cf3\f1\fs18\{bml DatabaseBuilder.gif\}
\par \cf1\f2\fs10 
\par \b\f5\fs18 Evolving an Existing Database for a Modified Model\b0\f0 
\par \f1 If the database for a model has been built and populated with data, subsequent changes to the model requiring a database restructure can be accommodated within the InstantObjects framework by Evolving the database. Unlike the Build procedure, which will destroy and recreate all database tables, the evolution process will try to save the existing data. The effectiveness of the evolution process depends on the features of the particular kind of database you are using.
\par WARNING: \i While the InstantObjects evolution process will attempt to preserve existing data, success is NOT guaranteed! It is strongly recommended that a verified back up of the database is available before this evolution process is applied.\i0 
\par To evolve an existing database, select the desired Broker Connection and click the Evolve button. The Database Evolver dialog similar to the Database Builder dialog will appear. Click on the Show Evolution Sequence button and the Evolution Sequence pane will display the sequence of commands that will be executed during the actual evolve process. The individual steps can be disabled, enabled and re-ordered as desired using the check boxes on the left of each step in the sequence and the buttons on the right of the dialog. When the desired sequence is ready, click the Evolve Database button to execute it. The evolve progress and results are reported in the Evolution Log pane.\b 
\par 
\par \b0\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble280}
{\up $}{\footnote {\up $} Creating the User Interface}
{\up +}{\footnote {\up +} creatinguserinterface:000010}
{\up K}{\footnote {\up K} Creating the User Interface;User Interface,Creating;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Creating the User Interface\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike Group Topics\cf3\strike0{\v Scribble290>nav}\cf1\tab\cf2\strike Using InstantObjects\cf3\strike0{\v Scribble50>main}\cf1  
\par \pard\sb25\sa25\tx1435\fs18 The next phase in the development process is to create a user interface through which the business objects may interact with the user. This section explains the components that are involved in the creation of the user interface.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble290}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Creating the User Interface \cf1\b0\fs16 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf0\cf1  
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 Persistence by RAD\cf3\strike0{\v Scribble300>main}\cf1 
\par \cf2\strike The Connector\cf3\strike0{\v Scribble310>main}\cf1 
\par \cf2\strike The Exposer\cf3\strike0{\v Scribble320>main}\cf1 
\par \cf2\strike The Selector\cf3\strike0{\v Scribble330>main}\cf1 
\par 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble300}
{\up $}{\footnote {\up $} Persistence by RAD}
{\up +}{\footnote {\up +} creatinguserinterface:000020}
{\up K}{\footnote {\up K} Persistence by RAD;RAD, Persistence;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Persistence by RAD \cf1\b0\fs16 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1  
\par \pard\sb25\sa25\fs18 When InstantObjects has been installed in your Delphi environment, a set of components is available on the InstantObjects tab of the Delphi component palette.
\par \cf3\{bmc InstantObjectsPalette.gif\}\cf1 
\par Applications can be built with InstantObjects using the same RAD approach used when building traditional database applications in Delphi. InstantObjects allows you to use standard VCL data-aware controls with your persistent business objects. The InstantObjects components are used to connect to the database and to make business objects available in the user interface of the application\f1 .\f0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble310}
{\up $}{\footnote {\up $} The Connector}
{\up +}{\footnote {\up +} creatinguserinterface:000030}
{\up K}{\footnote {\up K} Connector;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 The Connector \cf1\b0\fs16 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1  
\par \pard\sb25\sa25\fs18 In order for your application to use the database \lang1033\f1 for\lang1040\f0  object storage, you must use a connector component. The connector acts as a gateway between your application and the database\f1  (by means of an internal component called the broker) and \f0 manag\lang1033\f1 es\lang1040\f0  all the objects that are stored to and retrieved from the database. A connector component for each type of data access layer that \lang1033\f1 has been installed from\lang1040\f0  InstantObjects is available on the component palette. A connector is attached to a database by assigning a connection component to its Connection \f1 (or equivalent) \f0 property. Each connector component supports its own connection type\f1 . For example:\f0 
\par \f2\fs10 
\par \pard\sb25\sa25\tx1980\tx4800\b\f0\fs18 Access type\tab Connector type\tab\f1 Type of \f0 Connection\b0 
\par ADO\tab\cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1\tab TADOConnection
\par BDE\tab\cf2\strike TInstantBDEConnector\cf3\strike0{\v Scribble2560>main}\cf1\tab TDatabase
\par IBX\tab\cf2\strike TInstantIBXConnector\cf3\strike0{\v Scribble6960>main}\cf1\tab TIBDatabase
\par \f1 D\f0 BX\tab\cf0 TInstant\f1 D\f0 BXConnector\cf1\tab TSQLConnection
\par \f1 XML\tab\cf0\f0 TInstantX\f1 ML\f0 Connector\cf1\tab TXMLFilesAccessor
\par \pard\f2\fs10 
\par \pard\sb25\sa25\f1\fs18 InstantObjects supports a variety of databases and data-access technologies (for example NexusDB, ZeosDBO, Unified InterBase...) by means of packages called Brokers. You can build and install the broker(s) you need from the Brokers sub-folder of InstantObjects's Source folder.
\par \pard\f2\fs10 
\par \f0\fs18 Drop an appropriate connector component and a matching connection component on a form or a data module in your project. Configure the connection component to access the database and assign it to the Connection \f1 (or equivalent) \f0 property of the connector component. The connector will use the connection to gain access to the database. By setting the IsDefault property to True, the connector will be used as the default connector in the application.
\par \f2\fs10 
\par \f1\fs18 You can also use a TInstantConnectionManager component that stores connection data in external files and can create connectors and connections automatically based on this data. This is particularly useful when you don't want to hard code a particular broker or set of brokers into your program. See the Primer Demo application for an example of this technique.
\par \f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble320}
{\up $}{\footnote {\up $} The Exposer}
{\up +}{\footnote {\up +} creatinguserinterface:000040}
{\up K}{\footnote {\up K} Exposer;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 The Exposer \b0\fs16 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1  
\par \pard\sb25\sa25\cf2\strike\fs18 TInstantExposer\cf3\strike0{\v Scribble6450>main}\cf1  is a dataset component that maps objects to the user interface of your application.
\par Attributes defined in the business model are accessed through properties. Properties that are published can be accessed by data-aware controls via this component. In addition, the content of container attributes can be accessed too. The exposer component maps the published properties of objects to fields in a dataset. The objects being exposed are represented as rows in the dataset.
\par To expose an object, it must be assigned to the \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf1  property of a \cf2\strike TInstantExposer\cf3\strike0{\v Scribble6450>main}\cf1 . To expose multiple objects contained within another object, assign the main object to the Subject property and enter content mode by changing the \cf2\strike Mode\cf3\strike0{\v Scribble5020>main}\cf1  property from amObject to amContent. If the exposed class has no default container, specify the desired container in the property \cf2\strike ContainerName\cf3\strike0{\v Scribble6560>main}\cf1 . Specify the class of the exposed\lang1033\f1 , contained\lang1040\f0  object(s) in the property \cf2\strike ObjectClassName\cf3\strike0{\v Scribble6630>main}\cf1 .
\par By default, an exposer will make all simple properties of each exposed object as well as any related object available through fields in the dataset. Every field will have a \f1 F\f0 ield\f1 N\f0 ame matching the property it represents. For related objects, the fieldname will be the complete path to the property using regular dot notation. The property \cf2\strike FieldOptions\cf3\strike0{\v Scribble4930>main}\cf1  and the event \cf2\strike OnIncludeField\cf3\strike0{\v Scribble5570>main}\cf1  allow you to limit or extend the number fields to include.
\par Container attributes of exposed objects are automatically recognized by the exposer and \lang1033\f1 are \lang1040\f0 represented as nested datasets within the exposer.
\par Exposers can be linked together in master/detail relation\f1 ships\f0 . To link one exposer to another, assign the master exposer to the DataSet property of a TDataSource and assign the TDataSource to the \cf2\strike MasterSource\cf3\strike0{\v Scribble6580>main}\cf1  property of the detail exposer. The Subject of the detail exposer will be set to the current object of the master exposer\lang1033\f1  and updated\lang1040\f0  whenever this changes. If you want the detail exposer to expose an object that is related to the current object of the master exposer instead, simply specify the desired property path in \cf2\strike MasterProperty\cf3\strike0{\v Scribble6570>main}\cf1 .
\par \cf2\strike TInstantExposer\cf3\strike0{\v Scribble6450>main}\cf1  is not limited to exposing \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1  descendants. Any object with published propertied can be exposed. The content of standard VCL containers like TList, TObjectList and TCollection can be exposed in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble330}
{\up $}{\footnote {\up $} The Selector}
{\up +}{\footnote {\up +} creatinguserinterface:000050}
{\up K}{\footnote {\up K} Selector;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 The Selector \cf1\b0\fs16 
\par \cf2\strike Creating the User Interface\cf3\strike0{\v Scribble280>main}\cf1  
\par \pard\sb25\sa25\fs18 The \cf2\strike TInstantSelector\cf3\strike0{\v Scribble10200>main}\cf1  is a dataset component \lang1033\f1 that \lang1040\f0 allows you to select objects from the database and optionally expose them in the user interface.
\par To select objects from the database, a command must be specified \lang1033\f1 in\lang1040\f0  the Command property. The syntax of this command\f1  (called an IQL command, from Instant Query Language) \f0  is somewhat similar to an SQL SELECT-statement\f1 , \f0 but instead of tables and columns, you specify classes and attributes:
\par \pard\keep\f7 
\par SELECT [DISTINCT] *|<Attribute>
\par FROM [ANY] <Class>
\par [WHERE <Expression>]
\par [ORDER BY <Attribute list>]
\par \pard\sb25\sa25\f0 
\par The simplest command that can be specified looks like this:
\par \pard\keep\f7 
\par SELECT * FROM TContact
\par \pard\sb25\sa25\f0 
\par This command select\f1 s\f0  all concrete instances of the class TContact. To select instances of TContact and any descendant class, add the ANY keyword:
\par \pard\keep\f7 
\par SELECT * FROM ANY Tcontact
\par \pard\sb25\sa25\f0 
\par If you want to select objects that are related to instances of a class, specify the relation attribute instead of the \f1 *\f0 , like this:
\par \pard\keep\f7 
\par SELECT Address FROM ANY Tcontact
\par \pard\sb25\sa25\f0 
\par If the same object is related to from several objects via the specified attribute and you do not want it to appear more than once in the result, use the DISTINCT keyword with the attribute:
\par \pard\keep\f7 
\par SELECT DISTINCT Address FROM ANY Tcontact
\par \pard\sb25\sa25\f0 
\par To select from objects that meet a certain criteria, you must add a WHERE clause to the command. This clause must contain an expression that evaluates to True or False. The expression can use attributes, constants and functions in combination with the most common operators. The following example will select all customers with a negative balance.
\par \pard\keep\f7 
\par SELECT * FROM TCustomer WHERE Balance < 0
\par \pard\sb25\sa25\f0 
\par To order the selected objects by one or more attributes, specify the attributes with ORDER BY:
\par \pard\keep\f7 
\par SELECT * FROM TCustomer ORDER BY Balance, Name
\par \pard\sb25\sa25\f0 
\par When the selector is opened, it performs a query against the database. The resulting objects are available via the Objects property. The number of objects selected can be read via the property ObjectCount.
\par If you want to expose the selected objects in the user interface, simply assign the selector to a TDataSource that is attached to data-aware controls.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble340}
{\up $}{\footnote {\up $} Programming with Persistent Objects}
{\up +}{\footnote {\up +} programming:000010}
{\up K}{\footnote {\up K} Programming with Persistent Objects;Persistent Objects,Programming;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Programming with Persistent Objects\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike Group Topics\cf3\strike0{\v Scribble350>nav}\cf1\tab\cf2\strike Using InstantObjects\cf3\strike0{\v Scribble50>main}\cf1  
\par \pard\sb25\sa25\tx1435\fs18 The driving force in InstantObjects based applications \lang1033\f1 is\lang1040\f0  the persistent classes \lang1033\f1 that\lang1040\f0  contain the business logic. These business classes all descend from the fundamental \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1  class. This section covers aspects of working directly with the business classes of \lang1033\f1 an\lang1040\f0  application.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble350}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Programming with Persistent Objects \cf1\b0\fs16 
\par \cf2\strike Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1  
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 Creating New Objects\cf3\strike0{\v Scribble360>main}\cf1 
\par \cf2\strike Retrieving Existing Objects\cf3\strike0{\v Scribble380>main}\cf1 
\par \cf2\strike Associating Objects\cf3\strike0{\v Scribble420>main}\cf1 
\par \cf2\strike\f1 Using t\f0 he \f1 InstantQuery\cf3\strike0\f0{\v Scribble440>main}\cf1 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble360}
{\up $}{\footnote {\up $} Creating New Objects}
{\up +}{\footnote {\up +} programming:000020}
{\up K}{\footnote {\up K} Creating New Objects;New Objects,Creating;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 Creating New Objects\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike Example 1\cf3\strike0{\v Scribble370>example}\cf1\tab\cf2\strike Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1  
\par \pard\sb25\sa25\tx1435\fs18 Business objects are created just like any other object. The Create constructor of the class creates a new instance of the class.
\par The constructor can be called with an optional Connector parameter. This connector specifies the database in which to make the object persistent. If no connector is specified, the default connector will be used.
\par To make an object persistent, call its Store method. Only instances of classes declared \lang1033\f1 with\lang1040\f0  \lang1033\f1 a \lang1040\f0 persisten\lang1033\f1 ce property of \i stored\lang1040\f0  \i0 in the business model can be \lang1033\f1 S\lang1040\f0 tored.
\par If an object does not\lang1033\f1  already\lang1040\f0  have \lang1033\f1 its\lang1040\f0  Id\lang1033\f1  assigned\lang1040\f0 , \lang1033\f1 an\lang1040\f0  id\lang1033\f1  value\lang1040\f0  will be \lang1033\f1 generated\lang1040\f0  \lang1033\f1 and assigned to \lang1040\f0 it\lang1033\f1  prior to storage\lang1040\f0 .
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble370}
{\up $}{\footnote {\up $} Creating New Objects, Example 1}
{\up K}{\footnote {\up K} Creating New Objects,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike Creating New Objects\cf3\strike0{\v Scribble360>main}\cf1  
\par \pard\keep\f7\fs18 
\par \b var\b0 
\par   Person: TPerson
\par \b begin\b0 
\par   Person := TPerson.Create(MyConnector);
\par   \b try\b0 
\par     Person.Id := '12345678'
\par     Person.Name := 'John Doe';
\par     Person.Store;
\par   \b finally\b0 
\par     Person.Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble380}
{\up $}{\footnote {\up $} Retrieving Existing Objects}
{\up +}{\footnote {\up +} programming:000030}
{\up K}{\footnote {\up K} Retrieving Existing Objects;Existing Objects,Retrieving;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Retrieving Existing Objects\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\cf2\strike Example 1\cf3\strike0{\v Scribble390>example}\cf1\tab\cf2\strike Example 2\cf3\strike0{\v Scribble400>example}\cf1\tab\cf2\strike Example \lang1033\f1 3\cf3\lang1040\strike0\f0{\v Scribble410>example}\cf1\lang1033\f1\tab\tab\cf2\lang1040\strike\f0 Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1  
\par \pard\sb25\sa25\tx1435\tx2875\fs18 Objects that have been stored to the database can be retrieved into memory \lang1033\f1 by using any of the following techniques:
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\tx2875 If the Id of the object is known \lang1040\f0 the Retrieve constructor\lang1033\f1  can be used\lang1040\f0 . An optional connector through which the object shall be retrieved can be specified. If no connector is specified, the default connector is used. If the object already exists in memory, the existing object is returned. If the object is not found, the constructor returns nil.\lang1033\f1  See \cf2\strike example 1\cf3\lang1040\strike0\f0\fs16{\v Scribble390>example}\cf1\lang1033\f1\fs18 .\lang1040\f0 
\par \pard\sb25\sa25\f2\fs10 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\tx2875\f0\fs18 If the Id of the object is not known or multiple objects meeting a certain criteria \lang1033\f1 need to\lang1040\f0  be retrieved, a \cf2\lang1033\strike\f1 S\lang1040\f0 elector\cf3\strike0\fs16{\v Scribble330>main}\cf1\fs18  \lang1033\f1 or an \cf2\lang1040\strike InstantQuery\cf3\strike0\f0\fs16{\v Scribble440>main}\cf1\lang1033\f1  \lang1040\f0\fs18 can be used\lang1033\f1 . See \cf2\strike example 2\cf3\lang1040\strike0\f0\fs16{\v Scribble400>example}\cf1\lang1033\f1\fs18  and \cf2\strike example 3\cf3\lang1040\strike0\f0\fs16{\v Scribble410>example}\cf1\lang1033\f1\fs18 .\lang1040\f0 
\par \pard\sb25\sa25\tx200\tx2875\f2\fs10 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble390}
{\up $}{\footnote {\up $} Retrieving Existing Objects, Example 1}
{\up K}{\footnote {\up K} Retrieving Existing Objects,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike Retrieving Existing Objects\cf3\strike0{\v Scribble380>main}\cf1  
\par \pard\keep\f7\fs18 
\par \b var\b0 
\par   Person: TPerson;
\par \b begin\b0 
\par   Person := TPerson.Retrieve('12345678', MyConnector);
\par   \b try\b0 
\par     ShowMessage(Person.Name);
\par   \b finally\b0 
\par     Person.Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par \pard\sb25\sa25\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble400}
{\up $}{\footnote {\up $} Retrieving Existing Objects, Example 2}
{\up K}{\footnote {\up K} Retrieving Existing Objects,Example 2;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 2 \cf1\b0\fs16 
\par \cf2\strike Retrieving Existing Objects\cf3\strike0{\v Scribble380>main}\cf1  
\par \pard\keep\f7\fs18 
\par \b var\b0 
\par   I: Integer;
\par   Person: TPerson;
\par \b begin\b0 
\par   \b with \b0 TInstantSelector.Create(nil) \b do\b0 
\par   \b try\b0 
\par     Connector := MyConnector;
\par     Command.Text := 'SELECT * FROM TPerson WHERE Company.Name = "Happy Donuts"';
\par     Open;
\par     \b for \b0 I := 0 \b to \b0 Pred(ObjectCount) \b do\b0 
\par     \b begin\b0 
\par       Person := Objects[I] as TPerson;
\par       Person.Salary := Person.Salary * 1.05;
\par       Person.Store;
\par     \b end\b0 ;
\par   \b finally\b0 
\par     Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble410}
{\up $}{\footnote {\up $} Retrieving Existing Objects, Example 3}
{\up K}{\footnote {\up K} Retrieving Existing Objects,Example 3;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example \lang1033\f1 3\lang1040\f0  \cf1\b0\fs16 
\par \cf2\strike Retrieving Existing Objects\cf3\strike0{\v Scribble380>main}\cf1  
\par \pard\keep\f7\fs18 
\par \b var\b0 
\par   I: Integer;
\par   Person: TPerson;
\par \pard\b\f3 begin\b0 
\par \pard\keep\f7   \lang1033\b\f8 with \lang1040\b0\f7 MyConnector\f3 .CreateQuery \b do\b0\f7 
\par \lang1033\f8   \lang1040\b\f7 try\b0 
\par     Command := 'SELECT * FROM TPerson WHERE Company.Name = "Happy Donuts"';
\par     Open;
\par     \b for \b0 I := 0 \b to \b0 Pred(ObjectCount) \b do\b0 
\par     \b begin\b0 
\par       Person := Objects[I] as TPerson;
\par       Person.Salary := Person.Salary * 1.05;
\par       Person.Store;
\par     \b end\b0 ;
\par   \b finally\b0 
\par     Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par \pard\cf0\lang3081\b\f2\fs24 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble420}
{\up $}{\footnote {\up $} Associating Objects}
{\up +}{\footnote {\up +} programming:000040}
{\up K}{\footnote {\up K} Associating Objects;Objects,Associating;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Associating Objects\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike Example 1\cf3\strike0{\v Scribble430>example}\cf1\tab\cf2\strike Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1  
\par \pard\sb25\sa25\tx1435\fs18 Persistent object relations \lang1033\f1 are \lang1040\f0 defined by relational attributes in the business model \lang1033\f1 and \lang1040\f0 can be accessed just as easy as any other attribute.
\par Single object relations defined by Part and Reference attributes are accessed through the corresponding object property of the class.
\par Multiple object references defined by Parts and References attributes are accessed through the corresponding array property and the container methods defined for the attribute.
\par 
\par \lang1033\b\f1 Assignment to \lang1040\f0 relational attributes
\par \lang1033\b0\f1 (A close study of the code in \cf2\strike Example 1\cf3\strike0{\v Scribble430>example}\cf1  will help to clarify the points below.)\lang1040\f0 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\sb25\sa25\tx200\lang1033\f1 O\lang1040\f0 bjects created \lang1033\f1 and\lang1040\f0  then assigned to \i part/parts attributes\i0  \lang1033\f1 SHOULD \lang1040\f0 NOT be freed after assignment. These attributes expect \lang1033\f1 the \lang1040\f0 transfer to them \lang1033\f1 of\lang1040\f0  ownership of the objects that they are assigned.\lang1033\f1  \lang1040\f0 The reference count\lang1033\f1 s\lang1040\f0  of these objects do not change during assignment.\lang1033\f1  \lang1040\f0 This means that\lang1033\f1 ,\lang1040\f0  when an object\lang1033\f1  is\lang1040\f0  create\lang1033\f1 d\lang1040\f0  and assign\lang1033\f1 ed\lang1040\f0  to a part/parts\lang1033\f1  \lang1040\f0 attribute\lang1033\f1 ,\lang1040\f0  the object that \lang1033\f1 was\lang1040\f0  created must \lang1033\f1 NOT be\lang1040\f0  free\lang1033\f1 d\lang1040\f0  unless an exception is raised during the\lang1033\f1  a\lang1040\f0 ssignment.\lang1033\f1  \lang1040\f0 
\par \lang1033\f1{\pntext\f6\'B7\tab}O\lang1040\f0 bjects created \lang1033\f1 and\lang1040\f0  then assigned to \i reference/references\lang1033\f1  \lang1040\f0 attributes\i0  DO need to be freed after assignment. These\lang1033\f1  \lang1040\f0 attributes DO NOT expect \lang1033\f1 the\lang1040\f0  transfer \lang1033\f1 of\lang1040\f0  ownership to them of the\lang1033\f1  \lang1040\f0 objects that they are assigned. The reference count of each of these\lang1033\f1  \lang1040\f0 objects is incremented during assignment. This means that\lang1033\f1 ,\lang1040\f0  when an object \lang1033\f1 is \lang1040\f0 create\lang1033\f1 d\lang1040\f0  and assign\lang1033\f1 ed\lang1040\f0  to a reference/references attribute\lang1033\f1 ,\lang1040\f0  the object that \lang1033\f1 was\lang1040\f0  created must \lang1033\f1 be \lang1040\f0 free\lang1033\f1 d\lang1040\f0  at some point after the\lang1033\f1  \lang1040\f0 assignment\lang1033\f1  to avoid a possible memory leak\lang1040\f0 . 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble430}
{\up $}{\footnote {\up $} Associating Objects, Example 1}
{\up K}{\footnote {\up K} Associating Objects,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike Associating Objects\cf3\strike0{\v Scribble420>main}\cf1  
\par \pard\keep\f7\fs18 
\par \pard\sb25\sa25\tx1435\f0 The \lang1033\f1 following\lang1040\f0  code defines a class containing the various relation types. The procedure CreateSamplePerson creates a TPerson object with a sample name and address, associates it with a company and adds some phones and colleagues to it. The procedures ShowPhones and ShowFriends shows a message with the caption of each of the corresponding objects associated with the person. The code assumes that a default connector has been created.
\par \pard\sb25\sa25\f2\fs10 
\par \pard\keep\b\f7\fs18 type\b0 
\par   TPerson = class(\cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1 )
\par   \{\-IOMETADATA stored;
\par     Address: Part(TAddress);
\par     Company: Reference(TCompany);
\par     Friends: References(TPerson);
\par     Name: String(30);
\par     Phones: Parts(TPhone); \}
\par     _Address: \cf2\strike TInstantPart\cf3\strike0{\v Scribble9250>main}\cf1 ;
\par     _Company: \cf2\strike TInstantReference\cf3\strike0{\v Scribble9520>main}\cf1 ;
\par     _Friends: \cf2\strike TInstantReferences\cf3\strike0{\v Scribble9780>main}\cf1 ;
\par     _Name: \cf2\strike TInstantString\cf3\strike0{\v Scribble11000>main}\cf1 ;
\par     _Phones: \cf2\strike TInstantParts\cf3\strike0{\v Scribble9390>main}\cf1 ;
\par   \b private\b0 
\par     \b function \b0 GetAddress: TAddress;
\par     \b function \b0 GetCompany: TCompany;
\par     \b function \b0 GetFriendCount: \b Integer\b0 ;
\par     \b function \b0 GetFriends(Index: Integer): TPerson;
\par     \b function \b0 GetName: \b string\b0 ;
\par     \b function \b0 GetPhoneCount: \b Integer\b0 ;
\par     \b function \b0 GetPhones(Index: \b Integer\b0 ): TPhone;
\par     \b procedure \b0 SetAddress(Value: TAddress);
\par     \b procedure \b0 SetCompany(Value: TCompany);
\par     \b procedure \b0 SetFriends(Index: \b Integer\b0 ; Value: TPerson);
\par     \b procedure \b0 SetName(\b const \b0 Value: \b string\b0 );
\par     \b procedure \b0 SetPhones(Index: \b Integer\b0 ; Value: TPhone);
\par   \b public\b0 
\par     \b function \b0 AddFriend(Friend: TPerson): \b Integer\b0 ;
\par     \b function \b0 AddPhone(Phone: TPhone): \b Integer\b0 ;
\par     \b function \b0 RemoveFriend(Friend: TPerson): \b Integer\b0 ;
\par     \b function \b0 RemovePhone(Phone: TPhone): \b Integer\b0 ;
\par     \b property \b0 FriendCount: \b Integer \b0 read GetFriendCount;
\par     \b property \b0 Friends[Index: \b Integer\b0 ]: TPerson \b read \b0 GetFriends \b write \b0 SetFriends;
\par     \b property \b0 PhoneCount: \b Integer read \b0 GetPhoneCount;
\par     \b property \b0 Phones[Index: \b Integer\b0 ]: TPhone \b read \b0 GetPhones \b write \b0 SetPhones;
\par   \b published\b0 
\par     \b property \b0 Address: TAddress \b read \b0 GetAddress \b write \b0 SetAddress;
\par     \b property \b0 Company: TCompany \b read \b0 GetCompany \b write \b0 SetCompany;
\par     \b property \b0 Name: string \b read \b0 GetName \b write \b0 SetName;
\par   \b end\b0 ;
\par 
\par \b function \b0 CreateSamplePerson(Company: TCompany): TPerson;
\par \b var\b0 
\par   I: Integer;
\par   Phone: TPhone;
\par \b begin\b0 
\par   Result := TPerson.Create;
\par   \b try\b0 
\par     Result.Name := 'John Doe';
\par     Result.Address.Street := 'Summer Street 1';
\par     Result.Company := Company;
\par 
\par     \{\f8\- Add phones \}
\par     Phone := TPhone.Create;
\par     try
\par       Phone.Name := 'Home';
\par       Phone.Number := '12345678';
\par       Result.AddPhone(Phone);
\par     except
\par       Phone.Free;
\par       raise;
\par     end;
\par     Phone := TPhone.Create;
\par     try
\par       Phone.Name := 'Office';
\par       Phone.Number := '32187654';
\par       Result.AddPhone(Phone);
\par     except
\par       Phone.Free;
\par       raise;
\par     end;
\par \f7 
\par \f8     \f7\{\- Add \lang1033\f8 new Person as a Friend\lang1040\f7  \}\f8 
\par     Person := TPerson.Create;
\par     try
\par       Person.Name := 'Fred Bloggs';
\par       Result.\f7 AddFriend\f8 (Person);
\par     finally
\par       Person.Free;
\par     end;
\par \f7 
\par     \{\- Add colleagues\lang1033\f8  as Friends\lang1040\f7  \}
\par     \b with \b0 TInstantSelector.Create(nil) \b do\b0 
\par     \b try\b0 
\par       Command.Text := 'SELECT * FROM TPerson WHERE Company = ' + Company.Id;
\par       Open;
\par       \b for \b0 I := 0 \b to \b0 Pred(ObjectCount) \b do\b0 
\par         Result.AddFriend(Objects[I] \b as \b0 TPerson);
\par     \b finally\b0 
\par       Free;
\par     \b end\b0 ;
\par 
\par     Result.Store;
\par   \b except\b0 
\par     Result.Free;
\par     \b raise\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 ShowPhones(Person: TPerson);
\par \b var\b0 
\par   I: Integer;
\par \b begin\b0 
\par   \b for \b0 I := 0 \b to \b0 Pred(Person.PhoneCount) \b do\b0 
\par     ShowMessage(Person.Phones[I].Caption);
\par \b end\b0 ;
\par 
\par \b procedure \b0 ShowFriends(Person: TPerson);
\par \b var\b0 
\par   I: Integer;
\par \b begin\b0 
\par   \b for \b0 I := 0 \b to \b0 Pred(Person.FriendCount) \b do\b0 
\par     ShowMessage(Person.Friends[I].Caption);
\par \b end\b0 ;
\par 
\par \b procedure \b0 DemonstrateRelations;
\par \b var\b0 
\par   Company: TCompany;
\par   Person: TPerson;
\par \b begin\b0 
\par   Company := TCompany.Retrieve('Happy Donuts');
\par   \b try\b0 
\par     Person := CreateSamplePerson(Company);
\par     \b try\b0 
\par       ShowPhones(Person);
\par       ShowFriends(Person);
\par     \b finally\b0 
\par       Person.Free;
\par     \b end\b0 ;
\par   \b finally\b0 
\par     Company.Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble440}
{\up $}{\footnote {\up $} Using an InstantQuery}
{\up +}{\footnote {\up +} programming:000050}
{\up K}{\footnote {\up K} Using an InstantQuery;InstantQuery,Using;}
}
\viewkind4\uc1\pard\keepn\cf1\b\f0\fs24 Using an InstantQuery\b0\fs16 
\par \cf2\strike Example 1\cf3\strike0{\v Scribble450>example}\cf1\tab\cf2\strike Programming with Persistent Objects\cf3\strike0{\v Scribble340>main}\cf1 
\par \pard\cf0\f1\fs18 TInstantQuery is not available in Delphi's Component or Tool Palette, but it is useful to fetch a list of objects from the storage through an IQL statement. TInstantQuery basically represents the core of \cf1  \cf2\strike\f0 TInstantSelector\cf3\strike0{\v Scribble10200>main}\cf1\f1 .
\par 
\par TInstantQuery is an abstract class. What you actually use are concrete descendant classes, which you instantiate through the connector's CreateQuery method. The advantage in using a TInstantQuery descendant lies directly in the lower overhead, as there is no TDataSet buffer management involved. So, if you want to fetch objects and don't have a data-aware presentation layer, TInstantQuery is the preferred way to do it. \f3 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble450}
{\up $}{\footnote {\up $} Using the InstantQuery, Example 1}
{\up K}{\footnote {\up K} Using the InstantQuery,Example 1;}
}
\viewkind4\uc1\pard\keepn\b\f0\fs24 Example 1
\par \cf2\b0\strike\f1\fs16 Using the InstantQuery\cf3\strike0{\v Scribble440}\f0\cf1  
\par \pard\b\f3\fs18 function \b0 CompanyOfCityCount(\b const\b0  ACityId: \b string\b0 ): Integer;
\par \b begin\b0 
\par   \b with\b0  InstantDefaultConnector.CreateQuery \b do\b0 
\par   \b try\b0 
\par     Command := \i 'SELECT * FROM ANY TCompany WHERE City = :City'\i0 ;
\par \i     // Since this is a parameterized query, fetch the param definitions.\i0 
\par     FetchParams(InstantQuery.Command, InstantQuery.Params);
\par \i     // Set the param values
\par \i0     Params.ParamByName('City').AsString := ACityId;
\par     Open;
\par     Result := ObjectCount;
\par   \b finally\b0 
\par     Free;
\par   \b end\b0 ;
\par \b end\b0 ;
\par \cf0\f2\fs20 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble460}
{\up $}{\footnote {\up $} Learning the Primer Demo}
{\up +}{\footnote {\up +} primerdemo:000010}
{\up K}{\footnote {\up K} Learning The Primer Demo;Primer Demo,Learning;}
}
\viewkind4\uc1\pard\keepn\b\fs24 Learning the Primer Demo\cf2\fs22 
\par \b0\strike\f0\fs16 Group Topics\cf3\strike0{\v Scribble470>nav}\cf1\tab\cf2\strike Using InstantObjects\cf3\strike0{\v Scribble50>main}\cf1  \cf0\f5\fs20 
\par \pard 
\par \fs18 InstantObjects Primer is an example application that was built using the InstantObjects Object Persistence Framework. It demonstrates how InstantObjects enables you to build truly object oriented database applications in Delphi using the same RAD approach you use, when building traditional database applications. 
\par \ul\b\fs20 
\par \pard\plain\f1

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble470}
}
\viewkind4\uc1\pard\keepn\sb25\b\f1\fs24 Primer Demo Summary\cf1\b0\f0\fs16 
\par \cf2\strike\f1 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\f0\cf1  
\par \pard\cf0\b\f5\fs20 Summary\b0 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\strike\fs18 Introduction\cf3\strike0{\v Scribble480>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}The Business Model\cf3\strike0{\v Scribble490>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}The User Interface\cf3\strike0{\v Scribble500>main}\cf0 
\par \pard 
\par \b Persistence
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\b0\strike Persisting Objects\cf3\strike0{\v Scribble510>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Mapping Scheme\cf3\strike0{\v Scribble520>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Streaming\cf3\strike0{\v Scribble530>main}\cf0 
\par \pard 
\par \b Presentation\b0 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\strike Exposing Objects\cf3\strike0{\v Scribble540>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Selecting Objects\cf3\strike0{\v Scribble550>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Filtering\cf3\strike0{\v Scribble560>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Sorting\cf3\strike0{\v Scribble570>main}\cf0 
\par \pard 
\par \b Tools\b0 
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-200\li200\tx200\cf2\strike Object Explorer\cf3\strike0{\v Scribble580>main}\cf0 
\par \cf2\strike{\pntext\f6\'B7\tab}Connection Manager\cf3\strike0{\v Scribble590>main}\cf1\f0 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble480}
{\up $}{\footnote {\up $} Primer Demo: Introduction}
{\up +}{\footnote {\up +} primerdemo:000020}
{\up K}{\footnote {\up K} Primer Demo,Introduction;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer\f5  Demo\f2 : Introduction\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\f2 
\par \b\f5\fs18 Contact book\b0 
\par InstantObjects Primer features a contact book in which contacts can be registered and maintained. The main screen of the contact book is available via the Contacts icon on the navigation bar to the left. The following topics in this section describe the business model and user interface of the contact book.
\par  
\par \b Query Tester\b0 
\par With the query tester available via the Query icon on the navigation bar, you can try out the query engine of InstantObjects. The query tester allows you to write and execute your own queries or choose from a list of example queries.
\par 
\par \b Performance Tester\b0 
\par InstantObjects can use various types of databases as the storage for your persistent objects. In fact, multiple database connections of different types can be used simultaneously by the same application. With the performance tester available via the Performance icon on the navigation bar, you can compare the performance of the database types of interest.
\par \f2 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble490}
{\up $}{\footnote {\up $} Primer Demo: The Business Model}
{\up +}{\footnote {\up +} primerdemo:000030}
{\up K}{\footnote {\up K} Primer Demo,Business Model;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: \f5 The Business Model\f2\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\b\fs20 
\par \pard\cf1\b0\f2\fs18 The contact book featured in this application is based on a simple business model of contact related information. The following UML class diagram shows how this information is organized.
\par \fs10 
\par \cf3\f5\fs20\{bmc model.gif\}
\par \cf1\f2\fs10 
\par \fs18 The business model was implemented entirely in the Delphi IDE using the integrated \cf2\strike InstantObjects Model Explorer\cf3\strike0\f5\fs20{\v Scribble90}\cf0 . 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble500}
{\up $}{\footnote {\up $} Primer Demo: The User Interface}
{\up +}{\footnote {\up +} primerdemo:000040}
{\up K}{\footnote {\up K} Primer Demo,User Interface;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: The User Interface\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 The user interface of the contact book relies on visual form inheritance. The following diagram shows the form class hierarchy. 
\par 
\par TBasicEditForm introduces basic editing capabilities for editing single objects. Descendant forms introduce capabilities required for editing objects of their corresponding business class. 
\par 
\par TBasicBrowseForm is used for browsing and editing multiple objects at once. Descendants hereof are customized for browsing objects of specific classes.
\par \fs10 
\par \cf3\fs20\{bmc ui.gif\}
\par \cf0 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble510}
{\up $}{\footnote {\up $} Primer Demo: Persisting Objects}
{\up +}{\footnote {\up +} primerdemo:000050}
{\up K}{\footnote {\up K} Primer Demo,Persisting Objects;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Persisting Objects\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 One of the main issues when building truly object oriented business applications is the ability to persist business objects. InstantObjects addresses this issue by supporting the most common relational databases as object storage. Relations between objects defined in the business model are handled seamlessly by InstantObjects when storing objects to or retrieving objects from the database.
\par 
\par In most cases, object persistence is handled automatically by the presentation components through which the objects are exposed in the user interface. See the Presentation section for more details about object presentation.
\par 
\par When objects are not accessed via the user interface, persistence is achieved by application code instead. 
\par 
\par Business classes inherit their persistent capabilities from \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1 . Like other classes in Delphi, instances of classes that descent from TInstantObject are created with the Create constructor of the class. Objects can be stored in the database by invoking the Store method. Existing objects can be retrieved from the database with the Retrieve constructor. When objects are no longer needed, they can be removed from the database by invoking the Dispose method.
\par 
\par Examples of persisting objects by code can be found in the unit DemoData.pas. This unit contains the code for random generation of contacts. Study the code to learn how easy it is to create persistent objects with InstantObjects.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble520}
{\up $}{\footnote {\up $} Primer Demo: Mapping Scheme}
{\up +}{\footnote {\up +} primerdemo:000060}
{\up K}{\footnote {\up K} Primer Demo,Mapping Scheme;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Mapping Scheme\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 One aspect to consider when creating the business model of your application is the  mapping scheme. The mapping scheme defines how the business objects are mapped to tables in the relational database.
\par 
\par By default, InstantObjects defines a mapping scheme that uses one table per class in the business model. This mapping scheme can be changed by changing the storage name of classes and attributes. InstantObjects allows you to combine the storage of several classes into one table by specifying the same storage name for the classes.
\par 
\par Custom mapping schemes can be used to optimize performance of particular classes or to support legacy databases.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble530}
{\up $}{\footnote {\up $} Primer Demo: Streaming}
{\up +}{\footnote {\up +} primerdemo:000070}
{\up K}{\footnote {\up K} Primer Demo,Streaming;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Streaming\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 All business objects created with InstantObjects can be written to and read from any standard VCL stream. The structure of the stream can be either binary or XML.
\par 
\par An example of streaming objects to an XML file is supplied by the Export to XML option on the toolbar of the Contacts view. This option can also be selected by right-clicking on a contact in the grid. When executed, the export function writes the currently selected contact to an XML file and launches your default XML viewer with the file. This would normally be your Internet browser.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble540}
{\up $}{\footnote {\up $} Primer Demo: Exposing Objects}
{\up +}{\footnote {\up +} primerdemo:000080}
{\up K}{\footnote {\up K} Primer Demo,Exposing Objects;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Exposing Objects\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 Making objects available in the user interface of an application through data-aware controls is known as  exposing objects. InstantObjects allows you to expose any object with published properties.
\par 
\par \cf2\strike TInstantExposer\cf3\strike0{\v Scribble320}\cf1  is the component to use when an object or part of an object that is already present in memory needs to be exposed. TInstantExposer is a TDataSet descendant, which means it can be attached to data-aware controls via a TDataSource. When an object is assigned to the Subject property of a TInstantExposer component, the object or the objects contained in the object are represented as rows in the dataset. The published properties of the exposed object(s) are represented as columns in the dataset.
\par 
\par The contact book demonstrates how exposers can be used to show and edit business objects in the user interface. TBasicEditForm is the base for all forms used by the application to edit objects. This form contains an exposer which is connected through a TDataSource to data-aware controls introduced in descending forms designed for editing objects of specific classes. When an object needs to be edited, it is passed to the exposer in a suitable edit form.
\par 
\par When exposing business objects, relations to other objects defined in the business model are recognized and handled automatically. One-to-many relations are represented as nested datasets within the exposer. In addition, exposers can be linked in a master-detail fashion allowing any related object to be exposed via the referring object. The exposers PhonesExposer on the form TContactEditForm and EmailsExposer on the form TPersonEditForm are examples of detail exposers that are linked to a master exposer.
\par \fs10 
\par \cf3\fs18\{bmc PersonEditForm.gif\}\cf1 
\par \fs10 
\par \fs18 If you study TBasicEditForm and the various descendants hereof you will notice that they contain no code for handling the editing of the object - this is done automatically by the exposer.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble550}
{\up $}{\footnote {\up $} Primer Demo: Selecting Objects}
{\up +}{\footnote {\up +} primerdemo:000090}
{\up K}{\footnote {\up K} Primer Demo,Selecting Objects;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Selecting Objects\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 In order to work with business objects they have to be retrieved into memory. Specific objects can be retrieved via the  Retrieve constructor of their class if their object Id is known. If this is not the case or if multiple objects need to be accessed at once, either for presentation or manipulation, they can be  selected from the database.
\par 
\par Objects are selected from the database via the \cf2\strike TInstantSelector\cf3\strike0{\v Scribble330}\cf1  component. This component is a special exposer that allows you to specify a command that defines the objects to be retrieved and optionally exposed. The syntax of the command is somewhat similar to SQL, but instead of tables and columns, you specify classes and attributes. When opened, TInstantSelector queries the database for the corresponding objects and exposes those as rows in the dataset. In addition, the selected objects are available via the Objects array property of the selector. See the section Exposing Objects for details about exposing.
\par 
\par In its simplest form, the selector command looks like this: 
\par 
\par SELECT * FROM TPerson
\par 
\par The above command will select all objects of the TPerson class. By adding a WHERE clause and an ORDER BY clause, the selection is limited to objects meeting a certain criteria and sorted as well:
\par \fs10 
\par \cf3\fs18\{bmc PrimerQuery.gif\}\cf1 
\par \fs10 
\par \fs18 Attributes are specified using regular dot-notation. This allows you to specify attributes of the selected object and objects related to this object. Please consult the InstantObjects Reference Guide for an in-depth explanation of the TInstantSelector Command property.
\par 
\par TInstantSelector is being used in the contact book in several areas. First of all, the main contact grid used for browsing contacts is connected via a TDataSource to a selector. The command of this selector is changed when clicking one of the index-tabs above the grid and when performing a search via the Find feature.
\par 
\par In TContactEditForm, The country and category fields of a contact are edited via a standard TDBLookupComboBox in which the drop down list is connected to a selector that is exposing the objects that can be associated with the field.
\par 
\par All forms used for browsing and looking up objects descent from TBasicBrowseForm. These forms all use a selector to select and expose the desired objects.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble560}
{\up $}{\footnote {\up $} Primer Demo: Filtering}
{\up +}{\footnote {\up +} primerdemo:000100}
{\up K}{\footnote {\up K} Primer Demo,Filtering;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Filtering\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 When exposing objects through an exposer or a selector, a filter can be used to hide unwanted objects. With selectors you can select objects from the database by specifying criteria to be met for the persistent attributes of the objects. Filters, on the other hand, allow you to determine which objects to include at business logic level. This means that objects can be shown or hidden depending on business rules defined by their class. Filters come in two f\lang1033\f5 l\lang1040\f2 avors:  dynamic and static.
\par 
\par Dynamic filters are applied to each object when navigating through the dataset. Since only the objects that are touched during navigation are examined by the filter, this is the fastest filtering method if exposing a large number of objects. Dynamic filters are implemented via the FilterRecord event.
\par 
\par Static filters can be used if you want to pre-filter the exposed objects before navigation. When applying a static filter, all objects will be examined by the filter at once. For selectors, this means that all selected objects will be retrieved from the database. Since all objects are pre-filtered, no filtering takes place during navigation. Use static filters when objects are already present in memory, when exposing a limited number of objects or when the number of objects passing the filter needs to be known during navigation. Static filters are implemented via the Limit event.
\par 
\par InstantObjects Primer \lang1033\f5 d\lang1040\f2 emonstrates both static and dynamic filtering via the Filter option available on the toolbar of the Contacts view.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble570}
{\up $}{\footnote {\up $} Primer Demo: Sorting}
{\up +}{\footnote {\up +} primerdemo:000110}
{\up K}{\footnote {\up K} Primer Demo,Sorting;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Sorting\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 Objects retrieved via a selector can be sorted by the underlying database by specifying one or more persistent attributes of the object or related objects with the ORDER BY clause. In addition, objects exposed through an exposer or a selector can be sorted in memory by adding a custom sort method to the OnCompare event.
\par 
\par InstantObjects Primer demonstrates both sort methods via the Sort option available on the toolbar of the Contacts view. A custom sort event is also used by the exposer EmployeeExposer in TCompanyEditForm to order the employees by their name.
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble580}
{\up $}{\footnote {\up $} Primer Demo: Object Explorer}
{\up +}{\footnote {\up +} primerdemo:000120}
{\up K}{\footnote {\up K} Primer Demo,Object Explorer;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Object Explorer\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf2\strike\f2\fs18 TInstantExplorer\cf3\strike0{\v Scribble6230>main}\cf1  is a visual component that display\lang1033 s\lang1040  an object and its related objects in a tree\lang1033  view\lang1040 . In its basic form, the component can be used to inspect and edit any object with published properties. The explorer can be customized for more application specific use by adding various event handlers.
\par \fs10 
\par \cf3\fs18\{bmc PrimerExplorer.gif\}
\par \cf1\fs10 
\par \fs18 InstantObjects Primer uses an instance of TInstantExplorer to explore the details of the currently selected contact in the contact grid. This explorer can be turned on and off via a button in the toolbar.
\par 
\par \pard\plain\f2

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble590}
{\up $}{\footnote {\up $} Primer Demo: Connection Manager}
{\up +}{\footnote {\up +} primerdemo:000130}
{\up K}{\footnote {\up K} Primer Demo,Connection Manager;}
}
\viewkind4\uc1\pard\keepn\b\f2\fs24 Primer Demo: Connection Manager\fs26 
\par \cf2\b0\strike\f5\fs16 Learning the Primer Demo\cf3\strike0{\v Scribble460>main}\cf0\fs20 
\par \pard\cf1\f2\fs18 If you want the end-user of your application to be able to manage connections to databases, the  \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1  component and the TInstantConnectionManagerForm will provide your application with the necessary tools. The component wraps a dialog in which the user can define and manage connections to various databases.
\par 
\par InstantObjects Primer uses an instance of TInstantConnectionManager to allow you to test the application with the database of your choice. Click the Connection Manager button on the main toolbar or press Shift+Ctrl+C to open the Connection Manager.
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantAccessError}
{\up +}{\footnote {\up +} classessymbol:000010}
{\up K}{\footnote {\up K} EInstantAccessError;}
{\up A}{\footnote {\up A} EInstantAccessError;EInstantAccessError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantAccessError \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\tx4315\cf2\ul Hierarchy\cf3\ulnone{\v Scribble1030}\cf1\tab\cf2\ul See Also\cf3\ulnone{\v Scribble1010}\cf1\tab\cf2\strike Example 1\cf3\strike0{\v Scribble1020>example}\cf1\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf1 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 The exception class for access errors.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 EInstantAccessError = \b class\b0 (\cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1 )
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 EInstantAccessError is raised when an illegal conversion is attempted. Most commonly EInstantAccessError is encountered when using the properties of a \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1  descendant to access the data the attribute represents as a non-compatible type.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1010}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \pard\li60\sb25\sa25\cf2\strike EInstantConversionError\cf3\strike0{\v Scribble1230>main}\cf1 
\par \pard\li95\sb25\sa25\cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1020}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} EInstantAccessError, Example 1}
{\up K}{\footnote {\up K} EInstantAccessError,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1 
\par \pard\keep\b\f7\fs18 function \b0 DateTimeToBoolean(DateTime: \cf2\strike TInstantDateTime\cf3\strike0{\v Scribble5670>main}\cf1 ): Boolean;
\par \b begin\b0 
\par   Result := DateTime.AsBoolean;
\par \b end\b0 ;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1030}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 Exception
\par \pard\li95\tx355\tab |
\par \cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1 
\par \tab |
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1040}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantAccessError Fields\cf1\b0\fs16  
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1050}
{\up $}{\footnote {\up $}  }
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantAccessError Properties \cf1\b0\fs16 
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1\tab\cf2\ul Legend\cf3\ulnone\{link\lang1033\f1 ID\lang1040\f0 =\lang1033\f1 1060\lang1040\f0\}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\cf3\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\}\cf1  \cf2\strike OriginalException\cf3\strike0{\v Scribble1450>main}\cf1 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1060}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf3\b0\fs18\{bmct bm1.BMP\}\cf1  read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1070}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantAccessError Events \cf1\b0\fs16 
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1080}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantAccessError Methods \cf1\b0\fs16 
\par \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1\tab\cf2\ul Legend\cf3\ulnone\{link\lang1033\f1 ID\lang1040\f0 =\lang1033\f1 1090\lang1040\f0\}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\cf3\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\}\cf1  \cf2\strike CreateRes\cf3\strike0{\v Scribble1460>main}\cf1 
\par \cf3\{bmct bm0.BMP\}\{bmct bm0.BMP\}\cf1  \cf2\strike CreateResFmt\cf3\strike0{\v Scribble1470>main}\cf1 
\par \cf3\{bmct bm0.BMP\}\{bmct bm2.BMP\}\cf1  \cf2\strike Destroy\cf3\strike0{\v Scribble1480>main}\cf1 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf3\b0\fs18\{bmct bm2.BMP\}\cf1  virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1100}
}
\viewkind4\uc1\pard\keepn\sb25\tx2840\lang1040\b\f0\fs24 EInstantAccessError Members \cf1\b0\fs16 
\par \pard\keepn\sb25\cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1110}\f2\cf1\f0 
\par \pard\sb25\tx355 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1110}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf3\b0\{bmct bm2.BMP\}\cf1  virtual
\par \cf3\{bmct bm1.BMP\}\cf1  read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1120}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantConflict}
{\up +}{\footnote {\up +} classessymbol:000020}
{\up K}{\footnote {\up K} EInstantConflict;}
{\up A}{\footnote {\up A} EInstantConflict;EInstantConflict_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantConflict\cf1\b0\fs16  
\par \pard\keepn\sb25\tx1440\tx2840\cf2\ul Hierarchy\cf3\ulnone{\v Scribble1140}\cf1\tab\cf2\strike Example 1\cf3\strike0{\v Scribble1130>example}\cf1\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf1 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 The exception class for conflict errors.
\par \pard\sb25\sa25\tx1435\tx2875\f7 EInstantConflict = \b class\b0 (\cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1 )
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 EInstantConflict is raised as a consequence of conflicting concurrent updates of an object. EInstantConflict occurs normally only in multi-user environments.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1130}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} EInstantConflict, Example 1}
{\up K}{\footnote {\up K} EInstantConflict,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike EInstantConflict\cf3\strike0{\v Scribble1020>main}\cf1 
\par \pard\fs18 
\par \pard\tx3240\ul\b User 1\tab User 2\f1                                              \f0 
\par \ulnone\b0 Retrieve Foo\tab Retrieve Foo
\par Modify Foo\tab 
\par Store Foo\tab Modify Foo
\par \f1\tab\f0 Store Foo <---- User 2 gets an EInstantConflict
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1140}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantConflict\strike0{\v Scribble1120>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1150}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConflict Fields \cf1\b0\fs16  
\par \strike EInstantConflict\strike0{\v Scribble1120>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1160}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConflict Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantConflict\strike0{\v Scribble1120>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1170}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1180}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantConflict Events \cf1\b0\fs16 
\par \strike EInstantConflict\strike0{\v Scribble1120>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1190}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConflict Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantConflict\strike0{\v Scribble1120>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1200}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1200}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1210}
}
\viewkind4\uc1\pard\keepn\sb25\tx2820\lang1040\b\f0\fs24 EInstantConflict Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantConflict\strike0{\v Scribble1120>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1220}\cf0\cf1 
\par \pard\sb25\tx355 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1220}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1230}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantConversionError}
{\up +}{\footnote {\up +} classessymbol:000030}
{\up K}{\footnote {\up K} EInstantConversionError;}
{\up A}{\footnote {\up A} EInstantConversionError;EInstantConversionError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantConversionError \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\tx4315\cf2\ul Hierarchy\cf3\ulnone{\v Scribble1260}\cf1\tab\cf2\ul See Also\cf3\ulnone{\v Scribble1240}\cf1\tab\cf2\strike Example 1\cf3\strike0{\v Scribble1250>example}\cf1\tab\cf2\strike Unit: InstantClasses\cf3\strike0{\v Scribble12820>main}\cf1 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 The exception class for conversion errors.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 EInstantConversionError = \b class\b0 (\cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1 )
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 EInstantConversionError is raised when a conversion is unsuccessful. Most commonly \cf2\strike EInstantAccessError\cf3\strike0{\v Scribble1000>main}\cf1  is encountered when using the properties of a \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1  descendant to access the data the attribute represents and the conversion of the data is .
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1240}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike EInstantAccessError\strike0{\v Scribble1000>main}
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1250}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} EInstantConversionError, Example 1}
{\up K}{\footnote {\up K} EInstantConversionError,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike EInstantConversionError\cf3\strike0{\v Scribble1230>main}\cf1
\par \pard\keep\f7\fs18 procedure StringToDateTime(const S: string; DateTime: \strike TInstantDateTime\strike0{\v Scribble5670>main});
\par begin
\par   DateTime.AsString := S;
\par end;
\par 
\par StringToDateTime('InstantObjects', SomeDateTime)
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1260}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantConversionError\strike0{\v Scribble1230>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1270}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConversionError Fields \cf1\b0\fs16  
\par \strike EInstantConversionError\strike0{\v Scribble1230>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1280}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConversionError Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantConversionError\strike0{\v Scribble1230>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1290}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1300}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantConversionError Events \cf1\b0\fs16 
\par \strike EInstantConversionError\strike0{\v Scribble1230>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1310}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantConversionError Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantConversionError\strike0{\v Scribble1230>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1320}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1320}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1330}
}
\viewkind4\uc1\pard\keepn\sb25\tx2840\lang1040\b\f0\fs24 EInstantConversionError Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx355\strike EInstantConversionError\strike0{\v Scribble1230>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1340}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1340}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantError}
{\up +}{\footnote {\up +} classessymbol:000040}
{\up K}{\footnote {\up K} EInstantError;}
{\up A}{\footnote {\up A} EInstantError;EInstantError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantError \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\cf2\ul Hierarchy\cf3\ulnone{\v Scribble1360}\cf1\tab\cf2\strike Members\cf3\strike0{\v Scribble1430>nav}\cf1\tab\cf2\strike Properties\cf3\strike0{\v Scribble1380>nav}\cf1\tab\cf2\strike Methods\cf3\strike0{\v Scribble1410>nav}\cf1\tab\cf2\strike Unit: InstantClasses\cf3\strike0{\v Scribble12820>main}\cf1
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 The common ancestor of exception classes.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 EInstantError = \b class\b0 (Exception)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 EInstantError implements the basic functionality of exception classes. This includes among others the ability to iterate backwards through the chain of causing exceptions.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1360}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1370}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantError Fields \cf1\b0\fs16  
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1380}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantError Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantError\strike0{\v Scribble1350>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1390}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1390}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1400}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantError Events \cf1\b0\fs16 
\par \strike EInstantError\strike0{\v Scribble1350>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1410}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantError Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantError\strike0{\v Scribble1350>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1420}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1420}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1430}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantError Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantError\strike0{\v Scribble1350>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1440}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantError.OriginalException}
{\up K}{\footnote {\up K} EInstantError,OriginalException;OriginalException;OriginalException,EInstantError;}
{\up A}{\footnote {\up A} EInstantError_OriginalException;OriginalException;OriginalException_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantError.OriginalException \cf1\b0\fs16 
\par \cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1
\par \pard\sb25\sa85\fs18 Contains the original exception causing the \strike EInstantError\strike0{\v Scribble1350>main} exception.
\par \pard\sb25\sa25\b\f7 property\b0  OriginalException: TObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If assigned, OriginalException contains a reference to the causing exception. This enables iteration backwards through a chain of \strike EInstantError\strike0{\v Scribble1350>main} instances to the origin of the error. OriginalException is declared as a TObject, which implies that it is not necessarily an \strike EInstantError\strike0{\v Scribble1350>main} descendant, but may be any exception type.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1460}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantError.CreateRes}
{\up K}{\footnote {\up K} CreateRes;CreateRes,EInstantError;EInstantError,CreateRes;}
{\up A}{\footnote {\up A} CreateRes;CreateRes_Method;EInstantError_CreateRes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantError.CreateRes \cf1\b0\fs16 
\par \cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1
\par \pard\sb25\sa85\fs18 Creates an exception instance with a message loaded from the applications resources.
\par \pard\sb25\sa25\b\f7 constructor\b0  CreateRes(ResStringRec: PResStringRec; E: TObject);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use CreateRes to create an exception instance with a message loaded from the applications resources. Using resourcestrings the address of the resourcestring is passed as the ResStringRec argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantError.CreateResFmt}
{\up K}{\footnote {\up K} CreateResFmt;CreateResFmt,EInstantError;EInstantError,CreateResFmt;}
{\up A}{\footnote {\up A} CreateResFmt;CreateResFmt_Method;EInstantError_CreateResFmt}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantError.CreateResFmt \cf1\b0\fs16 
\par \cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1
\par \pard\sb25\sa85\fs18 Creates an exception instance with a formatted message loaded from the applications resources.
\par \pard\sb25\sa25\b\f7 constructor\b0  CreateResFmt(ResStringRec: PResStringRec; \b const\b0  Args: \b array\b0  \b of\b0  \b const\b0 ; E: TObject);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use \strike CreateRes\strike0{\v Scribble1460>main} to create an exception instance with a formatted message loaded from the applications resources. Using resourcestrings, the address of the resourcestring is passed as the ResStringRec argument. The Args argument is a constant array containing values to be inserted into the formatted resourcestring.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantError.Destroy}
{\up K}{\footnote {\up K} Destroy;Destroy,EInstantError;EInstantError,Destroy;}
{\up A}{\footnote {\up A} Destroy;Destroy_Method;EInstantError_Destroy}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantError.Destroy \cf1\b0\fs16 
\par \cf2\strike EInstantError\cf3\strike0{\v Scribble1350>main}\cf1
\par \pard\sb25\sa85\fs18 Destroys the exception instance.
\par \pard\sb25\sa25\b\f7 destructor\b0  Destroy; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Destroys the exception instance and if assigned also the original exception causing the \strike EInstantError\strike0{\v Scribble1350>main} exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1490}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantKeyViolation}
{\up +}{\footnote {\up +} classessymbol:000050}
{\up K}{\footnote {\up K} EInstantKeyViolation;}
{\up A}{\footnote {\up A} EInstantKeyViolation;EInstantKeyViolation_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantKeyViolation \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\ul Hierarchy\ulnone{\v Scribble1510}\tab\ul See Also\ulnone{\v Scribble1500}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 The exception class for key violations.
\par \pard\sb25\sa25\tx1435\tx2875\f7 EInstantKeyViolation = \b class\b0 (\strike EInstantConflict\strike0{\v Scribble1120>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 EInstantKeyviolation is raised when a key violation is encountered. Nothing is implied regarding the cause of an EInstantKeyViolation, but most commonly it is a consequence of trying to store an object of a specific class with the same Id as an existing object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1500}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Store\strike0{\v Scribble9030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantConflict\strike0{\v Scribble1120>main}
\par \tab |
\par \strike EInstantKeyViolation\strike0{\v Scribble1490>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1520}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantKeyViolation Fields \cf1\b0\fs16  
\par \strike EInstantKeyViolation\strike0{\v Scribble1490>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1530}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantKeyViolation Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantKeyViolation\strike0{\v Scribble1490>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1540}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par \cf2\lang1033\ul\f1 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1540}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1550}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantKeyViolation Events \cf1\b0\fs16 
\par \strike EInstantKeyViolation\strike0{\v Scribble1490>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1560}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantKeyViolation Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantKeyViolation\strike0{\v Scribble1490>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1570}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1570}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1580}
}
\viewkind4\uc1\pard\keepn\sb25\tx2840\lang1040\b\f0\fs24 EInstantKeyViolation Members \cf1\b0\fs16 
\par \strike EInstantKeyViolation\strike0{\v Scribble1490>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1590}\cf0\cf1 
\par \pard\sb25\tx355 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1590}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantRangeError}
{\up +}{\footnote {\up +} classessymbol:000060}
{\up K}{\footnote {\up K} EInstantRangeError;}
{\up A}{\footnote {\up A} EInstantRangeError;EInstantRangeError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantRangeError \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble1610}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\fs18 The exception class for too large or too small integer values.
\par \pard\sb25\sa25\tx1435\f7 EInstantRangeError = \b class\b0 (\strike EInstantError\strike0{\v Scribble1350>main})
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 EInstantRangeError is raised when an integer value exceeds the range it is assigned to. Most commonly EInstantErrors are encountered when iterating beyond the bounds of an array.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantRangeError\strike0{\v Scribble1600>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1620}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantRangeError Fields \cf1\b0\fs16  
\par \strike EInstantRangeError\strike0{\v Scribble1600>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1630}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantRangeError Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantRangeError\strike0{\v Scribble1600>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1640}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1640}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1650}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantRangeError Events \cf1\b0\fs16 
\par \strike EInstantRangeError\strike0{\v Scribble1600>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1660}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantRangeError Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike EInstantRangeError\strike0{\v Scribble1600>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1670}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1680}
}
\viewkind4\uc1\pard\keepn\sb25\tx2840\lang1040\b\f0\fs24 EInstantRangeError Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx355\strike EInstantRangeError\strike0{\v Scribble1600>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1690}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1690}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantStreamError}
{\up +}{\footnote {\up +} classessymbol:000070}
{\up K}{\footnote {\up K} EInstantStreamError;}
{\up A}{\footnote {\up A} EInstantStreamError;EInstantStreamError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantStreamError \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble1710}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\fs18 The exception class for streaming errors.
\par \pard\sb25\sa25\tx1435\f7 EInstantStreamError = \b class\b0 (\strike EInstantError\strike0{\v Scribble1350>main})
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 EInstantStreamError is raised when a streaming error is encountered. An EInstantStream error indicates that the stream doesn't match the semantics of the streaming mechanism.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantStreamError\strike0{\v Scribble1700>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1720}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantStreamError Fields \cf1\b0\fs16 
\par \strike EInstantStreamError\strike0{\v Scribble1700>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1730}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantStreamError Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantStreamError\strike0{\v Scribble1700>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1740}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1740}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1750}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 EInstantStreamError Events \cf1\b0\fs16 
\par \strike EInstantStreamError\strike0{\v Scribble1700>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1760}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantStreamError Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantStreamError\strike0{\v Scribble1700>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1770}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1770}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1780}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantStreamError Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantStreamError\strike0{\v Scribble1700>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1790}\cf0\cf1 
\par \pard\sb25\tx355 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1790}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1800}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} EInstantValidationError}
{\up +}{\footnote {\up +} classessymbol:000080}
{\up K}{\footnote {\up K} EInstantValidationError;}
{\up A}{\footnote {\up A} EInstantValidationError;EInstantValidationError_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 EInstantValidationError \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\ul Hierarchy\ulnone{\v Scribble1820}\tab\ul See Also\ulnone{\v Scribble1810}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 The exception class for validation errors.
\par \pard\sb25\sa25\tx1435\tx2875\f7 EInstantValidationError = \b class\b0 (\strike EInstantError\strike0{\v Scribble1350>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 EInstantValidationError is raised when an invalid value is encountered. Most commonly it is a consequence of setting the data of a \strike TInstantAttribute\strike0{\v Scribble2170>main} descendant to a non-valid value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1810}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1820}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 Exception
\par \pard\li95\tx355\tab |
\par \strike EInstantError\strike0{\v Scribble1350>main}
\par \tab |
\par \strike EInstantValidationError\strike0{\v Scribble1800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1830}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantValidationError Fields \cf1\b0\fs16 
\par \strike EInstantValidationError\strike0{\v Scribble1800>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1840}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantValidationError Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike EInstantValidationError\strike0{\v Scribble1800>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1850}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OriginalException\strike0{\v Scribble1450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1850}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1860}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantValidationError Methods \cf1\b0\fs16 
\par \strike EInstantValidationError\strike0{\v Scribble1800>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1870}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 EInstantError
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateRes\strike0{\v Scribble1460>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateResFmt\strike0{\v Scribble1470>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Destroy\strike0{\v Scribble1480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 EInstantValidationError Members \cf1\b0\fs16 
\par \strike EInstantValidationError\strike0{\v Scribble1800>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1890}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1890}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm2.BMP\} virtual
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1900}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOConnector}
{\up +}{\footnote {\up +} classessymbol:000090}
{\up K}{\footnote {\up K} TInstantADOConnector;}
{\up A}{\footnote {\up A} TInstantADOConnector;TInstantADOConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOConnector \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble1910}\tab\strike Members\strike0{\v Scribble1980>nav}\tab\strike Properties\strike0{\v Scribble1930>nav}\tab\strike Methods\strike0{\v Scribble1970>nav}\tab\strike Unit: InstantADO\strike0{\v Scribble12710>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting to and disconnecting from a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1910}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}
\par \tab |
\par \strike TInstantADOConnector\strike0{\v Scribble1900>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1920}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADOConnector Fields \cf1\b0\fs16 
\par \strike TInstantADOConnector\strike0{\v Scribble1900>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1930}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADOConnector Properties \cf1\b0\fs16 
\par \strike TInstantADOConnector\strike0{\v Scribble1900>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1940}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantADOConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CanTransaction\strike0{\v Scribble2000>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ProviderType\strike0{\v Scribble2020>main}
\par \pard\sb55\sa55\tx355\b TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1940}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1950}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADOConnector Events \cf1\b0\fs16 
\par \strike TInstantADOConnector\strike0{\v Scribble1900>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1960}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1960}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1970}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantADOConnector Methods \cf1\b0\fs16 
\par \cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1
\par \pard\sb55\sa55\b\fs18 TInstantADOConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CompactDatabase\strike0{\v Scribble2030>main}
\par \pard\sb55\sa55\b TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1980}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADOConnector Members \cf1\b0\fs16 
\par \strike TInstantADOConnector\strike0{\v Scribble1900>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble1990}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CanTransaction\strike0{\v Scribble2000>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ProviderType\strike0{\v Scribble2020>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CompactDatabase\strike0{\v Scribble2030>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble1990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOConnector.CanTransaction}
{\up K}{\footnote {\up K} CanTransaction;CanTransaction,TInstantADOConnector;TInstantADOConnector,CanTransaction;}
{\up A}{\footnote {\up A} CanTransaction;CanTransaction_Property;TInstantADOConnector_CanTransaction}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOConnector.CanTransaction \cf1\b0\fs16 
\par \cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1
\par \pard\sb25\sa85\fs18 Determines if the associated database engine supports transactions.
\par \pard\sb25\sa25\b\f7 property\b0  CanTransaction: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use CanTransaction to determine if the database engine to which the connector is associated through its connection property supports transactions.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2010}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOConnector.Connection}
{\up K}{\footnote {\up K} Connection;Connection,TInstantADOConnector;TInstantADOConnector,Connection;}
{\up A}{\footnote {\up A} Connection;Connection_Property;TInstantADOConnector_Connection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOConnector.Connection \cf1\b0\fs16 
\par \cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1
\par \pard\sb25\sa85\fs18 Specifies the connection used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connection: TADOConnection;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Connection property to specify the connection used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2020}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOConnector.ProviderType}
{\up K}{\footnote {\up K} ProviderType;ProviderType,TInstantADOConnector;TInstantADOConnector,ProviderType;}
{\up A}{\footnote {\up A} ProviderType;ProviderType_Property;TInstantADOConnector_ProviderType}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOConnector.ProviderType \cf1\b0\fs16 
\par \cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1
\par \pard\sb25\sa85\fs18 Specifies the provider type
\par \pard\sb25\sa25\b\f7 property\b0  ProviderType: \strike TInstantADOProviderType\strike0{\v Scribble12110>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ProviderType specifies the type of the OLE DB Provider. Specifies the type of ADO connection, which the connector uses to establish its connection to the underlying database
\par Summary The type of the provider
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOConnector.CompactDatabase}
{\up K}{\footnote {\up K} CompactDatabase;CompactDatabase,TInstantADOConnector;TInstantADOConnector,CompactDatabase;}
{\up A}{\footnote {\up A} CompactDatabase;CompactDatabase_Method;TInstantADOConnector_CompactDatabase}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOConnector.CompactDatabase \cf1\b0\fs16 
\par \cf2\strike TInstantADOConnector\cf3\strike0{\v Scribble1900>main}\cf1
\par \pard\sb25\sa85\fs18 Compacts a database.
\par \pard\sb25\sa25\b\f7 procedure\b0  CompactDatabase;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 As you change data in a database, the database file can become fragmented and use more disk space than is necessary. Periodically, you can use the CompactDatabase method to defragment the database file. The compacted database is usually smaller and often runs faster. The function is only effective for the Microsoft Jet OLEDB Provider.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2040}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADSConnector}
{\up +}{\footnote {\up +} classessymbol:000100}
{\up K}{\footnote {\up K} TInstantADSConnector;}
{\up A}{\footnote {\up A} TInstantADSConnector;TInstantADSConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADSConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble2050}\tab\strike Members\strike0{\v Scribble2120>nav}\tab\strike Properties\strike0{\v Scribble2070>nav}\tab\strike Methods\strike0{\v Scribble2110>nav}\tab\strike Unit: InstantADS\strike0{\v Scribble12740>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2050}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantADSConnector\strike0{\v Scribble2040>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2060}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADSConnector Fields \cf1\b0\fs16  
\par \strike TInstantADSConnector\strike0{\v Scribble2040>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2070}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADSConnector Properties \cf1\b0\fs16 
\par \strike TInstantADSConnector\strike0{\v Scribble2040>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2080}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantADSConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2140>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2080}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2090}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantADSConnector Events \cf1\b0\fs16 
\par \strike TInstantADSConnector\strike0{\v Scribble2040>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2100}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2100}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2110}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantADSConnector Methods \cf1\b0\fs16 
\par \cf2\strike TInstantADSConnector\cf3\strike0{\v Scribble2040>main}\cf1
\par \pard\sb55\sa55\b\fs18 TInstantADSConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AllowTransactions\strike0{\v Scribble2150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble2160>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2120}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADSConnector Members \cf1\b0\fs16 
\par \strike TInstantADSConnector\strike0{\v Scribble2040>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2130}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2140>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AllowTransactions\strike0{\v Scribble2150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble2160>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2130}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2140}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADSConnector.Connection}
{\up K}{\footnote {\up K} Connection;Connection,TInstantADSConnector;TInstantADSConnector,Connection;}
{\up A}{\footnote {\up A} Connection;Connection_Property;TInstantADSConnector_Connection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADSConnector.Connection \cf1\b0\fs16 
\par \cf2\strike TInstantADSConnector\cf3\strike0{\v Scribble2040>main}\cf1
\par \pard\sb25\sa85\fs18 Specifies the connection used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connection: TADSConnection;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Connection property to specify the connection used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADSConnector.AllowTransactions}
{\up K}{\footnote {\up K} AllowTransactions;AllowTransactions,TInstantADSConnector;TInstantADSConnector,AllowTransactions;}
{\up A}{\footnote {\up A} AllowTransactions;AllowTransactions_Method;TInstantADSConnector_AllowTransactions}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADSConnector.AllowTransactions \cf1\b0\fs16 
\par \cf2\strike TInstantADSConnector\cf3\strike0{\v Scribble2040>main}\cf1
\par \pard\sb25\sa85\fs18 Determines if transactions are allowed.
\par \pard\sb25\sa25\b\f7 function\b0  AllowTransactions: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use AllowTransactions to determine if the currently logged in user on the Advantage Database Server is allowed to use transactions.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADSConnector.HasConnection}
{\up K}{\footnote {\up K} HasConnection;HasConnection,TInstantADSConnector;TInstantADSConnector,HasConnection;}
{\up A}{\footnote {\up A} HasConnection;HasConnection_Method;TInstantADSConnector_HasConnection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADSConnector.HasConnection \cf1\b0\fs16 
\par \cf2\strike TInstantADSConnector\cf3\strike0{\v Scribble2040>main}\cf1
\par \pard\sb25\sa85\fs18 Determines if a connection is associated with the connector.
\par \pard\sb25\sa25\b\f7 function\b0  HasConnection: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasConnection to determine if the \strike Connection\strike0{\v Scribble2140>main} property of the connector is assigned. If a connection component has been associated with the connector, HasConnection returns True. Otherwise HasConnection returns False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2170}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute}
{\up +}{\footnote {\up +} classessymbol:000110}
{\up K}{\footnote {\up K} TInstantAttribute;PInstantAttribute;}
{\up A}{\footnote {\up A} TInstantAttribute;TInstantAttribute_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5680\ul Hierarchy\ulnone{\v Scribble2180}\tab\strike Members\strike0{\v Scribble2250>nav}\tab\strike Properties\strike0{\v Scribble2200>nav}\tab\strike Methods\strike0{\v Scribble2230>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 The common ancestor of all the attribute classes.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantAttribute = \b class\b0 (\strike TInstantStreamable\strike0{\v Scribble10830>main})
\par PInstantAttribute = ^TInstantAttribute;
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantAttribute is the ancestor of all attribute classes. It introduces common properties and methods that mainly fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Convert the value of the attribute to another data type.
\par \{bmct bm3.BMP\}\tab Validate the value of the attribute.
\par \{bmct bm3.BMP\}\tab Define how the value of the attribute is displayed or edited.
\par \pard\sb25\sa25\tx495 Although no presumptions are made about the use of TInstantAttribute descendants, their main purpose is to serve as logical place holders for attributes of classes descending from \strike TInstantObject\strike0{\v Scribble7390>main}. Attributes may have metadata. The metadata contains the definition of the attribute such as the attributes name, data type, and size. Furthermore the metadata may specify features of the attribute such as masks and default value. If the attribute is owned by an instance of a \strike TInstantObject\strike0{\v Scribble7390>main} descendant, it has been created on the basis of attribute metadata specified as part of the class of the owning instance. TInstantAttribute descendants allocate memory to hold the value of the attribute they represent.
\par 
\par TInstantAttribute is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes: 
\par \pard 
\par \pard\tx4800\b Simple attribute classes\lang1033\f1\tab Relational\lang1040\f0  attribute classes
\par \b0\strike TInstantInteger\strike0{\v Scribble7070>main}\lang1033\f1\tab\lang1040\strike\f0 TInstantPart\strike0{\v Scribble9250>main}\b 
\par \b0\strike TInstantFloat\strike0{\v Scribble6840>main}\lang1033\f1\tab\lang1040\strike\f0 TInstantReference\strike0{\v Scribble9520>main}
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}\lang1033\f1\tab\lang1040\strike\f0 TInstantParts\strike0{\v Scribble9390>main}\b 
\par \b0\strike TInstantBoolean\strike0{\v Scribble2860>main}\lang1033\f1\tab\lang1040\strike\f0 TInstantReferences\strike0{\v Scribble9780>main}\b 
\par \b0\strike TInstantString\strike0{\v Scribble11000>main}\lang1033\f1\tab\lang1040\b\f0 
\par \b0\strike TInstantDateTime\strike0{\v Scribble5670>main}
\par \strike TInstantBlob\strike0{\v Scribble2680>main}
\par \strike TInstantMemo\strike0{\v Scribble7190>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2180}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2190}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantAttribute Fields \cf1\b0\fs16 
\par \strike TInstantAttribute\strike0{\v Scribble2170>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2200}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantAttribute Properties \cf1\b0\fs16 
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2210}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2210}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2220}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantAttribute Events \cf1\b0\fs16 
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2230}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantAttribute Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2240}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2240}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2250}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantAttribute Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2260}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2260}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2270}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsBoolean}
{\up K}{\footnote {\up K} AsBoolean;AsBoolean,TInstantAttribute;TInstantAttribute,AsBoolean;}
{\up A}{\footnote {\up A} AsBoolean;AsBoolean_Property;TInstantAttribute_AsBoolean}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsBoolean \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a Boolean.
\par \pard\sb25\sa25\b\f7 property\b0  AsBoolean: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsBoolean provides the ability to specify the value of the attribute as a Boolean. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsBoolean and SetAsBoolean methods to perform the actual conversion. If a Boolean is incompatible with the data type of the attribute, AsBoolean raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2280}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsCurrency}
{\up K}{\footnote {\up K} AsCurrency;AsCurrency,TInstantAttribute;TInstantAttribute,AsCurrency;}
{\up A}{\footnote {\up A} AsCurrency;AsCurrency_Property;TInstantAttribute_AsCurrency}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsCurrency \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a Currency.
\par \pard\sb25\sa25\b\f7 property\b0  AsCurrency: Currency;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsCurrency provides the ability to specify the value of the attribute as a Currency. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsCurrency and SetAsCurrency methods to perform the actual conversion. If a Currency is incompatible with the data type of the attribute, AsCurrency raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2290}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsDateTime}
{\up K}{\footnote {\up K} AsDateTime;AsDateTime,TInstantAttribute;TInstantAttribute,AsDateTime;}
{\up A}{\footnote {\up A} AsDateTime;AsDateTime_Property;TInstantAttribute_AsDateTime}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsDateTime \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a TDateTime.
\par \pard\sb25\sa25\b\f7 property\b0  AsDateTime: TDateTime;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsDateTime provides the ability to specify the value of the attribute as a TDateTime. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsDateTime and SetAsDateTime methods to perform the actual conversion. If a TDateTime is incompatible with the data type of the attribute, AsDateTime raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsFloat}
{\up K}{\footnote {\up K} AsFloat;AsFloat,TInstantAttribute;TInstantAttribute,AsFloat;}
{\up A}{\footnote {\up A} AsFloat;AsFloat_Property;TInstantAttribute_AsFloat}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsFloat \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a Double.
\par \pard\sb25\sa25\b\f7 property\b0  AsFloat: Double;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsFloat provides the ability to specify the value of the attribute as a Double. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsFloat and SetAsFloat methods to perform the actual conversion. If a Double is incompatible with the data type of the attribute, AsFloat raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsInteger}
{\up K}{\footnote {\up K} AsInteger;AsInteger,TInstantAttribute;TInstantAttribute,AsInteger;}
{\up A}{\footnote {\up A} AsInteger;AsInteger_Property;TInstantAttribute_AsInteger}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsInteger \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as an Integer.
\par \pard\sb25\sa25\b\f7 property\b0  AsInteger: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsInteger provides the ability to specify the value of the attribute as an Integer. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsInteger and SetAsInteger methods to perform the actual conversion. If an Integer is incompatible with the data type of the attribute, AsInteger raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsObject}
{\up K}{\footnote {\up K} AsObject;AsObject,TInstantAttribute;TInstantAttribute,AsObject;}
{\up A}{\footnote {\up A} AsObject;AsObject_Property;TInstantAttribute_AsObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsObject \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\sb25\sa25\b\f7 property\b0  AsObject: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsObject provides the ability to specify the value of the attribute as a \strike TInstantObject\strike0{\v Scribble7390>main}. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsObject and SetAsObject methods to perform the actual conversion. If a \strike TInstantObject\strike0{\v Scribble7390>main} is incompatible with the data type of the attribute, AsObject raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsString}
{\up K}{\footnote {\up K} AsString;AsString,TInstantAttribute;TInstantAttribute,AsString;}
{\up A}{\footnote {\up A} AsString;AsString_Property;TInstantAttribute_AsString}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsString \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a string.
\par \pard\sb25\sa25\b\f7 property\b0  AsString: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsString provides the ability to specify the value of the attribute as a string. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsString and SetAsString methods to perform the actual conversion. If a string is incompatible with the data type of the attribute, AsString raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AsVariant}
{\up K}{\footnote {\up K} AsVariant;AsVariant,TInstantAttribute;TInstantAttribute,AsVariant;}
{\up A}{\footnote {\up A} AsVariant;AsVariant_Property;TInstantAttribute_AsVariant}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AsVariant \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as a Variant.
\par \pard\sb25\sa25\b\f7 property\b0  AsVariant: Variant;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 AsVariant provides the ability to specify the value of the attribute as a Variant. \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants override the GetAsVariant and SetAsVariant methods to perform the actual conversion. If a Variant is incompatible with the data type of the attribute, AsVariant raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.DisplayText}
{\up K}{\footnote {\up K} DisplayText;DisplayText,TInstantAttribute;TInstantAttribute,DisplayText;}
{\up A}{\footnote {\up A} DisplayText;DisplayText_Property;TInstantAttribute_DisplayText}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.DisplayText \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the attribute as it will be displayed in a data-aware control.
\par \pard\sb25\sa25\b\f7 property\b0  DisplayText: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 DisplayText is a read-only string representation of the value of the attribute as it will be displayed in a data-aware control.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.IsChanged}
{\up K}{\footnote {\up K} IsChanged;IsChanged,TInstantAttribute;TInstantAttribute,IsChanged;}
{\up A}{\footnote {\up A} IsChanged;IsChanged_Property;TInstantAttribute_IsChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.IsChanged \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\ul See Also\ulnone{\v Scribble2370} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies is the attribute is changed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsChanged: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 IsChanged specifies if the value of the attribute is changed. If the attribute is owned and the owner has not disabled changes, setting the value of IsChanged to True will generate a change notification to the owner.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2370}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute.Changed\strike0{\v Scribble2500>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.IsDefault}
{\up K}{\footnote {\up K} IsDefault;IsDefault,TInstantAttribute;TInstantAttribute,IsDefault;}
{\up A}{\footnote {\up A} IsDefault;IsDefault_Property;TInstantAttribute_IsDefault}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.IsDefault \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if the value of the attribute is default.
\par \pard\sb25\sa25\b\f7 property\b0  IsDefault: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 IsDefault determines if the actual value of the attribute corresponds to the default value of the attribute. The attribute is considered to be default if its value corresponds to its initialization value. If the attribute has metadata the comparison is made between the default value specified by the metadata object and the actual value of the attribute. Otherwise the comparison is made between the attributes interpretation of a Null value and the actual value of the attribute. The comparison is not performed by \strike TInstantAttribute\strike0{\v Scribble2170>main}, but by descendant classes, overriding the GetIsDefault method.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.IsIndexed}
{\up K}{\footnote {\up K} IsIndexed;IsIndexed,TInstantAttribute;TInstantAttribute,IsIndexed;}
{\up A}{\footnote {\up A} IsIndexed;IsIndexed_Property;TInstantAttribute_IsIndexed}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.IsIndexed \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\ul See Also\ulnone{\v Scribble2400} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the attribute is indexed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsIndexed: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The IsIndexed property specifies if the attribute is indexed. The declaration of an indexed attribute is done via the attributes metadata. If the attrribute is indexed, an index is generated for the underlying field in the database when the database is created.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2400}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute.IsRequired\strike0{\v Scribble2430>main}
\par \strike TInstantAttribute.IsMandatory\strike0{\v Scribble2410>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.IsMandatory}
{\up K}{\footnote {\up K} IsMandatory;IsMandatory,TInstantAttribute;TInstantAttribute,IsMandatory;}
{\up A}{\footnote {\up A} IsMandatory;IsMandatory_Property;TInstantAttribute_IsMandatory}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.IsMandatory \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\ul See Also\ulnone{\v Scribble2420}
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the attribute is mandatory.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsMandatory: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The IsMandatory property specifies if storing or streaming of the attribute is mandatory. The value of IsMandatory will be True if either the attribute is indexed or required. If the attribute is not mandatory, storing and streaming will be omitted if the value of the attribute is the default value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2420}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute.IsIndexed\strike0{\v Scribble2390>main}
\par \strike TInstantAttribute.IsRequired\strike0{\v Scribble2430>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.IsRequired}
{\up K}{\footnote {\up K} IsRequired;IsRequired,TInstantAttribute;TInstantAttribute,IsRequired;}
{\up A}{\footnote {\up A} IsRequired;IsRequired_Property;TInstantAttribute_IsRequired}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.IsRequired \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantAttribute\strike0{\v Scribble2170>main}\tab\ul See Also\ulnone{\v Scribble2440}
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the attribute is required.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsRequired: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The IsRequired property specifies if storing or streaming of the attribute is required under all circumstances. The declaration of an required attribute is done via the attributes metadata.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute.IsIndexed\strike0{\v Scribble2390>main}
\par \strike TInstantAttribute.IsMandatory\strike0{\v Scribble2410>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Metadata}
{\up K}{\footnote {\up K} Metadata;Metadata,TInstantAttribute;TInstantAttribute,Metadata;}
{\up A}{\footnote {\up A} Metadata;Metadata_Property;TInstantAttribute_Metadata}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Metadata \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the metadata object associated with the attribute
\par \pard\sb25\sa25\b\f7 property\b0  Metadata: TInstantAttributeMetadata;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Metadata specifies the metadata object associated with the attribute. If the attribute has no metadata, Metadata returns nil. Caution should be given when setting the metadata object of an attribute since no validation is performed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2460}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Name}
{\up K}{\footnote {\up K} Name;Name,TInstantAttribute;TInstantAttribute,Name;}
{\up A}{\footnote {\up A} Name;Name_Property;TInstantAttribute_Name}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Name \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the name of the attribute.
\par \pard\sb25\sa25\b\f7 property\b0  \b Name\b0 : \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Name property to determine the name of the attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Owner}
{\up K}{\footnote {\up K} Owner;Owner,TInstantAttribute;TInstantAttribute,Owner;}
{\up A}{\footnote {\up A} Owner;Owner_Property;TInstantAttribute_Owner}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Owner \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 States the owner of the attribute.
\par \pard\sb25\sa25\b\f7 property\b0  Owner: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Owner states the owner of the attribute. If the attribute is not owned, Owner returns nil.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Value}
{\up K}{\footnote {\up K} TInstantAttribute,Value;Value;Value,TInstantAttribute;}
{\up A}{\footnote {\up A} TInstantAttribute_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Value \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of an attribute as a Variant.
\par \pard\sb25\sa25\b\f7 property\b0  Value: Variant;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the attribute as a Variant.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2490}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.AttributeType}
{\up K}{\footnote {\up K} AttributeType;AttributeType,TInstantAttribute;TInstantAttribute,AttributeType;}
{\up A}{\footnote {\up A} AttributeType;AttributeType_Method;TInstantAttribute_AttributeType}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.AttributeType \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 States the data type of the attribute
\par \pard\sb25\sa25\b\f7 class\b0  \b function\b0  AttributeType: \strike TInstantAttributeType\strike0{\v Scribble12130>main}; \b virtual\b0 ; \b abstract\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use AttributeType to determine the data type of the attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Changed}
{\up K}{\footnote {\up K} Changed;Changed,TInstantAttribute;TInstantAttribute,Changed;}
{\up A}{\footnote {\up A} Changed;Changed_Method;TInstantAttribute_Changed}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Changed \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1\tab\ul See Also\ulnone{\v Scribble2510} 
\par \pard\sb25\sa85\tx1435\fs18 Marks the attribute as changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Changed;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Changed marks the attribute as changed by setting its \strike IsChanged\strike0{\v Scribble2360>main} property to True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute.IsChanged\strike0{\v Scribble2360>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantAttribute;TInstantAttribute,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantAttribute_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Create \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Constructor that creates and initializes an attribute object.
\par \pard\sb25\sa25\b\f7 constructor\b0  Create(AOwner: \strike TInstantObject\strike0{\v Scribble7390>main}; AMetadata: TInstantAttributeMetadata); \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The Create constructor creates and initializes an attribute object. If the attribute must refer to an owning object, this object can be specified as the AOwner argument. If the attribute should have metadata, a metadata object can be specified as the AMetadata argument. \strike TInstantAttribute\strike0{\v Scribble2170>main} is abstract; so do not create instances of this class. Instead refer to concrete descendant classes.
\par \pard\fi-195\li195\sb25\sa25\b Note: \b0  The attribute is only destroyed by the owner if the class of the owner has metadata defined for the attribute. Otherwise the attribute should be destroyed manually.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2530}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Initialize}
{\up K}{\footnote {\up K} Initialize;Initialize,TInstantAttribute;TInstantAttribute,Initialize;}
{\up A}{\footnote {\up A} Initialize;Initialize_Method;TInstantAttribute_Initialize}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Initialize \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Initializes the value of the attribute.
\par \pard\sb25\sa25\b\f7 procedure\b0  Initialize; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Initialize to initialize the value of the attribute. If the attribute has metadata, the value of the attribute is set to the default value specified by the metadata object. Otherwise the value is reset to the attributes interpretation of a Null value. Descendants of \strike TInstantAttribute\strike0{\v Scribble2170>main} that override the \strike Reset\strike0{\v Scribble2540>main} method perform the actual initialization.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Reset}
{\up K}{\footnote {\up K} Reset;Reset,TInstantAttribute;TInstantAttribute,Reset;}
{\up A}{\footnote {\up A} Reset;Reset_Method;TInstantAttribute_Reset}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Reset \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Resets the actual value of the attribute to the initialization value.
\par \pard\sb25\sa25\b\f7 procedure\b0  Reset; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Reset to reset the value of the attribute to its initialization value. Reset calls \strike Initialize\strike0{\v Scribble2530>main} to do the initialization.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2550}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttribute.Unchanged}
{\up K}{\footnote {\up K} TInstantAttribute,Unchanged;Unchanged;Unchanged,TInstantAttribute;}
{\up A}{\footnote {\up A} TInstantAttribute_Unchanged;Unchanged;Unchanged_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttribute.Unchanged \cf1\b0\fs16 
\par \cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf1 
\par \pard\sb25\sa85\fs18 Marks the attribute as unchanged.
\par \pard\sb25\sa25\b\f7 procedure\b0  Unchanged; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Unchanged marks the attribute as unchanged by setting its \strike IsChanged\strike0{\v Scribble2360>main} property to False. It should normally not be necessary to call Unchanged directly since it is called automatically if an attribute is no longer changed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2560}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBDEConnector}
{\up +}{\footnote {\up +} classessymbol:000120}
{\up K}{\footnote {\up K} TInstantBDEConnector;}
{\up A}{\footnote {\up A} TInstantBDEConnector;TInstantBDEConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBDEConnector \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble2570}\tab\strike Members\strike0{\v Scribble2640>nav}\tab\strike Properties\strike0{\v Scribble2590>nav}\tab\strike Unit: InstantBDE\strike0{\v Scribble12760>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\sb25\sa25\tx300\lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Transaction control
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Information about the database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2570}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}
\par \tab |
\par \strike TInstantBDEConnector\strike0{\v Scribble2560>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2580}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBDEConnector Fields \cf1\b0\fs16  
\par \strike TInstantBDEConnector\strike0{\v Scribble2560>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2590}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBDEConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBDEConnector\strike0{\v Scribble2560>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2600}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBDEConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2660>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DriverType\strike0{\v Scribble2670>main}
\par \pard\sb55\sa55\tx355\b TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2600}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2610}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBDEConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantBDEConnector\strike0{\v Scribble2560>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2620}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2620}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2630}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantBDEConnector Methods \cf1\b0\fs16 
\par \strike TInstantBDEConnector\strike0\{link\lang1033\f1 ID\lang1040\f0 =\lang1033\f1 2560\lang1040\f0 >main\} 
\par \pard\sb55\sa55\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2640}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBDEConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBDEConnector\strike0{\v Scribble2560>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2650}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble2660>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DriverType\strike0{\v Scribble2670>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2650}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBDEConnector.Connection}
{\up K}{\footnote {\up K} Connection;Connection,TInstantBDEConnector;TInstantBDEConnector,Connection;}
{\up A}{\footnote {\up A} Connection;Connection_Property;TInstantBDEConnector_Connection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBDEConnector.Connection \cf1\b0\fs16 
\par \cf2\strike TInstantBDEConnector\cf3\strike0{\v Scribble2560>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the connection used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connection: TDatabase;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Connection property to specify the connection used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2670}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBDEConnector.DriverType}
{\up K}{\footnote {\up K} DriverType;DriverType,TInstantBDEConnector;TInstantBDEConnector,DriverType;}
{\up A}{\footnote {\up A} DriverType;DriverType_Property;TInstantBDEConnector_DriverType}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBDEConnector.DriverType \cf1\b0\fs16 
\par \cf2\strike TInstantBDEConnector\cf3\strike0{\v Scribble2560>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the BDE driver type
\par \pard\sb25\sa25\b\f7 property\b0  DriverType: \strike TInstantBDEDriverType\strike0{\v Scribble12140>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 DriverType specifies the type of the BDE driver.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob}
{\up +}{\footnote {\up +} classessymbol:000130}
{\up K}{\footnote {\up K} TInstantBlob;}
{\up A}{\footnote {\up A} TInstantBlob;TInstantBlob_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\ul Hierarchy\ulnone{\v Scribble2700}\tab\strike Members\strike0{\v Scribble2770>nav}\tab\strike Properties\strike0{\v Scribble2720>nav}\tab\strike Methods\strike0{\v Scribble2750>nav}\tab\ul See Also\ulnone{\v Scribble2690}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 TInstantBlob represents a binary large object (BLOB).
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantBlob = \b class\b0 (\strike TInstantSimple\strike0{\v Scribble10430>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantBlob holds a binary large object (BLOB) as its value. A BLOB is raw binary data of arbitrary length that can represent different large data types such as an image or sound.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantMemo\strike0{\v Scribble7190>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2700}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantBlob\strike0{\v Scribble2680>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2710}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBlob Fields \cf1\b0\fs16  
\par \strike TInstantBlob\strike0{\v Scribble2680>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2720}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBlob Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantBlob\strike0{\v Scribble2680>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2730}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBlob
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Size\strike0{\v Scribble2790>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble2800>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2730}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2740}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantBlob Events \cf1\b0\fs16 
\par \strike TInstantBlob\strike0{\v Scribble2680>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2750}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBlob Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBlob\strike0{\v Scribble2680>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2760}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBlob
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble2810>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadDataFromStream\strike0{\v Scribble2820>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadBuffer\strike0{\v Scribble2830>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveDataToStream\strike0{\v Scribble2840>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteBuffer\strike0{\v Scribble2850>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2760}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2770}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBlob Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBlob\strike0{\v Scribble2680>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2780}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Size\strike0{\v Scribble2790>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble2800>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble2810>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadDataFromStream\strike0{\v Scribble2820>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadBuffer\strike0{\v Scribble2830>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveDataToStream\strike0{\v Scribble2840>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteBuffer\strike0{\v Scribble2850>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2780}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2790}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.Size}
{\up K}{\footnote {\up K} Size;Size,TInstantBlob;TInstantBlob,Size;}
{\up A}{\footnote {\up A} Size;Size_Property;TInstantBlob_Size}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.Size \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines the size of the Blob Attribute.
\par \pard\sb25\sa25\b\f7 property\b0  Size: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Size to determine the size in bytes of the Blob attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2800}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.Value}
{\up K}{\footnote {\up K} TInstantBlob,Value;Value;Value,TInstantBlob;}
{\up A}{\footnote {\up A} TInstantBlob_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.Value \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the BLOB attribute as a string.
\par \pard\sb25\sa25\b\f7 property\b0  Value: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the attribute directly as a string.
\par \pard\fi-195\li195\sb25\sa25\b Note: \b0  The string data type may contain binary data as well as text. Therefore nontextual as well as textual data can be set using a string.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2810}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.Clear}
{\up K}{\footnote {\up K} Clear;Clear,TInstantBlob;TInstantBlob,Clear;}
{\up A}{\footnote {\up A} Clear;Clear_Method;TInstantBlob_Clear}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.Clear \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Discards all data associated with the blob attribute
\par \pard\sb25\sa25\b\f7 procedure\b0  Clear;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Clear to empty the memory buffer for the blob attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.LoadDataFromStream}
{\up K}{\footnote {\up K} LoadDataFromStream;LoadDataFromStream,TInstantBlob;TInstantBlob,LoadDataFromStream;}
{\up A}{\footnote {\up A} LoadDataFromStream;LoadDataFromStream_Method;TInstantBlob_LoadDataFromStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.LoadDataFromStream \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Loads data from a TStream object into the attribute.
\par \pard\sb25\sa25\b\f7 procedure\b0  LoadDataFromStream(AStream: TStream);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use LoadDataFromStream to copy the content of a stream into the attribute. The Stream argument specifies the stream from which the value of the attribute is copied.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2830}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.ReadBuffer}
{\up K}{\footnote {\up K} ReadBuffer;ReadBuffer,TInstantBlob;TInstantBlob,ReadBuffer;}
{\up A}{\footnote {\up A} ReadBuffer;ReadBuffer_Method;TInstantBlob_ReadBuffer}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.ReadBuffer \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Reads from the blob attribute into a buffer
\par \pard\sb25\sa25\b\f7 function\b0  ReadBuffer(\b var\b0  Buffer; Position: Integer; Count: Integer): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call ReadBuffer to read from the Blob attribute into the buffer specified by the Buffer argument. The method reads a number of bytes specified by the Count argument starting at the position specified by the Position argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2840}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.SaveDataToStream}
{\up K}{\footnote {\up K} SaveDataToStream;SaveDataToStream,TInstantBlob;TInstantBlob,SaveDataToStream;}
{\up A}{\footnote {\up A} SaveDataToStream;SaveDataToStream_Method;TInstantBlob_SaveDataToStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.SaveDataToStream \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Saves the value of the attribute to a TStream object.
\par \pard\sb25\sa25\b\f7 procedure\b0  SaveDataToStream(AStream: TStream);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use SaveDataToStream to copy the value of the attribute to a stream. The Stream argument specifies the stream to which the value of the attribute is copied.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2850}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBlob.WriteBuffer}
{\up K}{\footnote {\up K} TInstantBlob,WriteBuffer;WriteBuffer;WriteBuffer,TInstantBlob;}
{\up A}{\footnote {\up A} TInstantBlob_WriteBuffer;WriteBuffer;WriteBuffer_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBlob.WriteBuffer \cf1\b0\fs16 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf1 
\par \pard\sb25\sa85\fs18 Reads from the blob attribute into a buffer
\par \pard\sb25\sa25\b\f7 function\b0  WriteBuffer(\b const\b0  Buffer; Position: Integer; Count: Integer): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call WriteBuffer to write from the buffer specified by the Buffer argument into the Blob attribute. The method writes a number of bytes specified by the Count argument starting at the position specified by the Position argument. The allocated memory is automatically grown when writing beyond the current size of the blob attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2860}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBoolean}
{\up +}{\footnote {\up +} classessymbol:000140}
{\up K}{\footnote {\up K} TInstantBoolean;}
{\up A}{\footnote {\up A} TInstantBoolean;TInstantBoolean_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBoolean\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1420\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble2870}\tab\strike Members\strike0{\v Scribble2940>nav}\tab\strike Properties\strike0{\v Scribble2890>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantBoolean represents a Boolean value.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantBoolean = \b class\b0 (\strike TInstantSimple\strike0{\v Scribble10430>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantBoolean holds a Boolean as its value. A Boolean can represent the values of True or False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantBoolean\strike0{\v Scribble2860>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBoolean Fields \cf1\b0\fs16 
\par \strike TInstantBoolean\strike0{\v Scribble2860>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2890}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBoolean Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBoolean\strike0{\v Scribble2860>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2900}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBoolean
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble2960>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2900}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2910}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantBoolean Events \cf1\b0\fs16 
\par \strike TInstantBoolean\strike0{\v Scribble2860>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2920}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBoolean Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantBoolean\strike0{\v Scribble2860>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2740}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2930}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2940}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantBoolean Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantBoolean\strike0{\v Scribble2860>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble2950}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble2960>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2950}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBoolean.Value}
{\up K}{\footnote {\up K} TInstantBoolean,Value;Value;Value,TInstantBoolean;}
{\up A}{\footnote {\up A} TInstantBoolean_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBoolean.Value \cf1\b0\fs16 
\par \cf2\strike TInstantBoolean\cf3\strike0{\v Scribble2860>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the Boolean attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the Boolean attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2970}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection}
{\up +}{\footnote {\up +} classessymbol:000150}
{\up K}{\footnote {\up K} TInstantCollection;}
{\up A}{\footnote {\up A} TInstantCollection;TInstantCollection_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble2980}\tab\strike Members\strike0{\v Scribble3030>nav}\tab\strike Methods\strike0{\v Scribble3020>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantCollection is a container for \strike TInstantCollectionItem\strike0{\v Scribble3090>main} objects.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantCollection = \b class\b0 (TCollection)
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantCollection holds a group of \strike TInstantCollectionItem\strike0{\v Scribble3090>main} objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2980}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TCollection
\par \pard\li95\tx355\tab |
\par \strike TInstantCollection\strike0{\v Scribble2970>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble2990}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCollection Fields \cf1\b0\fs16  
\par \strike TInstantCollection\strike0{\v Scribble2970>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3000}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollection Properties \cf1\b0\fs16 
\par \strike TInstantCollection\strike0{\v Scribble2970>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3010}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollection Events \cf1\b0\fs16 
\par \strike TInstantCollection\strike0{\v Scribble2970>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3020}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollection Methods \cf1\b0\fs16 
\par \strike TInstantCollection\strike0\{link\lang1033\f1 ID\lang1040\f0 =\lang1033\f1 2970\lang1040\f0 >main\} 
\par \pard\sb55\sa55\b\fs18 TInstantCollection
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Find\strike0{\v Scribble3040>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetItemNames\strike0{\v Scribble3050>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(const AName: string): Integer; overload;\strike0{\v Scribble3060>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(Item: TInstantCollectionItem): Integer; overload;\strike0{\v Scribble3070>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble3080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3030}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollection Members \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb55\sa55\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Find\strike0{\v Scribble3040>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetItemNames\strike0{\v Scribble3050>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(const AName: string): Integer; overload;\strike0{\v Scribble3060>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(Item: TInstantCollectionItem): Integer; overload;\strike0{\v Scribble3070>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble3080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3040}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection.Find}
{\up K}{\footnote {\up K} Find;Find,TInstantCollection;TInstantCollection,Find;}
{\up A}{\footnote {\up A} Find;Find_Method;TInstantCollection_Find}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection.Find \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb25\sa85\fs18 Locates an item by its name.
\par \pard\sb25\sa25\b\f7 function\b0  Find(\b const\b0  AName: \b string\b0 ): \strike TInstantCollectionItem\strike0{\v Scribble3090>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Find to locate an item which name matches the AName argument. If an item matching the name is not found in the collection, Find returns nil.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection.GetItemNames}
{\up K}{\footnote {\up K} GetItemNames;GetItemNames,TInstantCollection;TInstantCollection,GetItemNames;}
{\up A}{\footnote {\up A} GetItemNames;GetItemNames_Method;TInstantCollection_GetItemNames}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection.GetItemNames \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb25\sa85\fs18 Fills a TStrings object with the names of all items.
\par \pard\sb25\sa25\b\f7 procedure\b0  GetItemNames(List: TStrings);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call GetItemNames to get the names of all items in the collection. Before filling in the names, the TStrings object is cleared.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection.IndexOf}
{\up K}{\footnote {\up K} IndexOf;IndexOf,TInstantCollection;TInstantCollection,IndexOf;}
{\up A}{\footnote {\up A} IndexOf;IndexOf_Method;TInstantCollection_IndexOf}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection.IndexOf \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb25\sa85\fs18 Returns the index of an item with the specified name.
\par \pard\sb25\sa25\b\f7 function\b0  IndexOf(\b const\b0  AName: \b string\b0 ): Integer; \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call IndexOf to get the index of an item which name matches the specified AName argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3070}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection.IndexOf}
{\up K}{\footnote {\up K} IndexOf;IndexOf,TInstantCollection;TInstantCollection,IndexOf;}
{\up A}{\footnote {\up A} IndexOf;IndexOf_Method;TInstantCollection_IndexOf}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection.IndexOf \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb25\sa85\fs18 Returns the index of an item
\par \pard\sb25\sa25\b\f7 function\b0  \strike IndexOf\strike0{\v Scribble3060>main}(Item: \strike TInstantCollectionItem\strike0{\v Scribble3090>main}): Integer; \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call \strike IndexOf\strike0{\v Scribble3060>main} to get the index of an item in the collection.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3080}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollection.Remove}
{\up K}{\footnote {\up K} Remove;Remove,TInstantCollection;TInstantCollection,Remove;}
{\up A}{\footnote {\up A} Remove;Remove_Method;TInstantCollection_Remove}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollection.Remove \cf1\b0\fs16 
\par \cf2\strike TInstantCollection\cf3\strike0{\v Scribble2970>main}\cf1 
\par \pard\sb25\sa85\fs18 Remove an item from the collection.
\par \pard\sb25\sa25\b\f7 function\b0  Remove(Item: \strike TInstantCollectionItem\strike0{\v Scribble3090>main}): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Remove to remove an item from the collection. Remove returns the index of the item before it was removed. If the item is not found in the collection, Remove returns -1.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3090}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollectionItem}
{\up +}{\footnote {\up +} classessymbol:000160}
{\up K}{\footnote {\up K} TInstantCollectionItem;}
{\up A}{\footnote {\up A} TInstantCollectionItem;TInstantCollectionItem_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollectionItem \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble3100}\tab\strike Members\strike0{\v Scribble3160>nav}\tab\strike Properties\strike0{\v Scribble3120>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantCollectionItem is the ancestor for collection item classes.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantCollectionItem = \b class\b0 (TCollectionItem)
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 A \strike TInstantCollection\strike0{\v Scribble2970>main} holds a group of TInstantCollectionItem objects. TInstantCollectionItem objects are created and destroyed using the methods of \strike TInstantCollection\strike0{\v Scribble2970>main}.
\par TInstantCollectionItem objects are named through their \strike Name\strike0{\v Scribble3180>main} property.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3100}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TCollectionItem
\par \pard\li95\tx355\tab |
\par \strike TInstantCollectionItem\strike0{\v Scribble3090>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3110}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCollectionItem Fields \cf1\b0\fs16  
\par \strike TInstantCollectionItem\strike0{\v Scribble3090>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3120}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCollectionItem Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCollectionItem\strike0{\v Scribble3090>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3130}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCollectionItem
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Name\strike0{\v Scribble3180>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3130}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3140}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollectionItem Events \cf1\b0\fs16 
\par \strike TInstantCollectionItem\strike0{\v Scribble3090>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3150}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantCollectionItem Methods \cf1\b0\fs16 
\par \strike TInstantCollectionItem\strike0{\v Scribble3090>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3160}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCollectionItem Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCollectionItem\strike0{\v Scribble3090>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3170}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Name\strike0{\v Scribble3180>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCollectionItem.Name}
{\up K}{\footnote {\up K} Name;Name,TInstantCollectionItem;TInstantCollectionItem,Name;}
{\up A}{\footnote {\up A} Name;Name_Property;TInstantCollectionItem_Name}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCollectionItem.Name \cf1\b0\fs16 
\par \cf2\strike TInstantCollectionItem\cf3\strike0{\v Scribble3090>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies then name of the item.
\par \pard\sb25\sa25\b\f7 property\b0  \b Name\b0 : \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Name to specify the name of the \strike TInstantCollectionItem\strike0{\v Scribble3090>main} object. \strike TInstantCollectionItem\strike0{\v Scribble3090>main} has a field that holds the name.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex}
{\up +}{\footnote {\up +} classessymbol:000170}
{\up K}{\footnote {\up K} TInstantComplex;}
{\up A}{\footnote {\up A} TInstantComplex;TInstantComplex_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7080\ul Hierarchy\ulnone{\v Scribble3210}\tab\strike Members\strike0{\v Scribble3280>nav}\tab\strike Properties\strike0{\v Scribble3230>nav}\tab\strike Methods\strike0{\v Scribble3260>nav}\tab\ul See Also\ulnone{\v Scribble3200}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 The ancestor of all the attribute classes that represent objects.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantComplex = \b class\b0 (\strike TInstantAttribute\strike0{\v Scribble2170>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantComplex is the ancestor of all the attribute classes that represents objects. TInstantComplex introduces common properties and methods to:
\par \pard\sb25\sa25\tx280\lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Validate objects.
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Specify a connector for a database connection
\par \pard 
\par TInstantComplex is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes:
\par 
\par \b Complex attribute classes\b0 
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \strike TInstantParts\strike0{\v Scribble9390>main}
\par \strike TInstantReferences\strike0{\v Scribble9780>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3200}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3210}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3220}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantComplex Fields \cf1\b0\fs16  
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3230}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantComplex Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3240}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3240}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3250}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantComplex Events \cf1\b0\fs16 
\par \strike TInstantComplex\strike0{\v Scribble3190>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3260}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantComplex Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3270}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3280}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantComplex Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3290}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.AllowOwned}
{\up K}{\footnote {\up K} AllowOwned;AllowOwned,TInstantComplex;TInstantComplex,AllowOwned;}
{\up A}{\footnote {\up A} AllowOwned;AllowOwned_Property;TInstantComplex_AllowOwned}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.AllowOwned \cf1\b0\fs16 
\par \cf2\strike TInstantComplex\cf3\strike0{\v Scribble3190>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies whether the attribute should allow owned objects.
\par \pard\sb25\sa25\b\f7 property\b0  AllowOwned: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use AllowOwned to specify if the attribute should allow owned objects. When adding an object that is owned, dependence is created to an object that is internally managed by another instance. The default value of AllowOwned is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.Connector}
{\up K}{\footnote {\up K} Connector;Connector,TInstantComplex;TInstantComplex,Connector;}
{\up A}{\footnote {\up A} Connector;Connector_Property;TInstantComplex_Connector}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.Connector \cf1\b0\fs16 
\par \cf2\strike TInstantComplex\cf3\strike0{\v Scribble3190>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines the connector used by the attribute.
\par \pard\sb25\sa25\b\f7 property\b0  Connector: \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The Connector property determines the connector that the attribute uses to retrieve, store and dispose objects. If the attribute is owned, the connector of the owning object is used. If no connector is specified, the default connector is used. If also no default connector exists, accessing the Connector property will raise an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.RequiredClass}
{\up K}{\footnote {\up K} RequiredClass;RequiredClass,TInstantComplex;TInstantComplex,RequiredClass;}
{\up A}{\footnote {\up A} RequiredClass;RequiredClass_Property;TInstantComplex_RequiredClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.RequiredClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\ul See Also\ulnone{\v Scribble3330}
\par \pard\sb25\sa85\tx1435\fs18 Determines the minimum required class of objects that the attribute holds.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  RequiredClass: TInstantObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use RequiredClass to determine the minimum required class of objects that the attribute holds. If the attribute has metadata, the object class specified by the metadata object is used. Otherwise the required class is \strike TInstantObject\strike0{\v Scribble7390>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3330}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantComplex.RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.RequiredClassName}
{\up K}{\footnote {\up K} RequiredClassName;RequiredClassName,TInstantComplex;TInstantComplex,RequiredClassName;}
{\up A}{\footnote {\up A} RequiredClassName;RequiredClassName_Property;TInstantComplex_RequiredClassName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.RequiredClassName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\ul See Also\ulnone{\v Scribble3350} 
\par \pard\sb25\sa85\tx1435\fs18 Determines the name of the minimum required class of objects that the attribute holds.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  RequiredClassName: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use RequiredClassName to determine the name of the minimum required class of objects that the attribute holds. If the attribute has metadata, the object class specified by the metadata object is used. Otherwise the required class is \strike TInstantObject\strike0{\v Scribble7390>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3350}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantComplex.RequiredClass\strike0{\v Scribble3320>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.AttachObject}
{\up K}{\footnote {\up K} AttachObject;AttachObject,TInstantComplex;TInstantComplex,AttachObject;}
{\up A}{\footnote {\up A} AttachObject;AttachObject_Method;TInstantComplex_AttachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.AttachObject \cf1\b0\fs16 
\par \cf2\strike TInstantComplex\cf3\strike0{\v Scribble3190>main}\cf1 
\par \pard\sb25\sa85\fs18 Attaches an object to the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  AttachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Attaches the object specified by the AObject argument to the attribute.
\par For the descendant classes of \strike TInstantComplex\strike0{\v Scribble3190>main}  this implies: 
\par 
\par \pard\sb25\sa25\tx3120\ul\b Class\tab Action\f1                                                                   \ulnone\b0\f0 
\par \strike TInstantElement\strike0{\v Scribble6050>main}\tab AObject is assigned as the attributes Value
\par \strike TInstantContainer\strike0{\v Scribble4300>main}\tab AObject is added to the objects array
\par \pard 
\par \pard\sb25\sa25 If the object is successfully attached, the function returns True. Otherwise the function returns False.
\par 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.DetachObject}
{\up K}{\footnote {\up K} DetachObject;DetachObject,TInstantComplex;TInstantComplex,DetachObject;}
{\up A}{\footnote {\up A} DetachObject;DetachObject_Method;TInstantComplex_DetachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.DetachObject \cf1\b0\fs16 
\par \cf2\strike TInstantComplex\cf3\strike0{\v Scribble3190>main}\cf1 
\par \pard\sb25\sa85\fs18 Detaches an object from the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  DetachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Detaches the object specified by the AObject argument from the attribute.
\par For the descendant classes of \strike TInstantComplex\strike0{\v Scribble3190>main}  this implies: 
\par 
\par \pard\sb25\sa25\tx3680\ul\b Class\tab Action\f1                                                                                      \ulnone\b0\f0 
\par \strike TInstantElement\strike0{\v Scribble6050>main}\tab if the attribute Value equals AObject, the Value is set to nil.
\par \strike TInstantContainer\strike0{\v Scribble4300>main}\tab AObject is removed from the attributes array of objects.
\par \pard 
\par If the object is successfully detached, the function returns True. Otherwise the function returns False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantComplex.ValidateObject}
{\up K}{\footnote {\up K} TInstantComplex,ValidateObject;ValidateObject;ValidateObject,TInstantComplex;}
{\up A}{\footnote {\up A} TInstantComplex_ValidateObject;ValidateObject;ValidateObject_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantComplex.ValidateObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantComplex\strike0{\v Scribble3190>main}\tab\ul See Also\ulnone{\v Scribble3390}
\par \pard\sb25\sa85\tx1435\fs18 Validates an object that is added to the attribute.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ValidateObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ValidateObject validates an object before it is added to the attribute. If the validation fails, an exception is raised. \strike TInstantComplex\strike0{\v Scribble3190>main} performs a validation of the class type of the object passed as the AObject argument. Descendant classes may override ValidateObject to introduce other validation rules.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3390}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantComplex.RequiredClass\strike0{\v Scribble3320>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionBasedConnector}
{\up +}{\footnote {\up +} classessymbol:000180}
{\up K}{\footnote {\up K} TInstantConnectionBasedConnector;}
{\up A}{\footnote {\up A} TInstantConnectionBasedConnector;TInstantConnectionBasedConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionBasedConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble3410}\tab\strike Members\strike0{\v Scribble3480>nav}\tab\strike Properties\strike0{\v Scribble3430>nav}\tab\strike Methods\strike0{\v Scribble3470>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx495\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.\lang1033\f1 
\par TInstantConnector introduces properties and methods that fall into the following categories:\lang1040\f0 
\par \pard\sb25\sa25\tx280\tab\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \tab\{bmct bm3.BMP\}\tab Transaction control
\par \tab\{bmct bm3.BMP\}\tab Information about the database
\par \tab\{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3410}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3420}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionBasedConnector Fields \cf1\b0\fs16 
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3430}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionBasedConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3440}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3450}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionBasedConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3460}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3460}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3470}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantConnectionBasedConnector Methods \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionBasedConnector\cf3\strike0{\v Scribble3400>main}\cf1 
\par \pard\sb55\sa55\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3480}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionBasedConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3490}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3490}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionBasedConnector.Connection}
{\up K}{\footnote {\up K} Connection;Connection,TInstantConnectionBasedConnector;TInstantConnectionBasedConnector,Connection;}
{\up A}{\footnote {\up A} Connection;Connection_Property;TInstantConnectionBasedConnector_Connection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionBasedConnector.Connection \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionBasedConnector\cf3\strike0{\v Scribble3400>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the connection used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connection: TCustomConnection;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Connection property to specify the connection used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionBasedConnector.HasConnection}
{\up K}{\footnote {\up K} HasConnection;HasConnection,TInstantConnectionBasedConnector;TInstantConnectionBasedConnector,HasConnection;}
{\up A}{\footnote {\up A} HasConnection;HasConnection_Method;TInstantConnectionBasedConnector_HasConnection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionBasedConnector.HasConnection \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionBasedConnector\cf3\strike0{\v Scribble3400>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if a connection is associated with the connector.
\par \pard\sb25\sa25\b\f7 function\b0  HasConnection: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasConnection to determine if the \strike Connection\strike0{\v Scribble3500>main} property of the connector is assigned. If a connection component has been associated with the connector, HasConnection returns True. Otherwise HasConnection returns False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager}
{\up +}{\footnote {\up +} classessymbol:000190}
{\up K}{\footnote {\up K} TInstantConnectionManager;}
{\up A}{\footnote {\up A} TInstantConnectionManager;TInstantConnectionManager_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\tx5700\ul Hierarchy\ulnone{\v Scribble3530}\tab\strike Members\strike0{\v Scribble3600>nav}\tab\strike Properties\strike0{\v Scribble3550>nav}\tab\strike Methods\strike0{\v Scribble3580>nav}\tab\strike Unit: InstantConnectionManager\strike0{\v Scribble12860>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Allows the user to manage connections to various databases.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantConnectionManager = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 The Connection Manager shows a dialog in which connections to databases can be defined and managed by the user.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3530}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnectionManager\strike0{\v Scribble3520>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3540}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionManager Fields \cf1\b0\fs16  
\par \strike TInstantConnectionManager\strike0{\v Scribble3520>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3550}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionManager Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantConnectionManager\strike0{\v Scribble3520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3560}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnectionManager
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Caption\strike0{\v Scribble3620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CurrentConnectionDef\strike0{\v Scribble3630>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FileName\strike0{\v Scribble3640>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Form\strike0{\v Scribble3650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Model\strike0{\v Scribble3660>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnBuild\strike0{\v Scribble3670>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnConnect\strike0{\v Scribble3680>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnDisconnect\strike0{\v Scribble3690>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnEdit\strike0{\v Scribble3700>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIsConnected\strike0{\v Scribble3710>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnPrepare\strike0{\v Scribble3720>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnSupportConnector\strike0{\v Scribble3730>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike VisibleActions\strike0{\v Scribble3740>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3560}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3570}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantConnectionManager Events \cf1\b0\fs16 
\par \strike TInstantConnectionManager\strike0{\v Scribble3520>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3580}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionManager Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantConnectionManager\strike0{\v Scribble3520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3590}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnectionManager
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Execute\strike0{\v Scribble3750>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike HasForm\strike0{\v Scribble3760>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3590}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3600}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnectionManager Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantConnectionManager\strike0{\v Scribble3520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3610}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Caption\strike0{\v Scribble3620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CurrentConnectionDef\strike0{\v Scribble3630>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FileName\strike0{\v Scribble3640>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Form\strike0{\v Scribble3650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Model\strike0{\v Scribble3660>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnBuild\strike0{\v Scribble3670>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnConnect\strike0{\v Scribble3680>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnDisconnect\strike0{\v Scribble3690>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnEdit\strike0{\v Scribble3700>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIsConnected\strike0{\v Scribble3710>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnPrepare\strike0{\v Scribble3720>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnSupportConnector\strike0{\v Scribble3730>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike VisibleActions\strike0{\v Scribble3740>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Execute\strike0{\v Scribble3750>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike HasForm\strike0{\v Scribble3760>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.Caption}
{\up K}{\footnote {\up K} Caption;Caption,TInstantConnectionManager;TInstantConnectionManager,Caption;}
{\up A}{\footnote {\up A} Caption;Caption_Property;TInstantConnectionManager_Caption}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.Caption \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the Caption of the ConnectionManager form.
\par \pard\sb25\sa25\b\f7 property\b0  Caption: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Caption property to specify the Caption of the form that the connection manager shows when it is executed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3630}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.CurrentConnectionDef}
{\up K}{\footnote {\up K} CurrentConnectionDef;CurrentConnectionDef,TInstantConnectionManager;TInstantConnectionManager,CurrentConnectionDef;}
{\up A}{\footnote {\up A} CurrentConnectionDef;CurrentConnectionDef_Property;TInstantConnectionManager_CurrentConnectionDef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.CurrentConnectionDef \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the currently selected connection within the manager.
\par \pard\sb25\sa25\b\f7 property\b0  CurrentConnectionDef: TInstantConnectionDef;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 CurrentConnectionDef refers to the definition of the currently selected connection within the connection manager.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.FileName}
{\up K}{\footnote {\up K} FileName;FileName,TInstantConnectionManager;TInstantConnectionManager,FileName;}
{\up A}{\footnote {\up A} FileName;FileName_Property;TInstantConnectionManager_FileName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.FileName \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 The name of the file in which to save connection definitions.
\par \pard\sb25\sa25\b\f7 property\b0  FileName: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 FileName specifies the name of the file that connection definitions are loaded from and saved to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.Form}
{\up K}{\footnote {\up K} Form;Form,TInstantConnectionManager;TInstantConnectionManager,Form;}
{\up A}{\footnote {\up A} Form;Form_Property;TInstantConnectionManager_Form}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.Form \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Contains the actual form used by the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  Form: TInstantConnectionManagerForm;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the form property to access the form used by the connection manager to present connections to the user.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.Model}
{\up K}{\footnote {\up K} Model;Model,TInstantConnectionManager;TInstantConnectionManager,Model;}
{\up A}{\footnote {\up A} Model;Model_Property;TInstantConnectionManager_Model}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.Model \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the model for building a database.
\par \pard\sb25\sa25\b\f7 property\b0  Model: TInstantModel;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Model property to specify the model that should be used when building a database through the connection manager form.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3670}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnBuild}
{\up K}{\footnote {\up K} OnBuild;OnBuild,TInstantConnectionManager;TInstantConnectionManager,OnBuild;}
{\up A}{\footnote {\up A} OnBuild;OnBuild_Property;TInstantConnectionManager_OnBuild}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnBuild \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the user requests to build a database from the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  OnBuild: TInstantConnectionDefEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 By default, the build action of the connection manager will build the database according to the current model. Write an OnBuild event handler to perform special operations when building the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnConnect}
{\up K}{\footnote {\up K} OnConnect;OnConnect,TInstantConnectionManager;TInstantConnectionManager,OnConnect;}
{\up A}{\footnote {\up A} OnConnect;OnConnect_Property;TInstantConnectionManager_OnConnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnConnect \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the user requests to connect to a database from the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  OnConnect: TInstantConnectionDefEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnConnect event handler to establish a connection to the database identified by the selected connection definition. The application is responsible for the established connection.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3690}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnDisconnect}
{\up K}{\footnote {\up K} OnDisconnect;OnDisconnect,TInstantConnectionManager;TInstantConnectionManager,OnDisconnect;}
{\up A}{\footnote {\up A} OnDisconnect;OnDisconnect_Property;TInstantConnectionManager_OnDisconnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnDisconnect \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the user requests to disconnect an active connection from the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  OnDisconnect: TInstantConnectionDefEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnDisconnect event handler to close a connection to the database identified by the selected connection definition. The application is assumed to have established the connection via an \strike OnConnect\strike0{\v Scribble3680>main} event handler.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnEdit}
{\up K}{\footnote {\up K} OnEdit;OnEdit,TInstantConnectionManager;TInstantConnectionManager,OnEdit;}
{\up A}{\footnote {\up A} OnEdit;OnEdit_Property;TInstantConnectionManager_OnEdit}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnEdit \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the user requests to edit a connection definition.
\par \pard\sb25\sa25\b\f7 property\b0  OnEdit: TInstantConnectionDefEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 By default, the connection manager will open an edit form that corresponds to the type of connection definition. Write an OnEdit event handler to edit a connection definition some other way.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3710}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnIsConnected}
{\up K}{\footnote {\up K} OnIsConnected;OnIsConnected,TInstantConnectionManager;TInstantConnectionManager,OnIsConnected;}
{\up A}{\footnote {\up A} OnIsConnected;OnIsConnected_Property;TInstantConnectionManager_OnIsConnected}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnIsConnected \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the connection manager needs to know if a certain connection is open or not.
\par \pard\sb25\sa25\b\f7 property\b0  OnIsConnected: TInstantConnectionDefEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnIsConnected event handler to respond to the event. The application is assumed to have established the connection via the \strike OnConnect\strike0{\v Scribble3680>main} event. Set Result according to the open state of the connection.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnPrepare}
{\up K}{\footnote {\up K} OnPrepare;OnPrepare,TInstantConnectionManager;TInstantConnectionManager,OnPrepare;}
{\up A}{\footnote {\up A} OnPrepare;OnPrepare_Property;TInstantConnectionManager_OnPrepare}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnPrepare \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs after a database has been built from the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  OnPrepare: TInstantConnectorEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnPrepare event handler to perform special initialization of the database after it has been built.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3730}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.OnSupportConnector}
{\up K}{\footnote {\up K} OnSupportConnector;OnSupportConnector,TInstantConnectionManager;TInstantConnectionManager,OnSupportConnector;}
{\up A}{\footnote {\up A} OnSupportConnector;OnSupportConnector_Property;TInstantConnectionManager_OnSupportConnector}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.OnSupportConnector \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs when the connection manager needs to know if a certain connector class shall be supported.
\par \pard\sb25\sa25\b\f7 property\b0  OnSupportConnector: TInstantConnectorClassEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 By default all registered connector types are supported. Write an OnSupportConnector event handler to disable support for selected connector types.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.VisibleActions}
{\up K}{\footnote {\up K} TInstantConnectionManager,VisibleActions;VisibleActions;VisibleActions,TInstantConnectionManager;}
{\up A}{\footnote {\up A} TInstantConnectionManager_VisibleActions;VisibleActions;VisibleActions_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.VisibleActions \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines which actions are available in the connection manager.
\par \pard\sb25\sa25\b\f7 property\b0  VisibleActions: \strike TInstantConnectionManagerActionTypes\strike0{\v Scribble12200>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use VisibleActions to select which actions that appear in the connection manager. Leave any of the action types out of the VisibleActions set to hide those actions and thereby prevent the user from performing certain operations.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3750}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.Execute}
{\up K}{\footnote {\up K} Execute;Execute,TInstantConnectionManager;TInstantConnectionManager,Execute;}
{\up A}{\footnote {\up A} Execute;Execute_Method;TInstantConnectionManager_Execute}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.Execute \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Opens the connection manager.
\par \pard\sb25\sa25\b\f7 function\b0  Execute: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Opens the connection manager form allowing the user to manage connections to databases.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManager.HasForm}
{\up K}{\footnote {\up K} HasForm;HasForm,TInstantConnectionManager;TInstantConnectionManager,HasForm;}
{\up A}{\footnote {\up A} HasForm;HasForm_Method;TInstantConnectionManager_HasForm}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManager.HasForm \cf1\b0\fs16 
\par \cf2\strike TInstantConnectionManager\cf3\strike0{\v Scribble3520>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if the connection manager has a form instance.
\par \pard\sb25\sa25\b\f7 function\b0  HasForm: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the HasForm property to determine if the connection manager has created a TConnectionManagerForm instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3770}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector}
{\up +}{\footnote {\up +} classessymbol:000200}
{\up K}{\footnote {\up K} TInstantConnector;}
{\up A}{\footnote {\up A} TInstantConnector;TInstantConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\tx5700\tx7100\ul Hierarchy\ulnone{\v Scribble3780}\tab\strike Members\strike0{\v Scribble3850>nav}\tab\strike Properties\strike0{\v Scribble3800>nav}\tab\strike Methods\strike0{\v Scribble3840>nav}\tab\strike Events\strike0{\v Scribble3820>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  TInstantConnector;
\par TInstantConnector = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\sb25\sa25\tx280\lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Transaction control
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Information about the database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3780}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3790}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnector Fields \cf1\b0\fs16 
\par \strike TInstantConnector\strike0{\v Scribble3770>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3800}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3810}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3810}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3820}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3830}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3830}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3840}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantConnector Methods \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb55\sa55\b\fs18 TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike BuildDatabase\lang1033\f1  1\lang1040\strike0\f0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike BuildDatabase\lang1033\f1  2\lang1040\strike0\f0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3850}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble3860}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par \pard\sb55\sa55\tx355\b Events
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3860}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3870}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.AfterConnect}
{\up K}{\footnote {\up K} AfterConnect;AfterConnect,TInstantConnector;TInstantConnector,AfterConnect;}
{\up A}{\footnote {\up A} AfterConnect;AfterConnect_Property;TInstantConnector_AfterConnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.AfterConnect \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3880} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs after the connection is opened.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  AfterConnect: TNotifyEvent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an AfterConnect event handler to take actions after the connector component opens the connection to the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3880}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.BeforeConnect\strike0{\v Scribble3910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3890}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.AfterDisconnect}
{\up K}{\footnote {\up K} AfterDisconnect;AfterDisconnect,TInstantConnector;TInstantConnector,AfterDisconnect;}
{\up A}{\footnote {\up A} AfterDisconnect;AfterDisconnect_Property;TInstantConnector_AfterDisconnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.AfterDisconnect \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3900}
\par \pard\sb25\sa85\tx1435\fs18 Occurs after the connection is closed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  AfterDisconnect: TNotifyEvent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an AfterDisconnect event handler to take actions after the connector component closes the connection to the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3900}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.BeforeDisconnect\strike0{\v Scribble3930>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.BeforeConnect}
{\up K}{\footnote {\up K} BeforeConnect;BeforeConnect,TInstantConnector;TInstantConnector,BeforeConnect;}
{\up A}{\footnote {\up A} BeforeConnect;BeforeConnect_Property;TInstantConnector_BeforeConnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.BeforeConnect \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3920}
\par \pard\sb25\sa85\tx1435\fs18 Occurs before the connection is opened.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  BeforeConnect: TNotifyEvent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write a BeforeConnect event handler to take actions before the connector component opens the connection to the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3920}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.AfterConnect\strike0{\v Scribble3870>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.BeforeDisconnect}
{\up K}{\footnote {\up K} BeforeDisconnect;BeforeDisconnect,TInstantConnector;TInstantConnector,BeforeDisconnect;}
{\up A}{\footnote {\up A} BeforeDisconnect;BeforeDisconnect_Property;TInstantConnector_BeforeDisconnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.BeforeDisconnect \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3940}
\par \pard\sb25\sa85\tx1435\fs18 Occurs before the connection is closed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  BeforeDisconnect: TNotifyEvent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write a BeforeDisconnect event handler to take actions before the connector component closes the connection to the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3940}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.AfterDisconnect\strike0{\v Scribble3890>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Broker}
{\up K}{\footnote {\up K} Broker;Broker,TInstantConnector;TInstantConnector,Broker;}
{\up A}{\footnote {\up A} Broker;Broker_Property;TInstantConnector_Broker}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Broker \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 States the associated broker object.
\par \pard\sb25\sa25\b\f7 property\b0  Broker: TInstantBroker;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 States the associated broker object. The broker is used by object stores to manage objects persistently, and is database specific, like the connector object itself.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.ClientCount}
{\up K}{\footnote {\up K} ClientCount;ClientCount,TInstantConnector;TInstantConnector,ClientCount;}
{\up A}{\footnote {\up A} ClientCount;ClientCount_Property;TInstantConnector_ClientCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.ClientCount \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3970} 
\par \pard\sb25\sa85\tx1435\fs18 Determines the number of registered clients for the connector component
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ClientCount: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use ClientCount to determine the number of clients that depend on the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3970}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.Clients\strike0{\v Scribble3980>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3980}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Clients}
{\up K}{\footnote {\up K} Clients;Clients,TInstantConnector;TInstantConnector,Clients;}
{\up A}{\footnote {\up A} Clients;Clients_Property;TInstantConnector_Clients}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Clients \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble3990} 
\par \pard\sb25\sa85\tx1435\fs18 Array of the clients registered for the connector component.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Clients [\b Index\b0 : Integer]: TObject;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use the Clients array to access the clients that depend on the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble3990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.ClientCount\strike0{\v Scribble3960>main}
\par \strike TInstantConnector.RegisterClient\strike0{\v Scribble4210>main}
\par \strike TInstantConnector.UnregisterClient\strike0{\v Scribble4270>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Connected}
{\up K}{\footnote {\up K} Connected;Connected,TInstantConnector;TInstantConnector,Connected;}
{\up A}{\footnote {\up A} Connected;Connected_Property;TInstantConnector_Connected}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Connected \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies if a connection has been established to the database.
\par \pard\sb25\sa25\b\f7 property\b0  Connected: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Set Connected to True to open the connection. Set Connected to False to close the connection. When setting the Connected value it uses the \strike Connect\strike0{\v Scribble4130>main} and \strike Disconnect\strike0{\v Scribble4160>main} methods.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4010}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.DatabaseName}
{\up K}{\footnote {\up K} DatabaseName;DatabaseName,TInstantConnector;TInstantConnector,DatabaseName;}
{\up A}{\footnote {\up A} DatabaseName;DatabaseName_Property;TInstantConnector_DatabaseName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.DatabaseName \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines the name of the database the connector component connects to.
\par \pard\sb25\sa25\b\f7 property\b0  DatabaseName: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use DatabaseName to determine the name of the database the connector component connects to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4020}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.InTransaction}
{\up K}{\footnote {\up K} InTransaction;InTransaction,TInstantConnector;TInstantConnector,InTransaction;}
{\up A}{\footnote {\up A} InTransaction;InTransaction_Property;TInstantConnector_InTransaction}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.InTransaction \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if a transaction is in progress.
\par \pard\sb25\sa25\b\f7 property\b0  InTransaction: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InTransaction to determine if a transaction is currently active for the connector component. If the connector component is currently in a transaction, InTransaction is True. Otherwise InTransaction is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.InUse}
{\up K}{\footnote {\up K} InUse;InUse,TInstantConnector;TInstantConnector,InUse;}
{\up A}{\footnote {\up A} InUse;InUse_Property;TInstantConnector_InUse}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.InUse \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if the connector component is in use.
\par \pard\sb25\sa25\b\f7 property\b0  InUse: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InUse to determine if the connector component is in use by clients that depend on the connector component in its present configuration.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4040}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.IsDefault}
{\up K}{\footnote {\up K} IsDefault;IsDefault,TInstantConnector;TInstantConnector,IsDefault;}
{\up A}{\footnote {\up A} IsDefault;IsDefault_Property;TInstantConnector_IsDefault}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.IsDefault \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies if the connector is the default connector of the application.
\par \pard\sb25\sa25\b\f7 property\b0  IsDefault: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use IsDefault to specify whether the connector is the default connector of the application.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.ObjectCount}
{\up K}{\footnote {\up K} ObjectCount;ObjectCount,TInstantConnector;TInstantConnector,ObjectCount;}
{\up A}{\footnote {\up A} ObjectCount;ObjectCount_Property;TInstantConnector_ObjectCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.ObjectCount \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines the number of objects using the connector.
\par \pard\sb25\sa25\b\f7 property\b0  ObjectCount: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ObjectCount determines the number of \strike TInstantObject\strike0{\v Scribble7390>main} objects that use the connector.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Objects}
{\up K}{\footnote {\up K} Objects;Objects,TInstantConnector;TInstantConnector,Objects;}
{\up A}{\footnote {\up A} Objects;Objects_Property;TInstantConnector_Objects}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Objects \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4070}
\par \pard\sb25\sa85\tx1435\fs18 Array representing the objects that use the Connector.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Objects [\b Index\b0 : Integer]: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use this zero-based array to programmatically access the objects that use the connector.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4070}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.ObjectCount\strike0{\v Scribble4050>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4080}
{\up $}{\footnote {\up $} TInstantConnector.UseTransactions}
{\up K}{\footnote {\up K} TInstantConnector,UseTransactions;UseTransactions;UseTransactions,TInstantConnector;}
{\up A}{\footnote {\up A} TInstantConnector_UseTransactions;UseTransactions;UseTransactions_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.UseTransactions \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies if the connector uses transactions.
\par \pard\sb25\sa25\b\f7 property\b0  UseTransactions: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The UseTransactions property specifies if the connector should use transactions. If UseTransactions is True, transactions are used. If UseTransaction is False any call to \strike StartTransaction\strike0{\v Scribble4250>main}, \strike CommitTransaction\strike0{\v Scribble4110>main} and \strike RollbackTransaction\strike0{\v Scribble4230>main} is suppressed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4090}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.BuildDatabase 1}
{\up K}{\footnote {\up K} BuildDatabase,1;BuildDatabase 1,TInstantConnector;TInstantConnector,BuildDatabase;}
{\up A}{\footnote {\up A} BuildDatabase_1;BuildDatabase1_Method;TInstantConnector_BuildDatabase1}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.BuildDatabase 1 \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\lang1033\f1\tab\cf2\strike BuildDatabase 2\cf3\strike0{\v Scribble4100>main}\cf1\lang1040\f0 
\par \pard\sb25\sa85\fs18 Builds the database.
\par \pard\sb25\sa25\b\f7 procedure\b0  \strike BuildDatabase\strike0{\v Scribble4100>main}(Model: TInstantModel); \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call \strike BuildDatabase\strike0{\v Scribble4100>main} to build a database for the application. The Model argument specifies the model for which a database should be created. If this argument is unassigned (the default), a database is created for all classes that constitute the business model of the application.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.BuildDatabase 2}
{\up K}{\footnote {\up K} BuildDatabase,2;BuildDatabase 2,TInstantConnector;TInstantConnector,BuildDatabase;}
{\up A}{\footnote {\up A} BuildDatabase_2;BuildDatabase2_Method;TInstantConnector_BuildDatabase2}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.BuildDatabase 2 \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\lang1033\f1\tab\cf2\strike BuildDatabase 1\cf3\strike0{\v Scribble4090>main}\cf1\lang1040\f0 
\par \pard\sb25\sa85\fs18 Builds a database for an array of classes.
\par \pard\sb25\sa25\b\f7 procedure\b0  BuildDatabase(AClasses: \b array\b0  \b of\b0  TInstantObjectClass); \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the BuildDatabase method to build a database for an array of classes. For relational databases, much attention should be given to the class hierarchy and mapping strategy when building databases for a selection of classes rather than the complete model.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.CommitTransaction}
{\up K}{\footnote {\up K} CommitTransaction;CommitTransaction,TInstantConnector;TInstantConnector,CommitTransaction;}
{\up A}{\footnote {\up A} CommitTransaction;CommitTransaction_Method;TInstantConnector_CommitTransaction}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.CommitTransaction \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4120}
\par \pard\sb25\sa85\tx1435\fs18 Commits the active transaction.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  CommitTransaction;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call CommitTransaction to commit changes made during the active transaction to the database and to end the transaction.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.RollbackTransaction\strike0{\v Scribble4230>main}
\par \strike TInstantConnector.StartTransaction\strike0{\v Scribble4250>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4130}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Connect}
{\up K}{\footnote {\up K} Connect;Connect,TInstantConnector;TInstantConnector,Connect;}
{\up A}{\footnote {\up A} Connect;Connect_Method;TInstantConnector_Connect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Connect \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4140} 
\par \pard\sb25\sa85\tx1435\fs18 Opens the connection to the database.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Connect;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Connect to establish a connection to the database. After the connection has been established the \strike Connected\strike0{\v Scribble4000>main} property is True. Connect generates a \strike BeforeConnect\strike0{\v Scribble3910>main} event before the trying to connect, and an \strike AfterConnect\strike0{\v Scribble3870>main} event after the connection is established.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4140}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.Connected\strike0{\v Scribble4000>main}
\par \strike TInstantConnector.Disconnect\strike0{\v Scribble4160>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.CreateQuery}
{\up K}{\footnote {\up K} CreateQuery;CreateQuery,TInstantConnector;TInstantConnector,CreateQuery;}
{\up A}{\footnote {\up A} CreateQuery;CreateQuery_Method;TInstantConnector_CreateQuery}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.CreateQuery \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Creates and returns an instance of a Query object.
\par \pard\sb25\sa25\b\f7 function\b0  CreateQuery: TInstantQuery;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call CreateQuery to obtain an instance of a TInstantQuery descendant appropriate for the kind of database the connector is connected to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.Disconnect}
{\up K}{\footnote {\up K} Disconnect;Disconnect,TInstantConnector;TInstantConnector,Disconnect;}
{\up A}{\footnote {\up A} Disconnect;Disconnect_Method;TInstantConnector_Disconnect}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.Disconnect \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4170}
\par \pard\sb25\sa85\tx1435\fs18 Closes the connection.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Disconnect;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Close to disconnect from the database. Disconnect generates a \strike BeforeDisconnect\strike0{\v Scribble3930>main} event before the trying to close the connection, and an \strike AfterDisconnect\strike0{\v Scribble3890>main} event after the connection is closed. If the connection is in use, trying to disconnect raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.Connect\strike0{\v Scribble4130>main}
\par \strike TInstantConnector.InUse\strike0{\v Scribble4030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.EnsureObjectStore}
{\up K}{\footnote {\up K} EnsureObjectStore;EnsureObjectStore,TInstantConnector;TInstantConnector,EnsureObjectStore;}
{\up A}{\footnote {\up A} EnsureObjectStore;EnsureObjectStore_Method;TInstantConnector_EnsureObjectStore}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.EnsureObjectStore \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Returns an object store for a specified class type.
\par \pard\sb25\sa25\b\f7 function\b0  EnsureObjectStore(AClass: TInstantObjectClass): TInstantObjectStore;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Returns an object store capable of managing objects of the class type specified as the AClass argument. Object stores are used internally by the persistence mechanism of InstantObjects, and it should not be necessary to use them directly.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.GenerateId}
{\up K}{\footnote {\up K} GenerateId;GenerateId,TInstantConnector;TInstantConnector,GenerateId;}
{\up A}{\footnote {\up A} GenerateId;GenerateId_Method;TInstantConnector_GenerateId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.GenerateId \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4200}
\par \pard\sb25\sa85\tx1435\fs18 Generates an unique id.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  GenerateId: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call this method to generate an unique Id. The method returns a GUID by default, but the specialized object brokers may return a value specific for the database engine they support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4200}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.GenerateId\strike0{\v Scribble8720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4210}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.RegisterClient}
{\up K}{\footnote {\up K} RegisterClient;RegisterClient,TInstantConnector;TInstantConnector,RegisterClient;}
{\up A}{\footnote {\up A} RegisterClient;RegisterClient_Method;TInstantConnector_RegisterClient}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.RegisterClient \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4220} 
\par \pard\sb25\sa85\tx1435\fs18 Registers an object that uses the connector component.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  RegisterClient(Client: TObject);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use RegisterClient to associate an object with the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4220}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.UnregisterClient\strike0{\v Scribble4270>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4230}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.RollbackTransaction}
{\up K}{\footnote {\up K} RollbackTransaction;RollbackTransaction,TInstantConnector;TInstantConnector,RollbackTransaction;}
{\up A}{\footnote {\up A} RollbackTransaction;RollbackTransaction_Method;TInstantConnector_RollbackTransaction}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.RollbackTransaction \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4240}
\par \pard\sb25\sa85\tx1435\fs18 Rolls back the active transaction.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  RollbackTransaction;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call RollbackTransaction to cancel any changes made during the active transaction and to end the transaction.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4240}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.CommitTransaction\strike0{\v Scribble4110>main}
\par \strike TInstantConnector.StartTransaction\strike0{\v Scribble4250>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4250}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.StartTransaction}
{\up K}{\footnote {\up K} StartTransaction;StartTransaction,TInstantConnector;TInstantConnector,StartTransaction;}
{\up A}{\footnote {\up A} StartTransaction;StartTransaction_Method;TInstantConnector_StartTransaction}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.StartTransaction \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4260}
\par \pard\sb25\sa85\tx1435\fs18 Initiates a new transaction.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  StartTransaction;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call StartTransaction to start a new transaction in the database the connector component is connected to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4260}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.CommitTransaction\strike0{\v Scribble4110>main}
\par \strike TInstantConnector.RollbackTransaction\strike0{\v Scribble4230>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4270}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.UnregisterClient}
{\up K}{\footnote {\up K} TInstantConnector,UnregisterClient;UnregisterClient;UnregisterClient,TInstantConnector;}
{\up A}{\footnote {\up A} TInstantConnector_UnregisterClient;UnregisterClient;UnregisterClient_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.UnregisterClient \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantConnector\strike0{\v Scribble3770>main}\tab\ul See Also\ulnone{\v Scribble4280} 
\par \pard\sb25\sa85\tx1435\fs18 Unregisters an object that uses the connector component.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  UnregisterClient(Client: TObject);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use UnregisterClient to remove an association between an object and the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4280}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.RegisterClient\strike0{\v Scribble4210>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4290}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnector.BeforeBuildDatabase}
{\up K}{\footnote {\up K} BeforeBuildDatabase;BeforeBuildDatabase,TInstantConnector;TInstantConnector,BeforeBuildDatabase;}
{\up A}{\footnote {\up A} BeforeBuildDatabase;BeforeBuildDatabase_Event;TInstantConnector_BeforeBuildDatabase}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnector.BeforeBuildDatabase \cf1\b0\fs16 
\par \cf2\strike TInstantConnector\cf3\strike0{\v Scribble3770>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs before the database is build.
\par \pard\sb25\sa25\b\f7 property\b0  BeforeBuildDatabase: \strike TInstantSchemeEvent\strike0{\v Scribble12530>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write a BeforeBuildDatabase event handler to take specific action before a database is build. The event is particularly useful if modifications or additions should be made to the database scheme like adding indices.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer}
{\up +}{\footnote {\up +} classessymbol:000210}
{\up K}{\footnote {\up K} TInstantContainer;}
{\up A}{\footnote {\up A} TInstantContainer;TInstantContainer_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\tx5680\ul Hierarchy\ulnone{\v Scribble4310}\tab\strike Members\strike0{\v Scribble4380>nav}\tab\strike Properties\strike0{\v Scribble4330>nav}\tab\strike Methods\strike0{\v Scribble4360>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantContainer is the ancestor of attribute classes that represent a relationship with multiple objects.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantContainer = \b class\b0 (\strike TInstantComplex\strike0{\v Scribble3190>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantContainer is the ancestor of attribute classes that represent a relationship with multiple objects. TInstantContainer introduces common properties and methods to:
\par \pard{\pntext\f6\'B7\tab}{\*\pn\pnlvlblt\pnf6\pnindent0{\pntxtb\'B7}}\fi-295\li495\sb25\sa25\tx480\strike Add\strike0{\v Scribble4450>main}, \strike Remove\strike0{\v Scribble4620>main} and find objects.
\par {\pntext\f6\'B7\tab}Load and Save the objects it represents from and to a stream.
\par \strike{\pntext\f6\'B7\tab}Sort\strike0{\v Scribble4660>main} objects
\par \pard\fi-295\li495\sb25\sa25\tx495 
\par \pard\sb25\sa25\tx480 TInstantContainer is abstract; so do not create instances of this class. Instead refer to the following concrete\f1  \f0 descendant classes: 
\par \pard\sb25\sa25\f2\fs10 
\par \pard\sb25\sa25\tx280\lang1033\b\f1\fs18\tab\lang1040\f0 Container attribute classes\ul 
\par \lang1033\ulnone\b0\f1\tab\lang1040\strike\f0 TInstantParts\strike0{\v Scribble9390>main}
\par \lang1033\f1\tab\lang1040\strike\f0 TInstantReferences\strike0{\v Scribble9780>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4310}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantContainer\strike0{\v Scribble4300>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4320}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantContainer Fields \cf1\b0\fs16 
\par \strike TInstantContainer\strike0{\v Scribble4300>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4330}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantContainer Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4340}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ChangeCount\strike0{\v Scribble4400>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Count\strike0{\v Scribble4410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Items\strike0{\v Scribble4430>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4340}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4350}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantContainer Events \cf1\b0\fs16 
\par \strike TInstantContainer\strike0{\v Scribble4300>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4360}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantContainer Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4370}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Add\strike0{\v Scribble4450>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble4470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble4480>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Delete\strike0{\v Scribble4490>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble4510>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Exchange\strike0{\v Scribble4520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasItem\strike0{\v Scribble4540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOf\strike0{\v Scribble4550>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Insert\strike0{\v Scribble4560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadObjectsFromStream\strike0{\v Scribble4580>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Move\strike0{\v Scribble4600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble4620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveObjectsToStream\strike0{\v Scribble4640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Sort\strike0{\v Scribble4660>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4370}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4380}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantContainer Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4390}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ChangeCount\strike0{\v Scribble4400>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Count\strike0{\v Scribble4410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Items\strike0{\v Scribble4430>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Add\strike0{\v Scribble4450>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble4470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble4480>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Delete\strike0{\v Scribble4490>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble4510>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Exchange\strike0{\v Scribble4520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasItem\strike0{\v Scribble4540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOf\strike0{\v Scribble4550>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Insert\strike0{\v Scribble4560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadObjectsFromStream\strike0{\v Scribble4580>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Move\strike0{\v Scribble4600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble4620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveObjectsToStream\strike0{\v Scribble4640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Sort\strike0{\v Scribble4660>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4390}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.ChangeCount}
{\up K}{\footnote {\up K} ChangeCount;ChangeCount,TInstantContainer;TInstantContainer,ChangeCount;}
{\up A}{\footnote {\up A} ChangeCount;ChangeCount_Property;TInstantContainer_ChangeCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.ChangeCount \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines the number of changed objects in the container.
\par \pard\sb25\sa25\b\f7 property\b0  ChangeCount: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use ChangeCount to determine the number of changed objects in the container. ChangeCount checks the IsChanged property of the individual objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Count}
{\up K}{\footnote {\up K} Count;Count,TInstantContainer;TInstantContainer,Count;}
{\up A}{\footnote {\up A} Count;Count_Property;TInstantContainer_Count}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Count \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4420} 
\par \pard\sb25\sa85\tx1435\fs18 Determines the number of objects the in the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Count: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use Count to determine the number of objects in the containers array of objects. Count is very useful in combination with the \strike Items\strike0{\v Scribble4430>main} property to iterate over the objects in the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4420}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Items\strike0{\v Scribble4430>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Items}
{\up K}{\footnote {\up K} Items;Items,TInstantContainer;TInstantContainer,Items;}
{\up A}{\footnote {\up A} Items;Items_Property;TInstantContainer_Items}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Items \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4440}
\par \pard\sb25\sa85\tx1435\fs18 Specifies a reference to an object at a given position in the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Items [\b Index\b0 : Integer]: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use Objects to obtain a reference or change a reference to an object at a specified position in the containers array of objects. The Index argument indicates the zero-based index of the object. Use Items with the \strike Count\strike0{\v Scribble4410>main} property to iterate through all of the objects in the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Count\strike0{\v Scribble4410>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Add}
{\up K}{\footnote {\up K} Add;Add,TInstantContainer;TInstantContainer,Add;}
{\up A}{\footnote {\up A} Add;Add_Method;TInstantContainer_Add}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Add \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4460}
\par \pard\sb25\sa85\tx1435\fs18 Adds an object to the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  Add(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Add to add an object at the end of the containers array of objects. If the object that is added does not comply with the validation rules of the attribute, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4460}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Insert\strike0{\v Scribble4560>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.AttachObject}
{\up K}{\footnote {\up K} AttachObject;AttachObject,TInstantContainer;TInstantContainer,AttachObject;}
{\up A}{\footnote {\up A} AttachObject;AttachObject_Method;TInstantContainer_AttachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.AttachObject \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Attaches an object to the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  AttachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Attaches the object specified by the AObject argument to the attribute.
\par For the descendant classes of TInstantComplex this implies: 
\par 
\par \pard\sb25\sa25\tx2300\ul\b Class\tab Action\f1                                                                                        \ulnone\b0\f0 
\par TInstantElement\tab AObject is assigned as the attributes Value
\par TInstantContainer\tab AObject is added to the objects array
\par \pard\sb25\sa25\tx3120 
\par If the object is successfully attached, the function returns True. Otherwise the function returns False.
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Clear}
{\up K}{\footnote {\up K} Clear;Clear,TInstantContainer;TInstantContainer,Clear;}
{\up A}{\footnote {\up A} Clear;Clear_Method;TInstantContainer_Clear}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Clear \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Clears the containers array of objects.
\par \pard\sb25\sa25\b\f7 procedure\b0  Clear;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Clear to clear the containers array of objects. The number of objects in the container will hereafter be zero.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4490}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Delete}
{\up K}{\footnote {\up K} Delete;Delete,TInstantContainer;TInstantContainer,Delete;}
{\up A}{\footnote {\up A} Delete;Delete_Method;TInstantContainer_Delete}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Delete \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4500} 
\par \pard\sb25\sa85\tx1435\fs18 Deletes an object from the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Delete(\b Index\b0 : Integer);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Delete to delete the object at the position specified by the zero-based Index argument from the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4500}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Remove\strike0{\v Scribble4620>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.DetachObject}
{\up K}{\footnote {\up K} DetachObject;DetachObject,TInstantContainer;TInstantContainer,DetachObject;}
{\up A}{\footnote {\up A} DetachObject;DetachObject_Method;TInstantContainer_DetachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.DetachObject \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Detaches an object from the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  DetachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description\b0 
\par \pard 
\par Detaches the object specified by the AObject argument from the attribute.
\par For the descendant classes of TInstantComplex this implies: 
\par 
\par \pard\tx2340\ul\b Class\tab Action\f1                                                                                                      \ulnone\b0\f0 
\par TInstantElement\tab if the attribute Value equals AObject, the Value is set to nil.
\par TInstantContainer\tab AObject is removed from the attributes array of objects.
\par \pard 
\par If the object is successfully detached, the function returns True. Otherwise the function returns False.
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Exchange}
{\up K}{\footnote {\up K} Exchange;Exchange,TInstantContainer;TInstantContainer,Exchange;}
{\up A}{\footnote {\up A} Exchange;Exchange_Method;TInstantContainer_Exchange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Exchange\cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4530} 
\par \pard\sb25\sa85\tx1435\fs18 Swaps the position of two objects in the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Exchange(Index1: Integer; Index2: Integer);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Exchange to swap the positions of the objects at positions specified by the zero-based Index1 and Index2 arguments in the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4530}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Move\strike0{\v Scribble4600>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.HasItem}
{\up K}{\footnote {\up K} HasItem;HasItem,TInstantContainer;TInstantContainer,HasItem;}
{\up A}{\footnote {\up A} HasItem;HasItem_Method;TInstantContainer_HasItem}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.HasItem \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines if an Item at a specified position is assigned.
\par \pard\sb25\sa25\b\f7 function\b0  HasItem(\b Index\b0 : Integer): Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call the HasItem method to Determine if the Item at the position in the \strike Items\strike0{\v Scribble4430>main} array specified by the Index argument is assigned. If the Item is assigned, HasItem returns true. The HasItem only checks the in memory reference to the Item.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4550}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.IndexOf}
{\up K}{\footnote {\up K} IndexOf;IndexOf,TInstantContainer;TInstantContainer,IndexOf;}
{\up A}{\footnote {\up A} IndexOf;IndexOf_Method;TInstantContainer_IndexOf}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.IndexOf \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Returns the index of a specified object in the containers array of objects.
\par \pard\sb25\sa25\b\f7 function\b0  IndexOf(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call IndexOf to get the zero-based index for a specified object in the containers array of objects. If an object is not found, IndexOf returns -1. If an object appears more than once, IndexOf returns the index of the first occurrence of the object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4560}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Insert}
{\up K}{\footnote {\up K} Insert;Insert,TInstantContainer;TInstantContainer,Insert;}
{\up A}{\footnote {\up A} Insert;Insert_Method;TInstantContainer_Insert}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Insert \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4570} 
\par \pard\sb25\sa85\tx1435\fs18 Adds an object at a given position in the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Insert(\b Index\b0 : Integer; AObject: \strike TInstantObject\strike0{\v Scribble7390>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Insert to add an object at a position specified by the zero-based Index argument. Insert adds the object at the specified position in the containers array of objects, shifting the object that previously occupied that position, and all subsequent objects, up. If the object that is inserted does not comply with the validation rules of the attribute, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4570}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Add\strike0{\v Scribble4450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4580}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.LoadObjectsFromStream}
{\up K}{\footnote {\up K} LoadObjectsFromStream;LoadObjectsFromStream,TInstantContainer;TInstantContainer,LoadObjectsFromStream;}
{\up A}{\footnote {\up A} LoadObjectsFromStream;LoadObjectsFromStream_Method;TInstantContainer_LoadObjectsFromStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.LoadObjectsFromStream \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4590} 
\par \pard\sb25\sa85\tx1435\fs18 Loads one or more object from a stream into the attribute.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  LoadObjectsFromStream(AStream: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call LoadObjectsFromStream to load one or more objects from a stream into the attribute. The stream that holds the objects is passed as the Stream argument. If the object in the stream does not comply with the validation rules of the attribute, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4590}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.SaveObjectsToStream\strike0{\v Scribble4640>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Move}
{\up K}{\footnote {\up K} Move;Move,TInstantContainer;TInstantContainer,Move;}
{\up A}{\footnote {\up A} Move;Move_Method;TInstantContainer_Move}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Move \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4610}
\par \pard\sb25\sa85\tx1435\fs18 Changes the position of an object in the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Move(CurIndex: Integer; NewIndex: Integer);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Move to move the object at the position specified by the CurIndex so that it afterwards occupies the position NewIndex. Both CurIndex and NewIndex are zero-base indexes into the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Exchange\strike0{\v Scribble4520>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4620}
{\up $}{\footnote {\up $} TInstantContainer.Remove}
{\up K}{\footnote {\up K} Remove;Remove,TInstantContainer;TInstantContainer,Remove;}
{\up A}{\footnote {\up A} Remove;Remove_Method;TInstantContainer_Remove}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Remove \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4630} 
\par \pard\sb25\sa85\tx1435\fs18 Removes an object from the containers array of objects.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  Remove(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Remove to remove an object from the containers array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Delete\strike0{\v Scribble4490>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.SaveObjectsToStream}
{\up K}{\footnote {\up K} SaveObjectsToStream;SaveObjectsToStream,TInstantContainer;TInstantContainer,SaveObjectsToStream;}
{\up A}{\footnote {\up A} SaveObjectsToStream;SaveObjectsToStream_Method;TInstantContainer_SaveObjectsToStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.SaveObjectsToStream \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantContainer\strike0{\v Scribble4300>main}\tab\ul See Also\ulnone{\v Scribble4650} 
\par \pard\sb25\sa85\tx1435\fs18 Saves the objects the attribute holds to a stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  SaveObjectsToStream(AStream: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call SaveObjectToStream to save the object the attribute holds to a stream. The stream that the object should be saved to is passed as the Stream argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4650}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.LoadObjectsFromStream\strike0{\v Scribble4580>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContainer.Sort}
{\up K}{\footnote {\up K} Sort;Sort,TInstantContainer;TInstantContainer,Sort;}
{\up A}{\footnote {\up A} Sort;Sort_Method;TInstantContainer_Sort}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContainer.Sort \cf1\b0\fs16 
\par \cf2\strike TInstantContainer\cf3\strike0{\v Scribble4300>main}\cf1 
\par \pard\sb25\sa85\fs18 Sorts the objects in the container based on comparison function.
\par \pard\sb25\sa25\b\f7 procedure\b0  Sort(Compare: \strike TInstantSortCompare\strike0{\v Scribble12540>main});
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Sort to QuickSort the objects in the container. Compare is a comparison function that indicates how the items are to be ordered.
\par 
\par \pard\plain\f5

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4670}
{\up $}{\footnote {\up $} TInstantCurrency}
{\up +}{\footnote {\up +} classessymbol:000220}
{\up K}{\footnote {\up K} TInstantCurrency;}
}
\viewkind4\uc1\pard\keepn\lang1033\b\fs24 TInstantCurrency\cf1\lang3081\b0\f2\fs18 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\tx5680\lang1040\ul\f0\fs16 Hierarchy\ulnone{\v Scribble4690}\tab\strike Members\strike0{\v Scribble4760>nav}\tab\strike Properties\strike0{\v Scribble4710>nav}\tab\ul See Also\ulnone{\v Scribble4680}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstant\lang1033\f1 Currency \lang1040\f0 represents a \lang1033\f1 Currency \lang1040\f0 value.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstant\lang1033\f8 Currency\lang1040\f7  = \b class\b0 (\strike TInstantNumeric\strike0{\v Scribble7290>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstant\lang1033\f1 Currency\lang1040\f0  holds a \lang1033\f1 Currency \lang1040\f0 as its value.
\par \pard\lang3081\f2 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4680}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantInteger\strike0{\v Scribble7070>main}
\par \strike TInstant\lang1033\f1 Float\lang1040\strike0\f0{\v Scribble6840>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}
\par \tab |
\par \strike TInstantCurrency\strike0{\v Scribble4670>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4700}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstant\lang1033\f1 Currency\lang1040\f0  Fields \cf1\b0\fs16  
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4710}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstant\lang1033\f1 Currency \lang1040\f0 Properties \cf1\b0\fs16 
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4720}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstant\lang1033\f1 Currency\lang1040\f0 
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6950>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4720}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4730}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstant\lang1033\f1 Currency\lang1040\f0  Events \cf1\b0\fs16 
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4740}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstant\lang1033\f1 Currency\lang1040\f0  Methods \cf1\b0\fs16 
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4750}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4760}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstant\lang1033\f1 Currency\lang1040\f0  Members \cf1\b0\fs16 
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4770}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble4780>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4770}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCurrency.Value}
{\up K}{\footnote {\up K} TInstantCurrency,Value;Value;Value,TInstantCurrency;}
{\up A}{\footnote {\up A} TInstantCurrency_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCurrency.Value \cf1\b0\fs16 
\par \cf2\strike TInstantCurrency\cf3\strike0{\v Scribble4670>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the Currency\lang1033\f1  \lang1040\f0 attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: Currency;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the Currency\lang1033\f1  \lang1040\f0 attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4790}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer}
{\up +}{\footnote {\up +} classessymbol:000230}
{\up K}{\footnote {\up K} TInstantCustomExposer;}
{\up A}{\footnote {\up A} TInstantCustomExposer;TInstantCustomExposer_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\cf2\ul Hierarchy\cf3\ulnone{\v Scribble4800}\cf1\tab\cf2\strike Members\cf3\strike0{\v Scribble4880>nav}\cf1\tab\cf2\strike Properties\cf3\strike0{\v Scribble4820>nav}\cf1\tab\cf2\strike Methods\cf3\strike0{\v Scribble4860>nav}\cf1\tab\cf2\strike Events\cf3\strike0{\v Scribble4840>nav}\cf1\tab\cf2\strike Unit: InstantPresentation\cf3\strike0{\v Scribble13100>main}\cf1
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 The ancestor of components that make objects accessible via data-aware controls.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantCustomExposer = \b class\b0 (TDataSet)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantCustomExposer is the ancestor of components that make objects accessible via standard data-aware controls by exposing the objects in rows and columns. The rows represent the individual objects and the columns represent properties of the objects.
\par TInstantCustomExposer is not limited to exposing instances of \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1  descendants but may expose instances of any class that has published properties. The object that is exposed is specified by the \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf1  property.
\par In addition to the \lang1033\f1 simple \lang1040\f0 published properties, any container attributes within an exposed object \lang1033\f1 can be made\lang1040\f0  available as nested datasets, if the object is a \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf1 .\lang1033\f1  See the \cf2\strike FieldOptions\cf3\strike0{\v Scribble4930>main}\cf1  property for more information.\lang1040\f0 
\par An exposer can expose a single object (object mode) or multiple objects (content mode), by setting the \cf2\strike Mode\cf3\strike0{\v Scribble5020>main}\cf1  property accordingly.
\par TInstantCustomExposer is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes: 
\par \pard\sb25\sa25\f2\fs10 
\par \pard\sb25\sa25\tx260\tx2840\tx4280\tx5720\lang1033\b\f1\fs18\tab\lang1040\f0 Concrete exposer classes\b0 
\par \lang1033\f1\tab\cf2\lang1040\strike\f0 TInstantExposer\cf3\strike0{\v Scribble6450>main}\cf1 
\par \lang1033\f1\tab\cf2\lang1040\strike\f0 TInstantSelector\cf3\strike0{\v Scribble10200>main}\cf1 
\par \pard 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4800}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TDataSet
\par \pard\li95\tx355\tab |
\par \strike TInstantCustomExposer\strike0{\v Scribble4790>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4810}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCustomExposer Fields \cf1\b0\fs16  
\par \strike TInstantCustomExposer\strike0{\v Scribble4790>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4820}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCustomExposer Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4830}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Accessor\strike0{\v Scribble4900>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ContainerName\strike0{\v Scribble4910>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CurrentObject\strike0{\v Scribble4920>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FieldOptions\strike0{\v Scribble4930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasSubject\strike0{\v Scribble4950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsChanged\strike0{\v Scribble4960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Is\lang1033\f1 Subject\lang1040\f0 Changed\strike0{\v Scribble4980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Limited\strike0{\v Scribble5000>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Mode\strike0{\v Scribble5020>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClass\strike0{\v Scribble5030>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClassName\strike0{\v Scribble5050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble5070>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble5090>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Options\strike0{\v Scribble5110>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ReadOnly\strike0{\v Scribble5120>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Sorted\strike0{\v Scribble5130>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Subject\strike0{\v Scribble5150>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike TotalCount\strike0{\v Scribble5160>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4830}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4840}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCustomExposer Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4850}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCompare\strike0{\v Scribble5520>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateObject\strike0{\v Scribble5540>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnFieldError\strike0{\v Scribble5550>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeField\strike0{\v Scribble5570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitField\strike0{\v Scribble5600>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitFieldDef\strike0{\v Scribble5620>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnLimit\strike0{\v Scribble5640>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4850}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4860}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCustomExposer Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4870}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble5180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ApplyChanges\strike0{\v Scribble5190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AssignFieldValue\strike0{\v Scribble5200>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble5210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble5230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble5240>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble5260>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble5280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetFieldStrings\strike0{\v Scribble5300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GotoObject\strike0{\v Scribble5310>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleFieldError\strike0{\v Scribble5320>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike IncludeField\strike0{\v Scribble5330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble5340>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitField\strike0{\v Scribble5350>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitFieldDef\strike0{\v Scribble5360>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble5370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFields\strike0{\v Scribble5380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike PostChanges\strike0{\v Scribble5390>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshCurrentObject\strike0{\v Scribble5400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshData\strike0{\v Scribble5410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReleaseObject\strike0{\v Scribble5420>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remember\strike0{\v Scribble5430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble5450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Reset\strike0{\v Scribble5470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Revert\strike0{\v Scribble5480>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Undo\strike0{\v Scribble5500>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantCustomExposer Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble4890}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Accessor\strike0{\v Scribble4900>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ContainerName\strike0{\v Scribble4910>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CurrentObject\strike0{\v Scribble4920>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FieldOptions\strike0{\v Scribble4930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasSubject\strike0{\v Scribble4950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsChanged\strike0{\v Scribble4960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Is\lang1033\f1 Subject\lang1040\f0 Changed\strike0{\v Scribble4980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Limited\strike0{\v Scribble5000>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Mode\strike0{\v Scribble5020>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClass\strike0{\v Scribble5030>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClassName\strike0{\v Scribble5050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble5070>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble5090>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Options\strike0{\v Scribble5110>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ReadOnly\strike0{\v Scribble5120>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Sorted\strike0{\v Scribble5130>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Subject\strike0{\v Scribble5150>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike TotalCount\strike0{\v Scribble5160>main}
\par \pard\sb55\sa55\tx355\b Events
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCompare\strike0{\v Scribble5520>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateObject\strike0{\v Scribble5540>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnFieldError\strike0{\v Scribble5550>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeField\strike0{\v Scribble5570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitField\strike0{\v Scribble5600>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitFieldDef\strike0{\v Scribble5620>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnLimit\strike0{\v Scribble5640>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble5180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ApplyChanges\strike0{\v Scribble5190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AssignFieldValue\strike0{\v Scribble5200>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble5210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble5230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble5240>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble5260>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble5280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetFieldStrings\strike0{\v Scribble5300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GotoObject\strike0{\v Scribble5310>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleFieldError\strike0{\v Scribble5320>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike IncludeField\strike0{\v Scribble5330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble5340>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitField\strike0{\v Scribble5350>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitFieldDef\strike0{\v Scribble5360>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble5370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFields\strike0{\v Scribble5380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike PostChanges\strike0{\v Scribble5390>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshCurrentObject\strike0{\v Scribble5400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshData\strike0{\v Scribble5410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReleaseObject\strike0{\v Scribble5420>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remember\strike0{\v Scribble5430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble5450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Reset\strike0{\v Scribble5470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Revert\strike0{\v Scribble5480>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Undo\strike0{\v Scribble5500>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4890}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4900}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Accessor}
{\up K}{\footnote {\up K} Accessor;Accessor,TInstantCustomExposer;TInstantCustomExposer,Accessor;}
{\up A}{\footnote {\up A} Accessor;Accessor_Property;TInstantCustomExposer_Accessor}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Accessor \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Holds the accessor that is currently being used by the exposer to access the subject.
\par \pard\sb25\sa25\b\f7 property\b0  Accessor: TInstantAccessor;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The subject being exposed by an exposer is accessed via an accessor. The purpose of the accessor is to give the exposer access to any object, regardless of its class, simply by using an accessor that is suitable for the object. The accessor allows the exposer to perform operations such as adding and removing contained objects as well as reading and writing properties of the subject or objects contained within it.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ContainerName}
{\up K}{\footnote {\up K} ContainerName;ContainerName,TInstantCustomExposer;TInstantCustomExposer,ContainerName;}
{\up A}{\footnote {\up A} ContainerName;ContainerName_Property;TInstantCustomExposer_ContainerName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ContainerName \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the name of the container whose objects are to be exposed.
\par \pard\sb25\sa25\b\f7 property\b0  ContainerName: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use ContainerName to specify the name of the container in the subject which contains the objects that are to be exposed. If the \strike Mode\strike0{\v Scribble5020>main} of the exposer is not amContent, ContainerName has no effect.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4920}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.CurrentObject}
{\up K}{\footnote {\up K} CurrentObject;CurrentObject,TInstantCustomExposer;TInstantCustomExposer,CurrentObject;}
{\up A}{\footnote {\up A} CurrentObject;CurrentObject_Property;TInstantCustomExposer_CurrentObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.CurrentObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the object at the current position of the exposer.
\par \pard\sb25\sa25\b\f7 property\b0  CurrentObject: TObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Each row of an exposer represents an object. When in content mode, the CurrentObject specifies the object at the current row of the exposer. In object mode, CurrentObject will always be\lang1033\f1  the\lang1040\f0  \strike Subject\strike0{\v Scribble5150>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.FieldOptions}
{\up K}{\footnote {\up K} FieldOptions;FieldOptions,TInstantCustomExposer;TInstantCustomExposer,FieldOptions;}
{\up A}{\footnote {\up A} FieldOptions;FieldOptions_Property;TInstantCustomExposer_FieldOptions}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.FieldOptions \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1\tab\cf2\ul See Also\cf3\ulnone{\v Scribble4940}\cf1
\par \pard\sb25\sa85\tx1435\fs18 Specifies what fields are created by default to access properties of exposed objects.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  FieldOptions: \cf2\strike TInstantFieldOptions\cf3\strike0{\v Scribble12390>main}\cf1 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The exposer uses dataset fields to access properties of exposed objects. The number of fields in an exposer influences the performance of the exposer; reducing the number of fields can increase performance. Simple published properties of the actual exposed object are always included. FieldOptions allow you to specify whether to include fields for object properties as well. In addition, you can specify whether to include published properties of the objects assigned to the object properties. To include or exclude fields for specific properties, refer to \cf2\strike OnIncludeField\cf3\strike0{\v Scribble5570>main}\cf1 .
\par \pard\sb25\sa25\f2\fs10 
\par \pard\sb25\sa25\tx1435\f0\fs18 The default \lang1033\f1 set of FieldO\lang1040\f0 ptions is [\f7 foThorough\f0 ].
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4940}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \cf2\strike TInstantCustomExposer.OnAddClassFieldDef\cf3\strike0{\v Scribble5510>main}\cf2\strike 
\par TInstantCustomExposer.OnIncludeField\cf3\strike0{\v Scribble5570>main}\cf1 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.HasSubject}
{\up K}{\footnote {\up K} HasSubject;HasSubject,TInstantCustomExposer;TInstantCustomExposer,HasSubject;}
{\up A}{\footnote {\up A} HasSubject;HasSubject_Property;TInstantCustomExposer_HasSubject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.HasSubject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies if the exposer has a subject
\par \pard\sb25\sa25\b\f7 property\b0  HasSubject: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasSubject to determine if the exposer has a subject.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4960}
{\up $}{\footnote {\up $} TInstantCustomExposer.IsChanged}
{\up K}{\footnote {\up K} IsChanged;IsChanged,TInstantCustomExposer;TInstantCustomExposer,IsChanged;}
{\up A}{\footnote {\up A} IsChanged;IsChanged_Property;TInstantCustomExposer_IsChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.IsChanged \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1\tab\ul See Also\ulnone{\v Scribble4970} 
\par \pard\sb25\sa85\fs18 Specifies if changes have been made to the expose\lang1033\f1 r's\lang1040\f0  \lang1033\f1 dataset fields or records\lang1040\f0 .
\par \pard\sb25\sa25\b\f7 property\b0  IsChanged: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If \lang1033\f1 dataset records\lang1040\f0  have been added or removed or any changes have been made to \lang1033\f1 their fields\lang1040\f0 , IsChanged is True. Otherwise IsChanged is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4970}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.\lang1033\f1 IsSubjectChanged\lang1040\strike0\f0{\v Scribble4980>main}
\par \strike 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4980}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.IsSubjectChanged}
{\up K}{\footnote {\up K} IsSubjectChanged;IsSubjectChanged,TInstantCustomExposer;TInstantCustomExposer,IsSubjectChanged;}
{\up A}{\footnote {\up A} IsSubjectChanged;IsSubjectChanged_Property;TInstantCustomExposer_IsSubjectChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.IsSubjectChanged \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1\tab\ul See Also\ulnone{\v Scribble4990} 
\par \pard\sb25\sa85\fs18 Specifies if changes have been made to the exposed subject.
\par \pard\sb25\sa25\b\f7 property\b0  IsSubjectChanged: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If objects have been added or removed or any changes have been made to the subject or any object within the subject, IsSubjectChanged is True. Otherwise IsSubjectChanged is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble4990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.\lang1033\f1 IsChanged\lang1040\strike0\f0{\v Scribble4960>main}
\par \strike 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Limited}
{\up K}{\footnote {\up K} Limited;Limited,TInstantCustomExposer;TInstantCustomExposer,Limited;}
{\up A}{\footnote {\up A} Limited;Limited_Property;TInstantCustomExposer_Limited}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Limited \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5010} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies whether a limited set of objects within an exposed container is accessible.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Limited: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 When Limited is True, only objects that pass the inclusion criteria specified by the \strike OnLimit\strike0{\v Scribble5640>main} event are accessible. If Limited is False all objects within the exposed container are included. The limited view is applied immediately when both Limited is set to True and \strike OnLimit\strike0{\v Scribble5640>main} is assigned.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5010}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.OnLimit\strike0{\v Scribble5640>main}
\par \strike TInstantCustomExposer.ObjectCount\strike0{\v Scribble5070>main}
\par \strike TInstantCustomExposer.TotalCount\strike0{\v Scribble5160>main}
\par \strike TInstantCustomExposer.Sorted\strike0{\v Scribble5130>main}
\par \strike TInstantCustomExposer.OnCompare\strike0{\v Scribble5520>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5020}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Mode}
{\up K}{\footnote {\up K} Mode;Mode,TInstantCustomExposer;TInstantCustomExposer,Mode;}
{\up A}{\footnote {\up A} Mode;Mode_Property;TInstantCustomExposer_Mode}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Mode \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies how the attached subject is being exposed.
\par \pard\sb25\sa25\b\f7 property\b0  Mode: \strike TInstantAccessMode\strike0{\v Scribble12100>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 An exposer can operate in one of two possible modes; object or content. The access mode specified in the Mode property determines the current mode of the exposer. When in object mode, the properties of the attached subject are available via dataset fields in the exposer. In content mode, the properties of objects contained in the subject are available instead. Content mode requires that the attached subject is either itself a container or that it has one or more containers that are accessible via a suitable accessor. In object mode, the exposer will have a fixed row count of one. In content mode, the number of rows will equal the number of objects in the specified container. Adding and deleting rows in content mode will result in objects being created and destroyed. Rows cannot be added nor deleted in object mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ObjectClass}
{\up K}{\footnote {\up K} ObjectClass;ObjectClass,TInstantCustomExposer;TInstantCustomExposer,ObjectClass;}
{\up A}{\footnote {\up A} ObjectClass;ObjectClass_Property;TInstantCustomExposer_ObjectClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ObjectClass\cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5040}\cf0\b  \cf1\b0
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClass: TClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The exposer uses dataset fields to access properties of exposed objects. ObjectClass specifies the common base class of the objects being exposed. By default, the accessor created by the exposer to access the subject will determine the class from the attached subject. \strike TInstantCustomExposer\strike0{\v Scribble4790>main} therefore introduces the ObjectClass property as read-only, but descendants may reintroduce this property as writable, allowing you to override the class determined by the accessor. \strike TInstantExposer\strike0{\v Scribble6450>main} is an example hereof.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5040}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ObjectClassName\strike0{\v Scribble5050>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ObjectClassName}
{\up K}{\footnote {\up K} ObjectClassName;ObjectClassName,TInstantCustomExposer;TInstantCustomExposer,ObjectClassName;}
{\up A}{\footnote {\up A} ObjectClassName;ObjectClassName_Property;TInstantCustomExposer_ObjectClassName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ObjectClassName \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5060}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class name of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClassName: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ObjectClassName specifies the name of the common class of the objects being exposed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5060}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ObjectClass\strike0{\v Scribble5030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5070}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ObjectCount}
{\up K}{\footnote {\up K} ObjectCount;ObjectCount,TInstantCustomExposer;TInstantCustomExposer,ObjectCount;}
{\up A}{\footnote {\up A} ObjectCount;ObjectCount_Property;TInstantCustomExposer_ObjectCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ObjectCount \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5080}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the number of objects currently being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectCount: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 In content mode, ObjectCount will reflect the number of objects currently accessible within the exposed container. In object mode, ObjectCount will always be 1.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5080}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.Objects\strike0{\v Scribble5090>main}
\par \strike TInstantCustomExposer.TotalCount\strike0{\v Scribble5160>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5090}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Objects}
{\up K}{\footnote {\up K} Objects;Objects,TInstantCustomExposer;TInstantCustomExposer,Objects;}
{\up A}{\footnote {\up A} Objects;Objects_Property;TInstantCustomExposer_Objects}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Objects \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5100} 
\par \pard\sb25\sa85\tx1435\fs18 Array representing the objects contained by the exposed container.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Objects [\b Index\b0 : Integer]: TObject;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use this zero-based array to access the exposed objects programmatically when in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5100}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ObjectCount\strike0{\v Scribble5070>main}
\par \strike TInstantCustomExposer.TotalCount\strike0{\v Scribble5160>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Options}
{\up K}{\footnote {\up K} Options;Options,TInstantCustomExposer;TInstantCustomExposer,Options;}
{\up A}{\footnote {\up A} Options;Options_Property;TInstantCustomExposer_Options}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Options \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the options of the exposer.
\par \pard\sb25\sa25\b\f7 property\b0  Options: \strike TInstantExposerOptions\strike0{\v Scribble12340>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use \lang1033\f1 the \lang1040\f0 Options \lang1033\f1 property \lang1040\f0 to specify the options \lang1033\f1 to modify aspects of the \lang1040\f0 exposer\lang1033\f1 's behavior\lang1040\f0 .
\par \lang1033\f1 The default set of options is [\lang1040\f0 eoAutoApply\lang1033\f1 , \lang1040\f2 eoAutoRemember\lang1033\f1 ].\lang1040\f0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5120}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ReadOnly}
{\up K}{\footnote {\up K} ReadOnly;ReadOnly,TInstantCustomExposer;TInstantCustomExposer,ReadOnly;}
{\up A}{\footnote {\up A} ReadOnly;ReadOnly_Property;TInstantCustomExposer_ReadOnly}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ReadOnly \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies whether the exposer is read-only or writable.
\par \pard\sb25\sa25\b\f7 property\b0  \b ReadOnly\b0 : Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ReadOnly determines whether the exposed objects can be modified through the exposer or not. If True, rows can be added or deleted and properties can be changed via their corresponding fields. If False, no changes can be made.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5130}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Sorted}
{\up K}{\footnote {\up K} Sorted;Sorted,TInstantCustomExposer;TInstantCustomExposer,Sorted;}
{\up A}{\footnote {\up A} Sorted;Sorted_Property;TInstantCustomExposer_Sorted}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Sorted \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5140} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies whether or not the exposed objects are sorted.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Sorted: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0\strike Objects\strike0{\v Scribble5090>main} in an exposed container can be sorted by assigning an \strike OnCompare\strike0{\v Scribble5520>main} event handler. The Sorted property determines whether sorting is enabled or not.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5140}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.OnCompare\strike0{\v Scribble5520>main}
\par \strike TInstantCustomExposer.Limited\strike0{\v Scribble5000>main}
\par \strike TInstantCustomExposer.OnLimit\strike0{\v Scribble5640>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Subject}
{\up K}{\footnote {\up K} Subject;Subject,TInstantCustomExposer;TInstantCustomExposer,Subject;}
{\up A}{\footnote {\up A} Subject;Subject_Property;TInstantCustomExposer_Subject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Subject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the object that is being exposed.
\par \pard\sb25\sa25\b\f7 property\b0  Subject: TObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Subject is the main object of the object(s) being exposed. The class of the subject is used to find a suitable accessor with which the exposer can access the subject or objects contained within it. Whether the subject itself or objects contained within it are exposed, is determined by the current \strike Mode\strike0{\v Scribble5020>main} of the exposer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.TotalCount}
{\up K}{\footnote {\up K} TInstantCustomExposer,TotalCount;TotalCount;TotalCount,TInstantCustomExposer;}
{\up A}{\footnote {\up A} TInstantCustomExposer_TotalCount;TotalCount;TotalCount_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.TotalCount \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5170} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the total number of objects in the currently exposed container.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  TotalCount: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 In content mode, TotalCount will reflect the total number of objects within the exposed container. In object mode, TotalCount will always be 1.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ObjectCount\strike0{\v Scribble5070>main}
\par \strike TInstantCustomExposer.Objects\strike0{\v Scribble5090>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.AddObject}
{\up K}{\footnote {\up K} AddObject;AddObject,TInstantCustomExposer;TInstantCustomExposer,AddObject;}
{\up A}{\footnote {\up A} AddObject;AddObject_Method;TInstantCustomExposer_AddObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.AddObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Adds an object to the exposed container.
\par \pard\sb25\sa25\b\f7 function\b0  AddObject(AObject: TObject): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The object passed in AObject is added to the end of the container that is currently being exposed. The exposer is updated to reflect the change, making the added object visible as the corresponding row of the dataset.
\par Calling this method is only valid when the exposer is in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ApplyChanges}
{\up K}{\footnote {\up K} ApplyChanges;ApplyChanges,TInstantCustomExposer;TInstantCustomExposer,ApplyChanges;}
{\up A}{\footnote {\up A} ApplyChanges;ApplyChanges_Method;TInstantCustomExposer_ApplyChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ApplyChanges \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Saves pending changes.
\par \pard\sb25\sa25\b\f7 procedure\b0  ApplyChanges;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Saves changes made to the subject or objects contained in the subject. For \strike TInstantObject\strike0{\v Scribble7390>main} descendants this means that the persistent storage is updated for each changed object. Deleted objects will be disposed from the persistent storage and new objects will be added.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5200}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.AssignFieldValue}
{\up K}{\footnote {\up K} AssignFieldValue;AssignFieldValue,TInstantCustomExposer;TInstantCustomExposer,AssignFieldValue;}
{\up A}{\footnote {\up A} AssignFieldValue;AssignFieldValue_Method;TInstantCustomExposer_AssignFieldValue}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.AssignFieldValue \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Applies a given value to a specified field of the exposer.
\par \pard\sb25\sa25\b\f7 procedure\b0  AssignFieldValue(Field: TField; Value: Variant);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use this method when side effects of setting a property of an exposed object involve setting related properties of the same object and the values of the related properties must be visible in data-aware controls immediately. Normally, data-aware controls such as TDBEdit do not save an edited value before exiting the control. For an exposer this means that the underlying property of an edit control is not changed until the control is left. For changes to happen immediately when editing a property via an edit control, call AssignFieldValue with the field and new value from an OnChange event of the control.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5210}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ChangesDisabled}
{\up K}{\footnote {\up K} ChangesDisabled;ChangesDisabled,TInstantCustomExposer;TInstantCustomExposer,ChangesDisabled;}
{\up A}{\footnote {\up A} ChangesDisabled;ChangesDisabled_Method;TInstantCustomExposer_ChangesDisabled}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ChangesDisabled \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5220} 
\par \pard\sb25\sa85\tx1435\fs18 Determines if the exposer responds to object changes.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  ChangesDisabled: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The ChangesDisabled property determines if the exposer responds to indirect modifications that occur to the objects is exposes. If the value of one of an objects attribute is changed, the object sends a notification. If ChangesDisabled is True, the exposer will not respond to such a notification and reflect the change that occurred. The mechanism is only effective when exposing \strike TInstantObject\strike0{\v Scribble7390>main} descendants.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5220}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.DisableChanges\strike0{\v Scribble5260>main}
\par \strike TInstantCustomExposer.EnableChanges\strike0{\v Scribble5280>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5230}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Clear}
{\up K}{\footnote {\up K} Clear;Clear,TInstantCustomExposer;TInstantCustomExposer,Clear;}
{\up A}{\footnote {\up A} Clear;Clear_Method;TInstantCustomExposer_Clear}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Clear \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Removes all objects from the exposed container.
\par \pard\sb25\sa25\b\f7 procedure\b0  Clear;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Removes all objects from the container that is currently being exposed. After calling this method, the exposer will be empty.
\par Calling this method is only valid when the exposer is in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5240}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.DeleteObject}
{\up K}{\footnote {\up K} DeleteObject;DeleteObject,TInstantCustomExposer;TInstantCustomExposer,DeleteObject;}
{\up A}{\footnote {\up A} DeleteObject;DeleteObject_Method;TInstantCustomExposer_DeleteObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.DeleteObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5250}
\par \pard\sb25\sa85\tx1435\fs18 Deletes an object from the exposer.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  DeleteObject(\b Index\b0 : Integer);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 DeleteObject deletes the object at the position specified by the Index argument from the exposer without disposing the object persistently.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5250}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.RemoveObject\strike0{\v Scribble5450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5260}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.DisableChanges}
{\up K}{\footnote {\up K} DisableChanges;DisableChanges,TInstantCustomExposer;TInstantCustomExposer,DisableChanges;}
{\up A}{\footnote {\up A} DisableChanges;DisableChanges_Method;TInstantCustomExposer_DisableChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.DisableChanges \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5270}
\par \pard\sb25\sa85\tx1435\fs18 Disables responding to object changes.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  DisableChanges;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Disables the exposer from responding to indirect object modifications. DisableChanges can be nested. Each call to DisableChanges should have a corresponding call to \strike EnableChanges\strike0{\v Scribble5280>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ChangesDisabled\strike0{\v Scribble5210>main}
\par \strike TInstantCustomExposer.EnableChanges\strike0{\v Scribble5280>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5280}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.EnableChanges}
{\up K}{\footnote {\up K} EnableChanges;EnableChanges,TInstantCustomExposer;TInstantCustomExposer,EnableChanges;}
{\up A}{\footnote {\up A} EnableChanges;EnableChanges_Method;TInstantCustomExposer_EnableChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.EnableChanges \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5290}
\par \pard\sb25\sa85\tx1435\fs18 Enables responding to object changes.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  EnableChanges;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Enables the exposer to respond to indirect object modifications. If the current disabled level is not nested, the call to EnableChanges enables responding. Otherwise EnableChanges only decrements the disabled nesting level.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.ChangesDisabled\strike0{\v Scribble5210>main}
\par \strike TInstantCustomExposer.DisableChanges\strike0{\v Scribble5260>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.GetFieldStrings}
{\up K}{\footnote {\up K} GetFieldStrings;GetFieldStrings,TInstantCustomExposer;TInstantCustomExposer,GetFieldStrings;}
{\up A}{\footnote {\up A} GetFieldStrings;GetFieldStrings_Method;TInstantCustomExposer_GetFieldStrings}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.GetFieldStrings \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Loads a string list with the possible values of the specified field.
\par \pard\sb25\sa25\b\f7 function\b0  GetFieldStrings(Field: TField; Strings: TStrings): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call this method to load all possible values of a given field into a pick list.
\par Returns the number of items added.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.GotoObject}
{\up K}{\footnote {\up K} GotoObject;GotoObject,TInstantCustomExposer;TInstantCustomExposer,GotoObject;}
{\up A}{\footnote {\up A} GotoObject;GotoObject_Method;TInstantCustomExposer_GotoObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.GotoObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Positions the exposer at a given object.
\par \pard\sb25\sa25\b\f7 function\b0  GotoObject(AObject: TObject): Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If AObject is found in the exposed container, the current row is set to the row representing it.
\par The method returns True if the object was found. Otherwise the function returns False.
\par The method is only effective if the exposer is in amContent mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.HandleFieldError}
{\up K}{\footnote {\up K} HandleFieldError;HandleFieldError,TInstantCustomExposer;TInstantCustomExposer,HandleFieldError;}
{\up A}{\footnote {\up A} HandleFieldError;HandleFieldError_Method;TInstantCustomExposer_HandleFieldError}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.HandleFieldError \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Handles errors occurred during read or write of field values.
\par \pard\sb25\sa25\b\f7 function\b0  HandleFieldError(E: Exception; Field: TField; Value: Variant; \b Write\b0 : Boolean): Boolean; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Override this method to perform special operations on specific errors that occur when reading or writing field values of the exposer. If Write is True, a write operation was performed, if False a read operation was performed. If writing was attempted, the value passed in Value was written to the field. The return value of the method indicates whether the exception was handled or not.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.IncludeField}
{\up K}{\footnote {\up K} IncludeField;IncludeField,TInstantCustomExposer;TInstantCustomExposer,IncludeField;}
{\up A}{\footnote {\up A} IncludeField;IncludeField_Method;TInstantCustomExposer_IncludeField}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.IncludeField \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Determines, if a field should be generated for the property with the specified fieldname.
\par \pard\sb25\sa25\b\f7 function\b0  IncludeField(FieldName: \b string\b0 ; \b Default\b0 : Boolean): Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 This method is called internally by the exposer to determine, if a field should be automatically generated for the property identified by the specified FieldName. FieldName contains the path to the property using dot-notation.
\par By default, only the field types specified by \strike FieldOptions\strike0{\v Scribble4930>main} are included. In addition, circular property references are avoided by excluding fields for multiple occurrences of the same relation.
\par Override this method to include or exclude specific fields when generating fields automatically.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.IndexOfObject}
{\up K}{\footnote {\up K} IndexOfObject;IndexOfObject,TInstantCustomExposer;TInstantCustomExposer,IndexOfObject;}
{\up A}{\footnote {\up A} IndexOfObject;IndexOfObject_Method;TInstantCustomExposer_IndexOfObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.IndexOfObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Returns the index of the specified object.
\par \pard\sb25\sa25\b\f7 function\b0  IndexOfObject(AObject: TObject): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If the object passed in AObject is found in the exposed container, its index is returned. Otherwise -1 is returned.
\par Calling this method is only valid when the exposer is in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.InitField}
{\up K}{\footnote {\up K} InitField;InitField,TInstantCustomExposer;TInstantCustomExposer,InitField;}
{\up A}{\footnote {\up A} InitField;InitField_Method;TInstantCustomExposer_InitField}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.InitField \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Initializes a field of the exposer.
\par \pard\sb25\sa25\b\f7 procedure\b0  InitField(Field: TField); \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Used internally by the exposer to initialize fields that have been generated to access properties of exposed objects.
\par Override this method to perform any special field initialization.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.InitFieldDef}
{\up K}{\footnote {\up K} InitFieldDef;InitFieldDef,TInstantCustomExposer;TInstantCustomExposer,InitFieldDef;}
{\up A}{\footnote {\up A} InitFieldDef;InitFieldDef_Method;TInstantCustomExposer_InitFieldDef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.InitFieldDef \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Initializes a field definition.
\par \pard\sb25\sa25\b\f7 procedure\b0  InitFieldDef(FieldDef: TFieldDef); \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Used internally by the exposer to initialize field definitions that have been generated to create fields for accessing properties of exposed objects.
\par Override this method to perform any special initialization of field definitions.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.InsertObject}
{\up K}{\footnote {\up K} InsertObject;InsertObject,TInstantCustomExposer;TInstantCustomExposer,InsertObject;}
{\up A}{\footnote {\up A} InsertObject;InsertObject_Method;TInstantCustomExposer_InsertObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.InsertObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Inserts an object into the exposed container.
\par \pard\sb25\sa25\b\f7 procedure\b0  InsertObject(AObject: TObject);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The object passed in AObject is inserted at the specified Index in the container that is currently being exposed. The exposer is updated to reflect the change, making the inserted object visible as the corresponding row of the dataset.
\par Calling this method is only valid when the exposer is in content mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.LoadFields}
{\up K}{\footnote {\up K} LoadFields;LoadFields,TInstantCustomExposer;TInstantCustomExposer,LoadFields;}
{\up A}{\footnote {\up A} LoadFields;LoadFields_Method;TInstantCustomExposer_LoadFields}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.LoadFields \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Loads fields from the current object.
\par \pard\sb25\sa25\b\f7 procedure\b0  LoadFields;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call LoadFields to load the field values from \strike CurrentObject\strike0{\v Scribble4920>main} into the active record buffer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.PostChanges}
{\up K}{\footnote {\up K} PostChanges;PostChanges,TInstantCustomExposer;TInstantCustomExposer,PostChanges;}
{\up A}{\footnote {\up A} PostChanges;PostChanges_Method;TInstantCustomExposer_PostChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.PostChanges \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Posts any changes made while in edit or insert mode.
\par \pard\sb25\sa25\b\f7 procedure\b0  PostChanges;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call this method to ensure that changes made during an edit or insert state are posted to the underlying object. If the exposer is in dsEdit or dsInsert mode, changes will be posted and the mode is set to dsBrowse.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.RefreshCurrentObject}
{\up K}{\footnote {\up K} RefreshCurrentObject;RefreshCurrentObject,TInstantCustomExposer;TInstantCustomExposer,RefreshCurrentObject;}
{\up A}{\footnote {\up A} RefreshCurrentObject;RefreshCurrentObject_Method;TInstantCustomExposer_RefreshCurrentObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.RefreshCurrentObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Refreshes the current object.
\par \pard\sb25\sa25\b\f7 procedure\b0  RefreshCurrentObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use RefreshCurrentObject to refresh the object that is currently being exposed. The method is only effective if the current object is a \strike TInstantObject\strike0{\v Scribble7390>main} instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.RefreshData}
{\up K}{\footnote {\up K} RefreshData;RefreshData,TInstantCustomExposer;TInstantCustomExposer,RefreshData;}
{\up A}{\footnote {\up A} RefreshData;RefreshData_Method;TInstantCustomExposer_RefreshData}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.RefreshData \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Performs a complete refresh.
\par \pard\sb25\sa25\b\f7 procedure\b0  RefreshData;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call the RefreshData to perform a complete refresh when the exposer is \strike Limited\strike0{\v Scribble5000>main} or \strike Sorted\strike0{\v Scribble5130>main}. RefreshData will destroy the current object view and regenerate it.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5420}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.ReleaseObject}
{\up K}{\footnote {\up K} ReleaseObject;ReleaseObject,TInstantCustomExposer;TInstantCustomExposer,ReleaseObject;}
{\up A}{\footnote {\up A} ReleaseObject;ReleaseObject_Method;TInstantCustomExposer_ReleaseObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.ReleaseObject \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa25\b\f7\fs18 procedure\b0  ReleaseObject(AObject: TObject);
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Remember}
{\up K}{\footnote {\up K} Remember;Remember,TInstantCustomExposer;TInstantCustomExposer,Remember;}
{\up A}{\footnote {\up A} Remember;Remember_Method;TInstantCustomExposer_Remember}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantCustomExposer.Remember \b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5440}
\par \pard\sb25\sa85\tx1435\fs18 Saves all fields of \strike CurrentObject\strike0{\v Scribble4920>main} internally making it possible to undo changes by calling \strike Revert\strike0{\v Scribble5480>main}.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Remember;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Changes made to properties of exposed objects through data-aware controls are written directly to the properties ensuring that any side effects are performed as well. This means that changes cannot be reverted simply by exiting edit or insert state with Cancel. Instead, it is necessary to call Remember prior to making changes via data-aware controls, if the changes need to be undone later. After calling Remember, changes can be reverted by calling \strike Revert\strike0{\v Scribble5480>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.Revert\strike0{\v Scribble5480>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.RemoveObject}
{\up K}{\footnote {\up K} RemoveObject;RemoveObject,TInstantCustomExposer;TInstantCustomExposer,RemoveObject;}
{\up A}{\footnote {\up A} RemoveObject;RemoveObject_Method;TInstantCustomExposer_RemoveObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.RemoveObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5460}
\par \pard\sb25\sa85\tx1435\fs18 Removes an object from the exposer.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  RemoveObject(AObject: TObject): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 RemoveObject removes an object from the exposer without disposing the object persistently.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5460}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.DeleteObject\strike0{\v Scribble5240>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Reset}
{\up K}{\footnote {\up K} Reset;Reset,TInstantCustomExposer;TInstantCustomExposer,Reset;}
{\up A}{\footnote {\up A} Reset;Reset_Method;TInstantCustomExposer_Reset}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Reset \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Completely resets the exposer.
\par \pard\sb25\sa25\b\f7 procedure\b0  Reset;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call this method to completely reset the exposer. Pending changes will be discarded and all fields will be re-created according to the current \strike ObjectClass\strike0{\v Scribble5030>main}. If the exposer was active prior to this call, it will be reopened. The exposer calls Reset internally when \strike Subject\strike0{\v Scribble5150>main} or \strike ObjectClass\strike0{\v Scribble5030>main} changes. It is normally not necessary to call this method explicitly.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Revert}
{\up K}{\footnote {\up K} Revert;Revert,TInstantCustomExposer;TInstantCustomExposer,Revert;}
{\up A}{\footnote {\up A} Revert;Revert_Method;TInstantCustomExposer_Revert}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Revert \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5490} 
\par \pard\sb25\sa85\tx1435\fs18 Revert the properties of \strike CurrentObject\strike0{\v Scribble4920>main} to the field values saved when \strike Remember\strike0{\v Scribble5430>main} was called.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Revert;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Revert lets you undo changes made to \strike CurrentObject\strike0{\v Scribble4920>main} via data-aware controls. All field values will be reverted to the values saved when calling \strike Remember\strike0{\v Scribble5430>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5490}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.Remember\strike0{\v Scribble5430>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.Undo}
{\up K}{\footnote {\up K} TInstantCustomExposer,Undo;Undo;Undo,TInstantCustomExposer;}
{\up A}{\footnote {\up A} TInstantCustomExposer_Undo;Undo;Undo_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.Undo \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Reverts pending changes.
\par \pard\sb25\sa25\b\f7 procedure\b0  Undo;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Undo to undo any pending changes when editing an object through the exposer. Undo reloads the attribute values of the object being edited.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnAddClassFieldDef}
{\up K}{\footnote {\up K} OnAddClassFieldDef;OnAddClassFieldDef,TInstantCustomExposer;TInstantCustomExposer,OnAddClassFieldDef;}
{\up A}{\footnote {\up A} OnAddClassFieldDef;OnAddClassFieldDef_Event;TInstantCustomExposer_OnAddClassFieldDef}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantCustomExposer.OnAddClassFieldDef \b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs every time a new \lang1033\f1 field definition\lang1040\f0  is created via the exposer.
\par \pard\sb25\sa25\b\f7 property\b0  On\lang1033\f8 AddClassFieldDef\lang1040\f7 : \cf2\strike TInstantAddClassFieldDefEvent\cf3\strike0{\v Scribble12090>main}\cf1 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnAddClassFieldDef\lang1033\f1  \lang1040\f0 event handler to \lang1033\f1 break out of the recursive creation process for field definitions\lang1040\f0 .\lang1033\f1  This event is particularly useful for improving exposer performance when \cf0\f5 f\lang3081 o\lang1033 Thorough is included in the exposer FieldO\cf1\f1 ptions property and there is a substantial heirarchy of container properties for the exposer's Subject.\lang1040\f0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnCompare}
{\up K}{\footnote {\up K} OnCompare;OnCompare,TInstantCustomExposer;TInstantCustomExposer,OnCompare;}
{\up A}{\footnote {\up A} OnCompare;OnCompare_Event;TInstantCustomExposer_OnCompare}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.OnCompare \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\strike Example 1\strike0{\v Scribble5530>example}
\par \pard\sb25\sa85\tx1435\fs18 Occurs for each object in an exposed container to determine its sorted position.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnCompare: \strike TInstantCompareObjectsEvent\strike0{\v Scribble12150>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnCompare event handler to decide the position of each object when the exposer is \strike Sorted\strike0{\v Scribble5130>main}.
\par Compare the sort values of the two passed objects and return the result in Compare: 
\par 
\par \ul\b Value\tab Meaning\f1                                                                    \ulnone\b0\f0 
\par < 0\tab Object1 is less than Object2
\par 0\tab Object1 equals Object2
\par > 0\tab Object1 is greater than Object2
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5530}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnCompare, Example 1}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer.OnCompare\cf3\strike0{\v Scribble5520}\cf1 
\par \pard\sb25\sa25\fs18 The following event handler will sort the TCustomer objects exposed by MyExposer by their Name property.
\par \pard\keep\f7 
\par procedure MyExposer.OnCompare(Object1, Object2: TObject; out Compare: Boolean);
\par begin
\par   Compare := AnsiCompareStr(TCustomer(Object1).Name, TCustomer(Object2).Name);
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnCreateObject}
{\up K}{\footnote {\up K} OnCreateObject;OnCreateObject,TInstantCustomExposer;TInstantCustomExposer,OnCreateObject;}
{\up A}{\footnote {\up A} OnCreateObject;OnCreateObject_Event;TInstantCustomExposer_OnCreateObject}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantCustomExposer.OnCreateObject \b0\fs16 
\par \cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1 
\par \pard\sb25\sa85\fs18 Occurs every time a new object is created via the exposer.
\par \pard\sb25\sa25\b\f7 property\b0  OnCreateObject: \strike TInstantCreateObjectEvent\strike0{\v Scribble12260>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 By default, an exposer creates an instance of \strike ObjectClass\strike0{\v Scribble5030>main} whenever a new row is inserted or appended to it. Write an OnCreateObject event handler to initialize the new object or to create an object of a more specialized class.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5550}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnFieldError}
{\up K}{\footnote {\up K} OnFieldError;OnFieldError,TInstantCustomExposer;TInstantCustomExposer,OnFieldError;}
{\up A}{\footnote {\up A} OnFieldError;OnFieldError_Event;TInstantCustomExposer_OnFieldError}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.OnFieldError \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5560}
\par \pard\sb25\sa85\tx1435\fs18 Occurs whenever reading from or writing to a field results in an error.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnFieldError: \strike TInstantFieldErrorEvent\strike0{\v Scribble12370>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnFieldError event handler to perform some operation on specific errors that occur during reading or writing of field values.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5560}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.HandleFieldError\strike0{\v Scribble5320>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5570}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnIncludeField}
{\up K}{\footnote {\up K} OnIncludeField;OnIncludeField,TInstantCustomExposer;TInstantCustomExposer,OnIncludeField;}
{\up A}{\footnote {\up A} OnIncludeField;OnIncludeField_Event;TInstantCustomExposer_OnIncludeField}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.OnIncludeField \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5580}\tab\strike Example 1\strike0{\v Scribble5590>example}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Occurs for every published property of the class specified by \strike ObjectClass\strike0{\v Scribble5030>main} or related classes to determine whether to create a corresponding field or not.
\par \pard\sb25\sa25\tx1435\tx2875\b\f7 property\b0  OnIncludeField: \strike TInstantIncludeFieldEvent\strike0{\v Scribble12430>main};
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\lang1033\b0\f1 T\lang1040\f0 he default fields generated to access properties of exposed objects are determined by \cf2\lang1033\strike\f1 Field\lang1040\f0 Options\cf3\strike0{\v Scribble4930}\cf1 . Write an OnIncludeField event handler to explicitly include or exclude fields for specific properties.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5580}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.IncludeField\strike0{\v Scribble5330>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5590}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnIncludeField, Example 1}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer.OnIncludeField\cf3\strike0{\v Scribble5570>main}\cf1 
\par \pard\sb25\sa25\fs18 The following code explicitly includes a field that would not have been included by default:
\par \pard\keep\f7 
\par procedure MyExposer.OnIncludeField(const FieldName: string; var Include: Boolean);
\par begin
\par   if SameText(FieldName, 'Address.Country.Name') then
\par     Include := True;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnInitField}
{\up K}{\footnote {\up K} OnInitField;OnInitField,TInstantCustomExposer;TInstantCustomExposer,OnInitField;}
{\up A}{\footnote {\up A} OnInitField;OnInitField_Event;TInstantCustomExposer_OnInitField}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantCustomExposer.OnInitField \b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5610} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs for every field generated by the exposer to initialize the field.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnInitField: \strike TInstantFieldEvent\strike0{\v Scribble12380>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnInitField event handler to perform special initialization of fields.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.InitField\strike0{\v Scribble5350>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnInitFieldDef}
{\up K}{\footnote {\up K} OnInitFieldDef;OnInitFieldDef,TInstantCustomExposer;TInstantCustomExposer,OnInitFieldDef;}
{\up A}{\footnote {\up A} OnInitFieldDef;OnInitFieldDef_Event;TInstantCustomExposer_OnInitFieldDef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.OnInitFieldDef \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\strike TInstantCustomExposer\cf3\strike0{\v Scribble4790>main}\cf1\tab\cf2\ul See Also\cf3\ulnone{\v Scribble5630}\cf1 
\par \pard\sb25\sa85\tx1435\fs18 Occurs for every field definition generated by the exposer.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnInitFieldDef: \cf2\strike TInstantFieldDefEvent\cf3\strike0{\v Scribble12360>main}\cf1 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnInitFieldDef event handler to perform special initialization of field definitions created by the exposer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.InitFieldDef\strike0{\v Scribble5360>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnLimit}
{\up K}{\footnote {\up K} OnLimit;OnLimit,TInstantCustomExposer;TInstantCustomExposer,OnLimit;}
{\up A}{\footnote {\up A} OnLimit;OnLimit_Event;TInstantCustomExposer_OnLimit}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCustomExposer.OnLimit \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\strike TInstantCustomExposer\strike0{\v Scribble4790>main}\tab\ul See Also\ulnone{\v Scribble5650}\tab\strike Example 1\strike0{\v Scribble5660>example}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Occurs for each object in an exposed container to decide whether to include the object or not.
\par \pard\sb25\sa25\tx1435\tx2875\b\f7 property\b0  OnLimit: \strike TInstantLimitObjectsEvent\strike0{\v Scribble12460>main};
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Write an OnLimit event handler to specify what objects to include in the dataset. Set Include to True to include the object passed in AObject, set it to False to exclude the object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5650}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.Limited\strike0{\v Scribble5000>main}
\par \strike TInstantCustomExposer.Sorted\strike0{\v Scribble5130>main}
\par \strike TInstantCustomExposer.OnCompare\strike0{\v Scribble5520>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5660}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantCustomExposer.OnLimit, Example 1}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \cf2\strike TInstantCustomExposer.OnLimit\cf3\strike0{\v Scribble5640>main}\cf1 
\par \pard\sb25\sa25\fs18 The following event handler will limit MyExposer to include only the customers in California.
\par \pard\keep\f7 
\par procedure MyExposer.OnLimit(AObject: TObject; var Include: Boolean);
\par begin
\par   Include := TCustomer(AObject).Address.State = 'CA';
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5670}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDateTime}
{\up +}{\footnote {\up +} classessymbol:000240}
{\up K}{\footnote {\up K} TInstantDateTime;}
{\up A}{\footnote {\up A} TInstantDateTime;TInstantDateTime_Object}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantDateTime \b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble5680}\tab\strike Members\strike0{\v Scribble5750>nav}\tab\strike Properties\strike0{\v Scribble5700>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantDateTime represents a TDateTime value.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantDateTime = \b class\b0 (\strike TInstantSimple\strike0{\v Scribble10430>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantDateTime holds a TDateTime as its value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5680}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantDateTime\strike0{\v Scribble5670>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5690}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDateTime Fields \cf1\b0\fs16 
\par \strike TInstantDateTime\strike0{\v Scribble5670>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5700}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDateTime Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantDateTime\strike0{\v Scribble5670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5710}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantDateTime
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble5770>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5720}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantDateTime Events \cf1\b0\fs16 
\par \strike TInstantDateTime\strike0{\v Scribble5670>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5730}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDateTime Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantDateTime\strike0{\v Scribble5670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5740}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5740}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5750}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDateTime Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantDateTime\strike0{\v Scribble5670>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5760}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble5770>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5760}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5770}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDateTime.Value}
{\up K}{\footnote {\up K} TInstantDateTime,Value;Value;Value,TInstantDateTime;}
{\up A}{\footnote {\up A} TInstantDateTime_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDateTime.Value \cf1\b0\fs16 
\par \cf2\strike TInstantDateTime\cf3\strike0{\v Scribble5670>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the value of the DateTime attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: TDateTime;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the DateTime attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector}
{\up +}{\footnote {\up +} classessymbol:000250}
{\up K}{\footnote {\up K} TInstantDBISAMConnector;}
{\up A}{\footnote {\up A} TInstantDBISAMConnector;TInstantDBISAMConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble5790}\tab\strike Members\strike0{\v Scribble5860>nav}\tab\strike Properties\strike0{\v Scribble5810>nav}\tab\strike Methods\strike0{\v Scribble5850>nav}\tab\strike Unit: InstantDBISAM\strike0{\v Scribble12910>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\sb25\sa25\tx280\lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Transaction control
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Information about the database
\par \lang1033\f1\tab\lang1040\f0\{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5790}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5800}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBISAMConnector Fields \cf1\b0\fs16  
\par \strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5810}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBISAMConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5820}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantDBISAMConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Database\strike0{\v Scribble5880>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Session\strike0{\v Scribble5890>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike SessionName\strike0{\v Scribble5910>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5820}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5830}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBISAMConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5840}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5840}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5850}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantDBISAMConnector Methods \cf1\b0\fs16 
\par \cf2\strike TInstantDBISAMConnector\cf3\strike0{\v Scribble5780>main}\cf1 
\par \pard\sb55\sa55\b\fs18 TInstantDBISAMConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasDatabase\strike0{\v Scribble5930>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasSession\strike0{\v Scribble5940>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5860}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBISAMConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5870}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Database\strike0{\v Scribble5880>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Session\strike0{\v Scribble5890>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike SessionName\strike0{\v Scribble5910>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasDatabase\strike0{\v Scribble5930>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasSession\strike0{\v Scribble5940>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5880}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector.Database}
{\up K}{\footnote {\up K} Database;Database,TInstantDBISAMConnector;TInstantDBISAMConnector,Database;}
{\up A}{\footnote {\up A} Database;Database_Property;TInstantDBISAMConnector_Database}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector.Database \cf1\b0\fs16 
\par \cf2\strike TInstantDBISAMConnector\cf3\strike0{\v Scribble5780>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the database used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Database: TDBISAMDatabase;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Database property to specify the database used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5890}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector.Session}
{\up K}{\footnote {\up K} Session;Session,TInstantDBISAMConnector;TInstantDBISAMConnector,Session;}
{\up A}{\footnote {\up A} Session;Session_Property;TInstantDBISAMConnector_Session}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector.Session \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}\tab\ul See Also\ulnone{\v Scribble5900} 
\par \pard\sb25\sa85\tx1435\fs18 Accesses the session component used by the database.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Session: TDBISAMSession;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use the Session property to access the session component used by the associated database component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5900}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantDBISAMConnector.Database\strike0{\v Scribble5880>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector.SessionName}
{\up K}{\footnote {\up K} SessionName;SessionName,TInstantDBISAMConnector;TInstantDBISAMConnector,SessionName;}
{\up A}{\footnote {\up A} SessionName;SessionName_Property;TInstantDBISAMConnector_SessionName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector.SessionName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}\tab\ul See Also\ulnone{\v Scribble5920} 
\par \pard\sb25\sa85\tx1435\fs18 Determines the session name.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  SessionName: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use the SessionName property to determine the SessionName of the \strike Session\strike0{\v Scribble5890>main}. If no \strike Session\strike0{\v Scribble5890>main} is associated with the \strike Database\strike0{\v Scribble5880>main}, SessionName is blank.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5920}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantDBISAMConnector.Session\strike0{\v Scribble5890>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector.HasDatabase}
{\up K}{\footnote {\up K} HasDatabase;HasDatabase,TInstantDBISAMConnector;TInstantDBISAMConnector,HasDatabase;}
{\up A}{\footnote {\up A} HasDatabase;HasDatabase_Method;TInstantDBISAMConnector_HasDatabase}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector.HasDatabase \cf1\b0\fs16 
\par \strike TInstantDBISAMConnector\strike0{\v Scribble5780>main} 
\par \pard\sb25\sa85\fs18 Determines if a database is associated with the connector.
\par \pard\sb25\sa25\b\f7 function\b0  HasDatabase: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasDatabase to determine if the \strike Database\strike0{\v Scribble5880>main} property of the connector is assigned. If a database component has been associated with the connector, HasDatabase returns True. Otherwise HasDatabase returns False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5940}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBISAMConnector.HasSession}
{\up K}{\footnote {\up K} HasSession;HasSession,TInstantDBISAMConnector;TInstantDBISAMConnector,HasSession;}
{\up A}{\footnote {\up A} HasSession;HasSession_Method;TInstantDBISAMConnector_HasSession}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBISAMConnector.HasSession \cf1\b0\fs16 
\par \strike TInstantDBISAMConnector\strike0{\v Scribble5780>main} 
\par \pard\sb25\sa85\fs18 Determines if a session is associated with the connector.
\par \pard\sb25\sa25\b\f7 function\b0  HasSession: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasSession to determine if the \strike Session\strike0{\v Scribble5890>main} property of the connector is assigned. If a session component has been associated with the connector, HasSession returns True. Otherwise HasSession returns False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDBXConnector}
{\up +}{\footnote {\up +} classessymbol:000260}
{\up K}{\footnote {\up K} TInstantDBXConnector;}
{\up A}{\footnote {\up A} TInstantDBXConnector;TInstantDBXConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDBXConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble5960}\tab\strike Unit: InstantDBX\strike0{\v Scribble12930>main} 
\par \pard\sb25\sa85\tx1435\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5960}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}
\par \tab |
\par \strike TInstantDBXConnector\strike0{\v Scribble5950>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5970}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBXConnector Fields \cf1\b0\fs16 
\par \strike TInstantDBXConnector\strike0{\v Scribble5950>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5980}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBXConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantDBXConnector\strike0{\v Scribble5950>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble5990}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble5990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6000}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBXConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantDBXConnector\strike0{\v Scribble5950>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6010}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6010}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6020}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantDBXConnector Methods \cf1\b0\fs16 
\par \strike TInstantDBXConnector\strike0{\v Scribble5950>main} 
\par \pard\sb55\sa55\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6030}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantDBXConnector Members \cf1\b0\fs16 
\par \strike TInstantDBXConnector\strike0{\v Scribble5950>main}\tab\ul Legend\ulnone{\v Scribble6040}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6040}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement}
{\up +}{\footnote {\up +} classessymbol:000270}
{\up K}{\footnote {\up K} TInstantElement;}
{\up A}{\footnote {\up A} TInstantElement;TInstantElement_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble6060}\tab\strike Members\strike0{\v Scribble6130>nav}\tab\strike Properties\strike0{\v Scribble6080>nav}\tab\strike Methods\strike0{\v Scribble6110>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantElement is the ancestor of attribute classes that represent a relationship with a single object.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantElement = \b class\b0 (\strike TInstantComplex\strike0{\v Scribble3190>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantElement is the ancestor of attribute classes that represent a relationship with a single object. TInstantElement introduces common properties and methods to:
\par \pard\fi-220\li460\sb25\sa25\tx480\{bmct bm3.BMP\}\tab Load and Save the object it represents from and to a stream.
\par \pard 
\par TInstantElement is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes: 
\par 
\par \pard\li220\b Element attribute classes\b0 
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6060}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantElement\strike0{\v Scribble6050>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6070}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantElement Fields \cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6080}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantElement Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantElement\strike0{\v Scribble6050>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6090}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6150>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6100}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantElement Events\cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main}\cf3\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6110}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantElement Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantElement\strike0{\v Scribble6050>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6120}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble6160>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble6170>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble6180>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike LoadObjectFromStream\strike0{\v Scribble6190>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike SaveObjectToStream\strike0{\v Scribble6210>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6130}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantElement Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantElement\strike0{\v Scribble6050>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6140}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6150>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble6160>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble6170>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble6180>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike LoadObjectFromStream\strike0{\v Scribble6190>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike SaveObjectToStream\strike0{\v Scribble6210>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6140}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.Value}
{\up K}{\footnote {\up K} TInstantElement,Value;Value;Value,TInstantElement;}
{\up A}{\footnote {\up A} TInstantElement_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.Value \cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main} 
\par \pard\sb25\sa85\fs18 Specifies the object that the attribute represents.
\par \pard\sb25\sa25\b\f7 property\b0  Value: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Value specifies the object that the attribute represents. The object is returned as a \strike TInstantObject\strike0{\v Scribble7390>main}. To access the object as its actual class type, Value should be cast to that type.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.AttachObject}
{\up K}{\footnote {\up K} AttachObject;AttachObject,TInstantElement;TInstantElement,AttachObject;}
{\up A}{\footnote {\up A} AttachObject;AttachObject_Method;TInstantElement_AttachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.AttachObject \cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main} 
\par \pard\sb25\sa85\fs18 Attaches an object to the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  AttachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 Attaches the object specified by the AObject argument to the attribute.
\par For the descendant classes of TInstantComplex this implies: 
\par 
\par \pard\tx2340\ul\b Class\tab Action\f1                                                                          \f0 
\par \ulnone\b0 TInstantElement\tab AObject is assigned as the attributes Value
\par TInstantContainer\tab AObject is added to the objects array
\par \pard 
\par If the object is successfully attached, the function returns True. Otherwise the function returns False.
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6170}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.DetachObject}
{\up K}{\footnote {\up K} DetachObject;DetachObject,TInstantElement;TInstantElement,DetachObject;}
{\up A}{\footnote {\up A} DetachObject;DetachObject_Method;TInstantElement_DetachObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.DetachObject \cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main} 
\par \pard\sb25\sa85\fs18 Detaches an object from the attribute.
\par \pard\sb25\sa25\b\f7 function\b0  DetachObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 Detaches the object specified by the AObject argument from the attribute.
\par For the descendant classes of TInstantComplex this implies: 
\par 
\par \pard\tx2220\ul\b Class\tab Action\f1                                                                                                 \ulnone\b0\f0 
\par TInstantElement\tab if the attribute Value equals AObject, the Value is set to nil.
\par TInstantContainer\tab AObject is removed from the attributes array of objects.
\par \pard 
\par If the object is successfully detached, the function returns True. Otherwise the function returns False.
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.HasValue}
{\up K}{\footnote {\up K} HasValue;HasValue,TInstantElement;TInstantElement,HasValue;}
{\up A}{\footnote {\up A} HasValue;HasValue_Method;TInstantElement_HasValue}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.HasValue \cf1\b0\fs16 
\par \strike TInstantElement\strike0{\v Scribble6050>main} 
\par \pard\sb25\sa85\fs18 Determines if the instance has been instantiated.
\par \pard\sb25\sa25\b\f7 function\b0  HasValue: Boolean; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasValue to determine if the instance associated with the element attribute has been instantiated. If the instance has been instantiated, HasValue returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.LoadObjectFromStream}
{\up K}{\footnote {\up K} LoadObjectFromStream;LoadObjectFromStream,TInstantElement;TInstantElement,LoadObjectFromStream;}
{\up A}{\footnote {\up A} LoadObjectFromStream;LoadObjectFromStream_Method;TInstantElement_LoadObjectFromStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.LoadObjectFromStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantElement\strike0{\v Scribble6050>main}\tab\ul See Also\ulnone{\v Scribble6200}
\par \pard\sb25\sa85\tx1435\fs18 Loads an object from a stream into the attribute.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  LoadObjectFromStream(AStream: TStream); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call LoadObjectFromStream to load an object from a stream into the attribute. The stream that holds the object is passed as the Stream argument. If the object in the stream does not comply with the validation rules of the attribute, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6200}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantElement.SaveObjectToStream\strike0{\v Scribble6210>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6210}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantElement.SaveObjectToStream}
{\up K}{\footnote {\up K} SaveObjectToStream;SaveObjectToStream,TInstantElement;TInstantElement,SaveObjectToStream;}
{\up A}{\footnote {\up A} SaveObjectToStream;SaveObjectToStream_Method;TInstantElement_SaveObjectToStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantElement.SaveObjectToStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantElement\strike0{\v Scribble6050>main}\tab\ul See Also\ulnone{\v Scribble6220}
\par \pard\sb25\sa85\tx1435\fs18 Saves the object the attribute represents to a stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  SaveObjectToStream(AStream: TStream); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call SaveObjectToStream to save the object the attribute represents to a stream. The stream that the object should be saved to is passed as the Stream argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6220}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantElement.LoadObjectFromStream\strike0{\v Scribble6190>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6230}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer}
{\up +}{\footnote {\up +} classessymbol:000280}
{\up K}{\footnote {\up K} TInstantExplorer;}
{\up A}{\footnote {\up A} TInstantExplorer;TInstantExplorer_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble6240}\tab\strike Members\strike0{\v Scribble6300>nav}\tab\strike Properties\strike0{\v Scribble6260>nav}\tab\strike Methods\strike0{\v Scribble6290>nav}\tab\strike Unit: InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Allows navigation of objects within a tree.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantExplorer = \b class\b0 (TCustomControl)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 The Explorer contains a tree view by which the user can navigate objects and their relations.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6240}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TCustomControl
\par \pard\li95\tx355\tab |
\par \strike TInstantExplorer\strike0{\v Scribble6230>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6250}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExplorer Fields \cf1\b0\fs16  
\par \strike TInstantExplorer\strike0{\v Scribble6230>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6260}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExplorer Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantExplorer\strike0{\v Scribble6230>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6270}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantExplorer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AutoAdjust\strike0{\v Scribble6320>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Layout\strike0{\v Scribble6330>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike NodeTypes\strike0{\v Scribble6340>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnChangeNode\strike0{\v Scribble6350>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateNode\strike0{\v Scribble6360>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateNodeData\strike0{\v Scribble6370>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetImageIndex\strike0{\v Scribble6380>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetNodeText\strike0{\v Scribble6390>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeNode\strike0{\v Scribble6400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RootObject\strike0{\v Scribble6410>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ShowRoot\strike0{\v Scribble6420>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6280}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantExplorer Events \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6290}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantExplorer Methods \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb55\sa55\b\fs18 TInstantExplorer
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble6430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Refresh\strike0{\v Scribble6440>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6300}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExplorer Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantExplorer\strike0{\v Scribble6230>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6310}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AutoAdjust\strike0{\v Scribble6320>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Layout\strike0{\v Scribble6330>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike NodeTypes\strike0{\v Scribble6340>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnChangeNode\strike0{\v Scribble6350>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateNode\strike0{\v Scribble6360>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateNodeData\strike0{\v Scribble6370>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetImageIndex\strike0{\v Scribble6380>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetNodeText\strike0{\v Scribble6390>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeNode\strike0{\v Scribble6400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RootObject\strike0{\v Scribble6410>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ShowRoot\strike0{\v Scribble6420>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble6430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Refresh\strike0{\v Scribble6440>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6310}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.AutoAdjust}
{\up K}{\footnote {\up K} AutoAdjust;AutoAdjust,TInstantExplorer;TInstantExplorer,AutoAdjust;}
{\up A}{\footnote {\up A} AutoAdjust;AutoAdjust_Property;TInstantExplorer_AutoAdjust}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.AutoAdjust \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Determines if the explorer is automatically adjusted.
\par \pard\sb25\sa25\b\f7 property\b0  AutoAdjust: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 When AutoAdjust is True the explorer automatically resizes the tree and the detail view to the same height or width when the explorer is resized.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.Layout}
{\up K}{\footnote {\up K} Layout;Layout,TInstantExplorer;TInstantExplorer,Layout;}
{\up A}{\footnote {\up A} Layout;Layout_Property;TInstantExplorer_Layout}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.Layout \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Determines the layout of the explorer.
\par \pard\sb25\sa25\b\f7 property\b0  Layout: \strike TInstantExplorerLayout\strike0{\v Scribble12310>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Set Layout to specify whether to include a detail view and how the detail view should be displayed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.NodeTypes}
{\up K}{\footnote {\up K} NodeTypes;NodeTypes,TInstantExplorer;TInstantExplorer,NodeTypes;}
{\up A}{\footnote {\up A} NodeTypes;NodeTypes_Property;TInstantExplorer_NodeTypes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.NodeTypes \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Determines which node types to include in the explorer.
\par \pard\sb25\sa25\b\f7 property\b0  NodeTypes: \strike TInstantExplorerNodeTypes\strike0{\v Scribble12330>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Only the node types specified in NodeTypes will be included in the explorer. By default all node types are included.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnChangeNode}
{\up K}{\footnote {\up K} OnChangeNode;OnChangeNode,TInstantExplorer;TInstantExplorer,OnChangeNode;}
{\up A}{\footnote {\up A} OnChangeNode;OnChangeNode_Property;TInstantExplorer_OnChangeNode}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnChangeNode \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs when the selected node changes.
\par \pard\sb25\sa25\b\f7 property\b0  OnChangeNode: TInstantExplorerNodeEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnChangeNode event handler to perform special operations when the selected node is changed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnCreateNode}
{\up K}{\footnote {\up K} OnCreateNode;OnCreateNode,TInstantExplorer;TInstantExplorer,OnCreateNode;}
{\up A}{\footnote {\up A} OnCreateNode;OnCreateNode_Property;TInstantExplorer_OnCreateNode}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnCreateNode \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs when the explorer creates a new node.
\par \pard\sb25\sa25\b\f7 property\b0  OnCreateNode: TInstantExplorerCreateNodeEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 When navigating through the explorer, nodes are created as required. Write an OnCreateNode event handler to control the creation of new nodes in the tree.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnCreateNodeData}
{\up K}{\footnote {\up K} OnCreateNodeData;OnCreateNodeData,TInstantExplorer;TInstantExplorer,OnCreateNodeData;}
{\up A}{\footnote {\up A} OnCreateNodeData;OnCreateNodeData_Property;TInstantExplorer_OnCreateNodeData}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnCreateNodeData \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs when the explorer creates data for a node.
\par \pard\sb25\sa25\b\f7 property\b0  OnCreateNodeData: TInstantExplorerCreateNodeDataEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The data of a node describes the node and the object associated with the node. Write an OnCreateNodeData event handler to control the creation of node data.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnGetImageIndex}
{\up K}{\footnote {\up K} OnGetImageIndex;OnGetImageIndex,TInstantExplorer;TInstantExplorer,OnGetImageIndex;}
{\up A}{\footnote {\up A} OnGetImageIndex;OnGetImageIndex_Property;TInstantExplorer_OnGetImageIndex}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnGetImageIndex \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs when determining the image of a node.
\par \pard\sb25\sa25\b\f7 property\b0  OnGetImageIndex: TInstantExplorerNodeEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnGetImageIndex event handler to control what image to use for a given node.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnGetNodeText}
{\up K}{\footnote {\up K} OnGetNodeText;OnGetNodeText,TInstantExplorer;TInstantExplorer,OnGetNodeText;}
{\up A}{\footnote {\up A} OnGetNodeText;OnGetNodeText_Property;TInstantExplorer_OnGetNodeText}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnGetNodeText \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs when determining the text of a node.
\par \pard\sb25\sa25\b\f7 property\b0  OnGetNodeText: TInstantExplorerGetNodeTextEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnGetText event handler to control the text of a given node.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.OnIncludeNode}
{\up K}{\footnote {\up K} OnIncludeNode;OnIncludeNode,TInstantExplorer;TInstantExplorer,OnIncludeNode;}
{\up A}{\footnote {\up A} OnIncludeNode;OnIncludeNode_Property;TInstantExplorer_OnIncludeNode}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.OnIncludeNode \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Occurs for every node to determine whether to include the node or not.
\par \pard\sb25\sa25\b\f7 property\b0  OnIncludeNode: TInstantExplorerIncludeNodeEvent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnIncludeNode event handler to control what nodes to include in addition to the \strike NodeTypes\strike0{\v Scribble6340>main} property.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.RootObject}
{\up K}{\footnote {\up K} RootObject;RootObject,TInstantExplorer;TInstantExplorer,RootObject;}
{\up A}{\footnote {\up A} RootObject;RootObject_Property;TInstantExplorer_RootObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.RootObject \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Specifies the object in the root of the explorer.
\par \pard\sb25\sa25\b\f7 property\b0  RootObject: TObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Assign an object to this property to start exploring from the object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6420}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.ShowRoot}
{\up K}{\footnote {\up K} ShowRoot;ShowRoot,TInstantExplorer;TInstantExplorer,ShowRoot;}
{\up A}{\footnote {\up A} ShowRoot;ShowRoot_Property;TInstantExplorer_ShowRoot}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.ShowRoot \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Determines if the root object is visible or not.
\par \pard\sb25\sa25\b\f7 property\b0  ShowRoot: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 If you do not want the root object to be represented by a node in the tree, set ShowRoot to False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.Clear}
{\up K}{\footnote {\up K} Clear;Clear,TInstantExplorer;TInstantExplorer,Clear;}
{\up A}{\footnote {\up A} Clear;Clear_Method;TInstantExplorer_Clear}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.Clear \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Clears the explorer.
\par \pard\sb25\sa25\b\f7 procedure\b0  Clear;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Clear to clear the content of the explorer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6440}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorer.Refresh}
{\up K}{\footnote {\up K} Refresh;Refresh,TInstantExplorer;TInstantExplorer,Refresh;}
{\up A}{\footnote {\up A} Refresh;Refresh_Method;TInstantExplorer_Refresh}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorer.Refresh \cf1\b0\fs16 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main} 
\par \pard\sb25\sa85\fs18 Refreshes the explorer.
\par \pard\sb25\sa25\b\f7 procedure\b0  Refresh;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Refresh to rebuild the nodes of the explorer from the root object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer}
{\up +}{\footnote {\up +} classessymbol:000290}
{\up K}{\footnote {\up K} TInstantExposer;}
{\up A}{\footnote {\up A} TInstantExposer;TInstantExposer_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble6460}\tab\strike Members\strike0{\v Scribble6540>nav}\tab\strike Properties\strike0{\v Scribble6480>nav}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Provides dataset-based access to objects.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantExposer = \b class\b0 (\strike TInstantCustomExposer\strike0{\v Scribble4790>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantExposer provides dataset-based access to objects. The exposed objects are represented as rows and their published properties are represented as columns. The object that is to be exposed is specified at runtime by the \strike Subject\strike0{\v Scribble6650>main} property. The exposer is capable of either exposing the published properties of the subject itself or, if the subject is a container, the published properties of the objects contained in the subject. The way, the subject is exposed is specified by the \strike Mode\strike0{\v Scribble6600>main} property. If the subject has multiple containers, as \strike TInstantObject\strike0{\v Scribble7390>main} instances may have, the name of the container is specified by the \strike ContainerName\strike0{\v Scribble6560>main} property.
\par Master-Detail relationships can be defined using the \strike MasterSource\strike0{\v Scribble6580>main}, \strike MasterProperty\strike0{\v Scribble6570>main} and \strike ContainerName\strike0{\v Scribble6560>main} properties.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6460}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TDataSet
\par \pard\li95\tx355\tab |
\par \strike TInstantCustomExposer\strike0{\v Scribble4790>main}
\par \tab |
\par \strike TInstantExposer\strike0{\v Scribble6450>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6470}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExposer Fields \cf1\b0\fs16 
\par \strike TInstantExposer\strike0{\v Scribble6450>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6480}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExposer Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6490}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ContainerName\strike0{\v Scribble6560>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MasterProperty\strike0{\v Scribble6570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MasterSource\strike0{\v Scribble6580>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Mode\strike0{\v Scribble6600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ObjectClass\strike0{\v Scribble6610>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ObjectClassName\strike0{\v Scribble6630>main}
\par \{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike Subject\strike0{\v Scribble6650>main}
\par \pard\sb55\sa55\tx355\b TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Accessor\strike0{\v Scribble4900>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ContainerName\strike0{\v Scribble4910>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CurrentObject\strike0{\v Scribble4920>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FieldOptions\strike0{\v Scribble4930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasSubject\strike0{\v Scribble4950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsChanged\strike0{\v Scribble4980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Limited\strike0{\v Scribble5000>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Mode\strike0{\v Scribble5020>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClass\strike0{\v Scribble5030>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClassName\strike0{\v Scribble5050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble5070>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble5090>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Options\strike0{\v Scribble5110>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ReadOnly\strike0{\v Scribble5120>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Sorted\strike0{\v Scribble5130>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Subject\strike0{\v Scribble5150>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike TotalCount\strike0{\v Scribble5160>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6490}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6500}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExposer Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6510}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCompare\strike0{\v Scribble5520>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateObject\strike0{\v Scribble5540>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnFieldError\strike0{\v Scribble5550>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeField\strike0{\v Scribble5570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitField\strike0{\v Scribble5600>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitFieldDef\strike0{\v Scribble5620>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnLimit\strike0{\v Scribble5640>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6520}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExposer Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6530}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble5180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ApplyChanges\strike0{\v Scribble5190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AssignFieldValue\strike0{\v Scribble5200>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble5210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble5230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble5240>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble5260>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble5280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetFieldStrings\strike0{\v Scribble5300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GotoObject\strike0{\v Scribble5310>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleFieldError\strike0{\v Scribble5320>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike IncludeField\strike0{\v Scribble5330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble5340>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitField\strike0{\v Scribble5350>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitFieldDef\strike0{\v Scribble5360>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble5370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFields\strike0{\v Scribble5380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike PostChanges\strike0{\v Scribble5390>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshCurrentObject\strike0{\v Scribble5400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshData\strike0{\v Scribble5410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReleaseObject\strike0{\v Scribble5420>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remember\strike0{\v Scribble5430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble5450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Reset\strike0{\v Scribble5470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Revert\strike0{\v Scribble5480>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Undo\strike0{\v Scribble5500>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6530}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6540}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantExposer Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6550}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ContainerName\strike0{\v Scribble6560>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MasterProperty\strike0{\v Scribble6570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MasterSource\strike0{\v Scribble6580>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Mode\strike0{\v Scribble6600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ObjectClass\strike0{\v Scribble6610>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ObjectClassName\strike0{\v Scribble6630>main}
\par \{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike Subject\strike0{\v Scribble6650>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6550}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6560}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.ContainerName}
{\up K}{\footnote {\up K} ContainerName;ContainerName,TInstantExposer;TInstantExposer,ContainerName;}
{\up A}{\footnote {\up A} ContainerName;ContainerName_Property;TInstantExposer_ContainerName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.ContainerName \cf1\b0\fs16 
\par \strike TInstantExposer\strike0{\v Scribble6450>main} 
\par \pard\sb25\sa85\fs18 Specifies the name of the container whose objects are to be exposed.
\par \pard\sb25\sa25\b\f7 property\b0  ContainerName;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use ContainerName to specify the name of the container in the subject which contains the objects that are to be exposed. If the Mode of the exposer is not amContent, ContainerName has no effect.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6570}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.MasterProperty}
{\up K}{\footnote {\up K} MasterProperty;MasterProperty,TInstantExposer;TInstantExposer,MasterProperty;}
{\up A}{\footnote {\up A} MasterProperty;MasterProperty_Property;TInstantExposer_MasterProperty}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.MasterProperty \cf1\b0\fs16 
\par \strike TInstantExposer\strike0{\v Scribble6450>main} 
\par \pard\sb25\sa85\fs18 Specifies the master property for a detail exposer in a master-detail relationship.
\par \pard\sb25\sa25\b\f7 property\b0  MasterProperty: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use MasterProperty to specify the master property for a detail exposer in a master-detail relationship. The MasterProperty specifies the property of the master exposers CurrentObject that should serve as \strike Subject\strike0{\v Scribble6650>main} for detail exposer. If no masterproperty is specified, the \strike Subject\strike0{\v Scribble6650>main} of the detail exposer will be the CurrentObject of the master exposer.
\par MasterProperty is only used if a \strike MasterSource\strike0{\v Scribble6580>main} is specified.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6580}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.MasterSource}
{\up K}{\footnote {\up K} MasterSource;MasterSource,TInstantExposer;TInstantExposer,MasterSource;}
{\up A}{\footnote {\up A} MasterSource;MasterSource_Property;TInstantExposer_MasterSource}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.MasterSource \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\ul See Also\ulnone{\v Scribble6590}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the name of the master data source to use for establishing a master-detail relationship.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  MasterSource: TDataSource;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 MasterSource specifies the name of the data source component whose DataSet property identifies the exposer used as the Master exposer. An exposer that defines a MasterSource becomes a detail exposer. The detail exposer exposes the details of the CurrentObject of the master exposer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6590}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantExposer.MasterProperty\strike0{\v Scribble6570>main}
\par \strike TInstantExposer.ContainerName\strike0{\v Scribble6560>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6600}
{\up $}{\footnote {\up $} TInstantExposer.Mode}
{\up K}{\footnote {\up K} Mode;Mode,TInstantExposer;TInstantExposer,Mode;}
{\up A}{\footnote {\up A} Mode;Mode_Property;TInstantExposer_Mode}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.Mode \cf1\b0\fs16 
\par \strike TInstantExposer\strike0{\v Scribble6450>main} 
\par \pard\sb25\sa85\fs18 Specifies how the attached subject is being exposed.
\par \pard\sb25\sa25\b\f7 property\b0  Mode;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 An exposer can operate in one of two possible modes; object or content. The access mode specified in the Mode property determines the current mode of the exposer. When in object mode, the properties of the attached subject are available via dataset fields in the exposer. In content mode, the properties of objects contained in the subject are available instead. Content mode requires that the attached subject is either itself a container or that it has one or more containers that are accessible via a suitable accessor. In object mode, the exposer will have a fixed row count of one. In content mode, the number of rows will equal the number of objects in the specified container. Adding and deleting rows in content mode will result in objects being created and destroyed. Rows cannot be added nor deleted in object mode.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6610}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.ObjectClass}
{\up K}{\footnote {\up K} ObjectClass;ObjectClass,TInstantExposer;TInstantExposer,ObjectClass;}
{\up A}{\footnote {\up A} ObjectClass;ObjectClass_Property;TInstantExposer_ObjectClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.ObjectClass \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\ul See Also\ulnone{\v Scribble6620} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The exposer uses dataset fields to access properties of exposed objects. ObjectClass specifies the common base class of the objects being exposed. By default, the accessor created by the exposer to access the subject will determine the class from the attached subject. TInstantCustomExposer therefore introduces the ObjectClass property as read-only, but descendants may reintroduce this property as writable, allowing you to override the class determined by the accessor. TInstantExposer is an example hereof.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6620}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantExposer.ObjectClassName\strike0{\v Scribble6630>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6630}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.ObjectClassName}
{\up K}{\footnote {\up K} ObjectClassName;ObjectClassName,TInstantExposer;TInstantExposer,ObjectClassName;}
{\up A}{\footnote {\up A} ObjectClassName;ObjectClassName_Property;TInstantExposer_ObjectClassName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.ObjectClassName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantExposer\strike0{\v Scribble6450>main}\tab\ul See Also\ulnone{\v Scribble6640} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class name of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClassName;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ObjectClassName specifies the name of the common class of the objects being exposed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6640}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantExposer.ObjectClass\strike0{\v Scribble6610>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposer.Subject}
{\up K}{\footnote {\up K} Subject;Subject,TInstantExposer;TInstantExposer,Subject;}
{\up A}{\footnote {\up A} Subject;Subject_Property;TInstantExposer_Subject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExposer.Subject \cf1\b0\fs16 
\par \strike TInstantExposer\strike0{\v Scribble6450>main} 
\par \pard\sb25\sa85\fs18 Specifies the object that is being exposed.
\par \pard\sb25\sa25\b\f7 property\b0  Subject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Subject is the main object of the object(s) being exposed. The class of the subject is used to find a suitable accessor with which the exposer can access the subject or objects contained within it. Whether the subject itself or objects contained within it are exposed, is determined by the current Mode of the exposer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFileStream}
{\up +}{\footnote {\up +} classessymbol:000300}
{\up K}{\footnote {\up K} TInstantFileStream;}
{\up A}{\footnote {\up A} TInstantFileStream;TInstantFileStream_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFileStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble6670}\tab\strike Members\strike0{\v Scribble6720>nav}\tab\strike Methods\strike0{\v Scribble6710>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Provides stream-based access to data stored in a file.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantFileStream = \b class\b0 (\strike TInstantStream\strike0{\v Scribble10540>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Use TInstantFileStream to access data in disk files. Like all \strike TInstantStream\strike0{\v Scribble10540>main} objects, TInstantFileStream uses a source stream that handles the streaming. The Source stream of TInstantFileStream is a TFileStream object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TStream
\par \pard\li95\tx355\tab |
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \tab |
\par \strike TInstantFileStream\strike0{\v Scribble6660>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6680}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFileStream Fields \cf1\b0\fs16  
\par \strike TInstantFileStream\strike0{\v Scribble6660>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6690}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFileStream Properties \cf1\b0\fs16 
\par \strike TInstantFileStream\strike0{\v Scribble6660>main} 
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FreeSource\strike0{\v Scribble10610>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Source\strike0{\v Scribble10620>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6700}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFileStream Events \cf1\b0\fs16 
\par \strike TInstantFileStream\strike0{\v Scribble6660>main} 
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnProcessObject\strike0{\v Scribble10820>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6710}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFileStream Methods \cf1\b0\fs16 
\par \strike TInstantFileStream\strike0{\v Scribble6660>main} 
\par \pard\sb55\sa55\b\fs18 TInstantFileStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble6730>main}
\par \pard\sb55\sa55\b TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AlignStream\strike0{\v Scribble10640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObject\strike0{\v Scribble10660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObjectRes\strike0{\v Scribble10680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResHeader\strike0{\v Scribble10700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObject\strike0{\v Scribble10740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObjectRes\strike0{\v Scribble10760>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceHeader\strike0{\v Scribble10800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6720}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFileStream Members \cf1\b0\fs16 
\par \strike TInstantFileStream\strike0{\v Scribble6660>main} 
\par \pard\sb55\sa55\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble6730>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6730}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFileStream.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantFileStream;TInstantFileStream,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantFileStream_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFileStream.Create \cf1\b0\fs16 
\par \strike TInstantFileStream\strike0{\v Scribble6660>main} 
\par \pard\sb25\sa85\fs18 Creates an instance of \strike TInstantFileStream\strike0{\v Scribble6660>main}.
\par \pard\sb25\sa25\b\f7 constructor\b0  Create(\b const\b0  FileName: \b string\b0 ; Mode: Word);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Create to create a \strike TInstantFileStream\strike0{\v Scribble6660>main} object. The FileName argument specifies the name of the file. The Mode argument specifies how the file should be opened. If the file cannot be opened, Create raises an exception.
\par \pard\f1 The Mode parameter consists of an open mode and a share mode or'ed together.
\par 
\par The open mode must be one of the following values: 
\par 
\par \pard\tx2000\ul\b Value\tab Meaning                                                                                                       \ulnone\b0 
\par fmCreate\tab Create a file with the given name. 
\par \tab If a file with the given name exists, open the file in write mode.
\par fmOpenRead\tab Open the file for reading only.
\par fmOpenWrite\tab Open the file for writing only. Writing to the file completely replaces 
\par \tab the current content.
\par fmOpenReadWrite\tab Open the file to modify the current content rather than replace it.
\par \pard 
\par The share mode must be one of the following values: 
\par 
\par \pard\tx2040\ul\b Value\tab Meaning                              \ulnone\b0 
\par fmShareCompat\tab Sharing is compatible with the way FCBs are opened.
\par fmShareExclusive\tab Other applications cannot open the file for any reason.
\par fmShareDenyWrite\tab Other applications can open the file for reading but not for writing.
\par fmShareDenyRead\tab Other applications can open the file for writing but not for reading.
\par fmShareDenyNone\tab No attempt is made to prevent other applications from 
\par \tab reading from or writing to the file.\f0 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFlashFilerConnector}
{\up +}{\footnote {\up +} classessymbol:000310}
{\up K}{\footnote {\up K} TInstantFlashFilerConnector;}
{\up A}{\footnote {\up A} TInstantFlashFilerConnector;TInstantFlashFilerConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFlashFilerConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble6750}\tab\strike Unit: InstantFlashFiler\strike0{\v Scribble12990>main} 
\par \pard\sb25\sa85\tx1435\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6760}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFlashFilerConnector Fields \cf1\b0\fs16  
\par \strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6770}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFlashFilerConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6780}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6780}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6790}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFlashFilerConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6800}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6800}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6810}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFlashFilerConnector Methods \cf1\b0\fs16 
\par \strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main} 
\par \pard\sb55\sa55\b\fs18 TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6820}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFlashFilerConnector Members \cf1\b0\fs16 
\par \strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}\tab\ul Legend\ulnone{\v Scribble6830}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6830}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6840}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFloat}
{\up +}{\footnote {\up +} classessymbol:000320}
{\up K}{\footnote {\up K} TInstantFloat;}
{\up A}{\footnote {\up A} TInstantFloat;TInstantFloat_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFloat \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5680\ul Hierarchy\ulnone{\v Scribble6860}\tab\strike Members\strike0{\v Scribble6930>nav}\tab\strike Properties\strike0{\v Scribble6880>nav}\tab\ul See Also\ulnone{\v Scribble6850}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantFloat represents a Double value.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantFloat = \b class\b0 (\strike TInstantNumeric\strike0{\v Scribble7290>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantFloat holds a Double as its value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6850}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantInteger\strike0{\v Scribble7070>main}
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6860}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}
\par \tab |
\par \strike TInstantFloat\strike0{\v Scribble6840>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6870}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFloat Fields \cf1\b0\fs16  
\par \strike TInstantFloat\strike0{\v Scribble6840>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFloat Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantFloat\strike0{\v Scribble6840>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6890}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantFloat
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6950>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6890}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6900}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantFloat Events \cf1\b0\fs16 
\par \strike TInstantFloat\strike0{\v Scribble6840>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6910}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFloat Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantFloat\strike0{\v Scribble6840>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6920}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6920}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6930}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantFloat Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantFloat\strike0{\v Scribble6840>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble6940}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6950>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6940}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFloat.Value}
{\up K}{\footnote {\up K} TInstantFloat,Value;Value;Value,TInstantFloat;}
{\up A}{\footnote {\up A} TInstantFloat_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFloat.Value \cf1\b0\fs16 
\par \strike TInstantFloat\strike0{\v Scribble6840>main} 
\par \pard\sb25\sa85\fs18 Specifies the value of the Float attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: Double;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the Float attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantIBXConnector}
{\up +}{\footnote {\up +} classessymbol:000330}
{\up K}{\footnote {\up K} TInstantIBXConnector;}
{\up A}{\footnote {\up A} TInstantIBXConnector;TInstantIBXConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantIBXConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble6970}\tab\strike Members\strike0{\v Scribble7040>nav}\tab\strike Properties\strike0{\v Scribble6990>nav}\tab\strike Unit: InstantIBX\strike0{\v Scribble13010>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6970}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \tab |
\par \strike TInstantConnectionBasedConnector\strike0{\v Scribble3400>main}
\par \tab |
\par \strike TInstantIBXConnector\strike0{\v Scribble6960>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6980}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantIBXConnector Fields \cf1\b0\fs16 
\par \strike TInstantIBXConnector\strike0{\v Scribble6960>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble6990}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantIBXConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantIBXConnector\strike0{\v Scribble6960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7000}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantIBXConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble7060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Connection\strike0{\v Scribble3500>main}
\par \pard\sb55\sa55\tx355\b TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7000}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7010}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantIBXConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantIBXConnector\strike0{\v Scribble6960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7020}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7020}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7030}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantIBXConnector Methods \cf1\b0\fs16 
\par \strike TInstantIBXConnector\strike0{\v Scribble6960>main} 
\par \pard\sb55\sa55\b\fs18 TInstantConnectionBasedConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasConnection\strike0{\v Scribble3510>main}
\par \pard\sb55\sa55\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7040}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantIBXConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantIBXConnector\strike0{\v Scribble6960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7050}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connection\strike0{\v Scribble7060>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7050}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantIBXConnector.Connection}
{\up K}{\footnote {\up K} Connection;Connection,TInstantIBXConnector;TInstantIBXConnector,Connection;}
{\up A}{\footnote {\up A} Connection;Connection_Property;TInstantIBXConnector_Connection}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantIBXConnector.Connection \cf1\b0\fs16 
\par \cf2\strike TInstantIBXConnector\cf3\strike0{\v Scribble6960>main}\cf1 
\par \pard\sb25\sa85\fs18 Specifies the connection used by the connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connection: TIBDatabase;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Connection property to specify the connection used by the connector component.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7070}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantInteger}
{\up +}{\footnote {\up +} classessymbol:000340}
{\up K}{\footnote {\up K} TInstantInteger;}
{\up A}{\footnote {\up A} TInstantInteger;TInstantInteger_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantInteger \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble7090}\tab\strike Members\strike0{\v Scribble7160>nav}\tab\strike Properties\strike0{\v Scribble7110>nav}\tab\ul See Also\ulnone{\v Scribble7080}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantInteger represents a 32-bit Integer value.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantInteger = \b class\b0 (\strike TInstantNumeric\strike0{\v Scribble7290>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantInteger holds a 32-bit Integer as its value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7080}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantFloat\strike0{\v Scribble6840>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}
\par \tab |
\par \strike TInstantInteger\strike0{\v Scribble7070>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7100}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantInteger Fields \cf1\b0\fs16  
\par \strike TInstantInteger\strike0{\v Scribble7070>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7110}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantInteger Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantInteger\strike0{\v Scribble7070>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7120}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantInteger
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble7180>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7130}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantInteger Events \cf1\b0\fs16 
\par \strike TInstantInteger\strike0{\v Scribble7070>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7140}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantInteger Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantInteger\strike0{\v Scribble7070>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7150}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7150}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7160}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantInteger Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantInteger\strike0{\v Scribble7070>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7170}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble7180>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantInteger.Value}
{\up K}{\footnote {\up K} TInstantInteger,Value;Value;Value,TInstantInteger;}
{\up A}{\footnote {\up A} TInstantInteger_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantInteger.Value \cf1\b0\fs16 
\par \strike TInstantInteger\strike0{\v Scribble7070>main} 
\par \pard\sb25\sa85\fs18 Specifies the value of the Integer attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the Integer attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantMemo}
{\up +}{\footnote {\up +} classessymbol:000350}
{\up K}{\footnote {\up K} TInstantMemo;}
{\up A}{\footnote {\up A} TInstantMemo;TInstantMemo_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantMemo \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble7200}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 TInstantMemo represents a memo.
\par \pard\sb25\sa25\tx1435\f7 TInstantMemo = \b class\b0 (\strike TInstantBlob\strike0{\v Scribble2680>main})
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantMemo holds a memo as its value. A memo is special binary large object (Blob) that contain multi-line text data.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7200}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantBlob\strike0{\v Scribble2680>main}
\par \tab |
\par \strike TInstantMemo\strike0{\v Scribble7190>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7210}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantMemo Fields \cf1\b0\fs16  
\par \strike TInstantMemo\strike0{\v Scribble7190>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7220}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantMemo Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantMemo\strike0{\v Scribble7190>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7230}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBlob
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Size\strike0{\v Scribble2790>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble2800>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7230}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7240}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantMemo Events \cf1\b0\fs16 
\par \strike TInstantMemo\strike0{\v Scribble7190>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7250}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantMemo Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantMemo\strike0{\v Scribble7190>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7260}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantBlob
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble2810>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadDataFromStream\strike0{\v Scribble2820>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadBuffer\strike0{\v Scribble2830>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveDataToStream\strike0{\v Scribble2840>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteBuffer\strike0{\v Scribble2850>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7260}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7270}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantMemo Members \cf1\b0\fs16 
\par \strike TInstantMemo\strike0{\v Scribble7190>main}\tab\ul Legend\ulnone{\v Scribble7280}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7280}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7290}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantNumeric}
{\up +}{\footnote {\up +} classessymbol:000360}
{\up K}{\footnote {\up K} TInstantNumeric;}
{\up A}{\footnote {\up A} TInstantNumeric;TInstantNumeric_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantNumeric \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul Hierarchy\ulnone{\v Scribble7300}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 TInstantNumeric is the ancestor of attribute classes that represent a numeric value.
\par \pard\sb25\sa25\tx1435\f7 TInstantNumeric = \b class\b0 (\strike TInstantSimple\strike0{\v Scribble10430>main})
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantNumeric is the ancestor of attribute classes that represent a numeric value.
\par \pard\strike 
\par \strike0 TInstantNumeric is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes:
\par 
\par \b Numeric attribute classes
\par \b0\strike TInstantInteger\strike0{\v Scribble7070>main}
\par \strike TInstantFloat\strike0{\v Scribble6840>main}
\par \strike TInstant\lang1033\f1 Currency\lang1040\strike0\f0{\v Scribble4670>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7300}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7310}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantNumeric Fields \cf1\b0\fs16  
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7320}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantNumeric Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantNumeric\strike0{\v Scribble7290>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7330}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7330}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7340}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantNumeric Events \cf1\b0\fs16 
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7350}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantNumeric Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantNumeric\strike0{\v Scribble7290>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7360}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7360}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7370}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantNumeric Members \cf1\b0\fs16 
\par \strike TInstantNumeric\strike0{\v Scribble7290>main}\tab\ul Legend\ulnone{\v Scribble7380}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7380}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject}
{\up +}{\footnote {\up +} classessymbol:000370}
{\up K}{\footnote {\up K} TInstantObject;}
{\up A}{\footnote {\up A} TInstantObject;TInstantObject_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\tx8520\tx9940\ul Hierarchy\ulnone{\v Scribble7420}\tab\strike Members\strike0{\v Scribble7490>nav}\tab\strike Properties\strike0{\v Scribble7440>nav}\tab\strike Methods\strike0{\v Scribble7470>nav}\tab\strike Events\strike0{\v Scribble7460>nav}\tab\ul See Also\ulnone{\v Scribble7400}\tab\strike Example 1\strike0{\v Scribble7410>example}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\tx7195\tx8635\fs18 The ancestor for classes with persistence capabilities.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\tx8635\f7 TInstantObject = \b class\b0 (\strike TInstantStreamable\strike0{\v Scribble10830>main}, IUnknown)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\tx8635\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\tx8635\b0 TInstantObject implements the methods required to manage persistent objects. It is the fundamental ancestor of classes that have the ability to store, retrieve and dispose their instances to and from a database.
\par To enable persistence capabilities for a class, the only requirement is that it ultimately descends from TInstantObject and that class and attribute metadata is specified as part of the class declaration. Furthermore attribute fields need to be declared for the attributes of the class. Attribute fields contain instances of \strike TInstantAttribute\strike0{\v Scribble2170>main} descendants. The attribute objects are created and destroyed automatically.
\par Instances of classes descending from TInstantObject exist only once in memory. This means that if an object has been retrieved from the database, any subsequent requests for the same object will be given a reference to the instance already in memory. Instances will not be removed from memory until the last dependent reference is destroyed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7400}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \strike TInstantExposer\strike0{\v Scribble6450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7410}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantObject, Example 1}
{\up K}{\footnote {\up K} TInstantObject,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\keep\f7\fs18 TPerson = class(TInstantObject)
\par \{\- stored                                   
\par   DateOfBirth: DateTime default 'Now';     
\par   FirstName: String(20);                   
\par   Gender: Integer;                         
\par   LastName: String(20);                    
\par   MiddleName: String(50); \}                
\par   _DateOfBirth: \strike TInstantDateTime\strike0{\v Scribble5670>main};          
\par   _FirstName: \strike TInstantString\strike0{\v Scribble11000>main};              
\par   _Gender: \strike TInstantInteger\strike0{\v Scribble7070>main};                
\par   _LastName: \strike TInstantString\strike0{\v Scribble11000>main};               
\par   _MiddleName: \strike TInstantString\strike0{\v Scribble11000>main};             
\par private
\par   function GetDateOfBirth: TDate;
\par   function GetFirstName: string;
\par   function GetGender: TGender;
\par   function GetLastName: string;
\par   function GetMiddleName: string;
\par   procedure SetDateOfBirth(const Value: TDate);
\par   procedure SetFirstName(const Value: string);
\par   procedure SetGender(const Value: TGender);
\par   procedure SetLastName(const Value: string);
\par   procedure SetMiddleName(const Value: string);
\par published
\par   property DateOfBirth: TDate read GetDateOfBirth write SetDateOfBirth;
\par   property FirstName: string read GetFirstName write SetFirstName;
\par   property Gender: TGender read GetGender write SetGender;
\par   property LastName: string read GetLastName write SetLastName;
\par   property MiddleName: string read GetMiddleName write SetMiddleName;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7420}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7430}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantObject Fields \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7440}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantObject Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantObject\strike0{\v Scribble7390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7450}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantObject
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Caption\strike0{\v Scribble7510>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble7530>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike DefaultContainer\strike0{\v Scribble7540>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasDefaultContainer\strike0{\v Scribble7560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Id\strike0{\v Scribble7570>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsAbandoned\strike0{\v Scribble7590>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble7600>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble7620>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIdChanged\strike0{\v Scribble7630>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsOwned\strike0{\v Scribble7650>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsPersistent\strike0{\v Scribble7670>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectChangeCount\strike0{\v Scribble7680>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClass\strike0{\v Scribble7690>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble7700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Objects\strike0{\v Scribble7720>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble7740>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OwnerAttribute\strike0{\v Scribble7760>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike PersistentId\strike0{\v Scribble7770>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RefCount\strike0{\v Scribble7790>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike UpdateCount\strike0{\v Scribble7810>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7450}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7460}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantObject Events \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb55\sa55\b\fs18 TInstantObject
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnAfterContentChange\strike0{\v Scribble9080>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnAttributeChanged\strike0{\v Scribble9100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnBeforeContentChange\strike0{\v Scribble9110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnChange\strike0{\v Scribble9130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnError\strike0{\v Scribble9150>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7470}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantObject Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantObject\strike0{\v Scribble7390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7480}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantObject
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike _AddRef\strike0{\v Scribble7820>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike _Release\strike0{\v Scribble7840>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Abandon\strike0{\v Scribble7860>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble7880>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddRef\strike0{\v Scribble7900>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterAddRef\strike0{\v Scribble7920>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterAssign\strike0{\v Scribble7940>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterContentChange\strike0{\v Scribble7960>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterCreate\strike0{\v Scribble7980>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterCreateAttributes\strike0{\v Scribble8000>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterDispose\strike0{\v Scribble8020>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterRefresh\strike0{\v Scribble8040>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterRetrieve\strike0{\v Scribble8060>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterStore\strike0{\v Scribble8080>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ApplyState\strike0{\v Scribble8100>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Assign\strike0{\v Scribble8120>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AttributeByName\strike0{\v Scribble8140>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AttributeChanged\strike0{\v Scribble8160>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeAssign\strike0{\v Scribble8180>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeContentChange\strike0{\v Scribble8200>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeCreateAttributes\strike0{\v Scribble8220>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeDispose\strike0{\v Scribble8240>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeRefresh\strike0{\v Scribble8260>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeRelease\strike0{\v Scribble8280>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeStore\strike0{\v Scribble8290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CanDispose\strike0{\v Scribble8310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CanStore\strike0{\v Scribble8320>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Changed\strike0{\v Scribble8330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble8350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CheckId\strike0{\v Scribble8370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ClassType\strike0{\v Scribble8380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ClearObjects\strike0{\v Scribble8390>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike constructor Clone(Source: TInstantObject; AConnector: TInstantConnector); virtual; overload;\strike0{\v Scribble8410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function Clone(AConnector: TInstantConnector): TInstantObject; overload;\strike0{\v Scribble8430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ContainerByName\strike0{\v Scribble8450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble8470>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble8490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble8500>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Destruct\strike0{\v Scribble8520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble8540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Dispose\strike0{\v Scribble8570>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike DisposeOwnedObject\strike0{\v Scribble8590>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble8600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EqualsPersistentSignature\strike0{\v Scribble8620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EqualsSignature\strike0{\v Scribble8640>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Finalize\strike0{\v Scribble8660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FindAttribute\strike0{\v Scribble8680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FindContainer\strike0{\v Scribble8700>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike GenerateId\strike0{\v Scribble8720>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleError\strike0{\v Scribble8740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble8760>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble8780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble8800>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsOperationAllowed\strike0{\v Scribble8820>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Metadata\strike0{\v Scribble8840>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike OwnedObjectChanged\strike0{\v Scribble8850>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike OwnerChanged\strike0{\v Scribble8870>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike QueryInterface\strike0{\v Scribble8880>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Refresh\strike0{\v Scribble8890>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshAll\strike0{\v Scribble8910>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Release\strike0{\v Scribble8920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble8940>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ResetAttributes\strike0{\v Scribble8960>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike RestoreState\strike0{\v Scribble8970>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Retrieve\strike0{\v Scribble8990>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike SaveState\strike0{\v Scribble9010>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Store\strike0{\v Scribble9030>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Unchanged\strike0{\v Scribble9050>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike VerifyOperation\strike0{\v Scribble9060>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7480}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7490}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantObject Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantObject\strike0{\v Scribble7390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble7500}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Caption\strike0{\v Scribble7510>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble7530>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike DefaultContainer\strike0{\v Scribble7540>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasDefaultContainer\strike0{\v Scribble7560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Id\strike0{\v Scribble7570>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsAbandoned\strike0{\v Scribble7590>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble7600>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble7620>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIdChanged\strike0{\v Scribble7630>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsOwned\strike0{\v Scribble7650>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsPersistent\strike0{\v Scribble7670>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectChangeCount\strike0{\v Scribble7680>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClass\strike0{\v Scribble7690>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble7700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Objects\strike0{\v Scribble7720>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble7740>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike OwnerAttribute\strike0{\v Scribble7760>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike PersistentId\strike0{\v Scribble7770>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RefCount\strike0{\v Scribble7790>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike UpdateCount\strike0{\v Scribble7810>main}
\par \pard\sb55\sa55\tx355\b Events
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnAfterContentChange\strike0{\v Scribble9080>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnAttributeChanged\strike0{\v Scribble9100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnBeforeContentChange\strike0{\v Scribble9110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnChange\strike0{\v Scribble9130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnError\strike0{\v Scribble9150>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike _AddRef\strike0{\v Scribble7820>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike _Release\strike0{\v Scribble7840>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Abandon\strike0{\v Scribble7860>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble7880>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddRef\strike0{\v Scribble7900>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterAddRef\strike0{\v Scribble7920>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterAssign\strike0{\v Scribble7940>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterContentChange\strike0{\v Scribble7960>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterCreate\strike0{\v Scribble7980>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterCreateAttributes\strike0{\v Scribble8000>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterDispose\strike0{\v Scribble8020>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterRefresh\strike0{\v Scribble8040>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterRetrieve\strike0{\v Scribble8060>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AfterStore\strike0{\v Scribble8080>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ApplyState\strike0{\v Scribble8100>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Assign\strike0{\v Scribble8120>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AttributeByName\strike0{\v Scribble8140>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike AttributeChanged\strike0{\v Scribble8160>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeAssign\strike0{\v Scribble8180>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeContentChange\strike0{\v Scribble8200>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeCreateAttributes\strike0{\v Scribble8220>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeDispose\strike0{\v Scribble8240>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeRefresh\strike0{\v Scribble8260>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeRelease\strike0{\v Scribble8280>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike BeforeStore\strike0{\v Scribble8290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CanDispose\strike0{\v Scribble8310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CanStore\strike0{\v Scribble8320>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Changed\strike0{\v Scribble8330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble8350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CheckId\strike0{\v Scribble8370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ClassType\strike0{\v Scribble8380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ClearObjects\strike0{\v Scribble8390>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike constructor Clone(Source: TInstantObject; AConnector: TInstantConnector); virtual; overload;\strike0{\v Scribble8410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function Clone(AConnector: TInstantConnector): TInstantObject; overload;\strike0{\v Scribble8430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ContainerByName\strike0{\v Scribble8450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble8470>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble8490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble8500>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Destruct\strike0{\v Scribble8520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble8540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Dispose\strike0{\v Scribble8570>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike DisposeOwnedObject\strike0{\v Scribble8590>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble8600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EqualsPersistentSignature\strike0{\v Scribble8620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EqualsSignature\strike0{\v Scribble8640>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Finalize\strike0{\v Scribble8660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FindAttribute\strike0{\v Scribble8680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FindContainer\strike0{\v Scribble8700>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike GenerateId\strike0{\v Scribble8720>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleError\strike0{\v Scribble8740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble8760>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble8780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble8800>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsOperationAllowed\strike0{\v Scribble8820>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Metadata\strike0{\v Scribble8840>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike OwnedObjectChanged\strike0{\v Scribble8850>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike OwnerChanged\strike0{\v Scribble8870>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike QueryInterface\strike0{\v Scribble8880>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Refresh\strike0{\v Scribble8890>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshAll\strike0{\v Scribble8910>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Release\strike0{\v Scribble8920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble8940>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ResetAttributes\strike0{\v Scribble8960>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike RestoreState\strike0{\v Scribble8970>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Retrieve\strike0{\v Scribble8990>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike SaveState\strike0{\v Scribble9010>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Store\strike0{\v Scribble9030>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Unchanged\strike0{\v Scribble9050>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike VerifyOperation\strike0{\v Scribble9060>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7500}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Caption}
{\up K}{\footnote {\up K} Caption;Caption,TInstantObject;TInstantObject,Caption;}
{\up A}{\footnote {\up A} Caption;Caption_Property;TInstantObject_Caption}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Caption \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7520}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the text string that identifies the object to the user.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Caption: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Caption specifies the text string that identifies the object. By default the \strike Id\strike0{\v Scribble7570>main} of the object is returned. If a different behavior is required the GetCaption method must be overridden.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7520}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Id\strike0{\v Scribble7570>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7530}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Connector}
{\up K}{\footnote {\up K} Connector;Connector,TInstantObject;TInstantObject,Connector;}
{\up A}{\footnote {\up A} Connector;Connector_Property;TInstantObject_Connector}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Connector \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Specifies the Connector associated with the instance.
\par \pard\sb25\sa25\b\f7 property\b0  Connector: \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Connector specifies the connector associated with the instance. The connector serves as the conduit between the instance and the database where the instance is or should be stored.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.DefaultContainer}
{\up K}{\footnote {\up K} DefaultContainer;DefaultContainer,TInstantObject;TInstantObject,DefaultContainer;}
{\up A}{\footnote {\up A} DefaultContainer;DefaultContainer_Property;TInstantObject_DefaultContainer}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.DefaultContainer \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7550}
\par \pard\sb25\sa85\tx1435\fs18 The default container attribute for the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  DefaultContainer: \strike TInstantContainer\strike0{\v Scribble4300>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 DefaultContainer returns the default container attribute for the instance. The name of the Default container is specified as part of the metadata for the class. The DefaultContainer enables a convenient way of accessing instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants that mainly serves as containers. \strike TInstantObject\strike0{\v Scribble7390>main} introduces several methods that accesses the default container attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7550}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Objects\strike0{\v Scribble7720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7560}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.HasDefaultContainer}
{\up K}{\footnote {\up K} HasDefaultContainer;HasDefaultContainer,TInstantObject;TInstantObject,HasDefaultContainer;}
{\up A}{\footnote {\up A} HasDefaultContainer;HasDefaultContainer_Property;TInstantObject_HasDefaultContainer}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.HasDefaultContainer \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Determines is a default container exists for the instance.
\par \pard\sb25\sa25\b\f7 property\b0  HasDefaultContainer: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasDefaultContainer to determine if a default container exists for the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7570}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Id}
{\up K}{\footnote {\up K} Id;Id,TInstantObject;TInstantObject,Id;}
{\up A}{\footnote {\up A} Id;Id_Property;TInstantObject_Id}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Id \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7580}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the unique Id of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Id: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The Id is the identification of an object. To store an object in a database, it must have an unique signature. The signature denotes the combination of the class name and the Id of the instance. The Id may be a generated value, but it can also be composed out of one or more key attribute of the class. If the instance does not have Id when it is stored, an Id is generated automatically. Override the GetId and SetId to customize the way a class manages its Id.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7580}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Caption\strike0{\v Scribble7510>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7590}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsAbandoned}
{\up K}{\footnote {\up K} IsAbandoned;IsAbandoned,TInstantObject;TInstantObject,IsAbandoned;}
{\up A}{\footnote {\up A} IsAbandoned;IsAbandoned_Property;TInstantObject_IsAbandoned}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsAbandoned \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Specifies if the object has been abandoned by its connector
\par \pard\sb25\sa25\b\f7 property\b0  IsAbandoned: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use IsAbandoned to determine if the instance has been abandoned by its connector. If a connector is destroyed prematurely, it automatically abandons all objects that may still be used in the application. These objects are even if they have been abandoned intact with the exception that they cannot be stored, retrieve or refreshed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsChanged}
{\up K}{\footnote {\up K} IsChanged;IsChanged,TInstantObject;TInstantObject,IsChanged;}
{\up A}{\footnote {\up A} IsChanged;IsChanged_Property;TInstantObject_IsChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsChanged \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7610}
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the instance is changed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsChanged: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 IsChanged returns True if the instance has been marked as changed, either by setting IsChanged to True directly, because some of its attributes were changed or the \strike Changed\strike0{\v Scribble8330>main} method was explicitly called.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Changed\strike0{\v Scribble8330>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsDefault}
{\up K}{\footnote {\up K} IsDefault;IsDefault,TInstantObject;TInstantObject,IsDefault;}
{\up A}{\footnote {\up A} IsDefault;IsDefault_Property;TInstantObject_IsDefault}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsDefault \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Specifies if the instance is default.
\par \pard\sb25\sa25\b\f7 property\b0  IsDefault: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 IsDefault returns True if all the attributes of the instance have default values and the \strike Id\strike0{\v Scribble7570>main} property of the instance contains and empty string.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7630}
{\up $}{\footnote {\up $} TInstantObject.IsIdChanged}
{\up K}{\footnote {\up K} IsIdChanged;IsIdChanged,TInstantObject;TInstantObject,IsIdChanged;}
{\up A}{\footnote {\up A} IsIdChanged;IsIdChanged_Property;TInstantObject_IsIdChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsIdChanged \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7640}
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the \strike Id\strike0{\v Scribble7570>main} has been changed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsIdChanged: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 IsIdChanged returns True if the \strike Id\strike0{\v Scribble7570>main} of the instance has been changed since the instance was either retrieved from the database or created.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7640}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.IsChanged\strike0{\v Scribble7600>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsOwned}
{\up K}{\footnote {\up K} IsOwned;IsOwned,TInstantObject;TInstantObject,IsOwned;}
{\up A}{\footnote {\up A} IsOwned;IsOwned_Property;TInstantObject_IsOwned}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsOwned \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7660}
\par \pard\sb25\sa85\tx1435\fs18 Specifies if the instance has an owner.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  IsOwned: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 IsOwned returns True if the instance has an owner.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7660}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Owner\strike0{\v Scribble7740>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7670}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsPersistent}
{\up K}{\footnote {\up K} IsPersistent;IsPersistent,TInstantObject;TInstantObject,IsPersistent;}
{\up A}{\footnote {\up A} IsPersistent;IsPersistent_Property;TInstantObject_IsPersistent}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsPersistent \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Specifies if the instance has been stored.
\par \pard\sb25\sa25\b\f7 property\b0  IsPersistent: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 IsPersistent returns True if the instance has been stored to the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ObjectChangeCount}
{\up K}{\footnote {\up K} ObjectChangeCount;ObjectChangeCount,TInstantObject;TInstantObject,ObjectChangeCount;}
{\up A}{\footnote {\up A} ObjectChangeCount;ObjectChangeCount_Property;TInstantObject_ObjectChangeCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ObjectChangeCount \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Returns the number of changed objects in the default container of the instance.
\par \pard\sb25\sa25\b\f7 property\b0  ObjectChangeCount: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ObjectChangeCount returns the number of changed objects in the default container of the instance. If no default container is specified, ObjectChangeCount raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7690}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ObjectClass}
{\up K}{\footnote {\up K} ObjectClass;ObjectClass,TInstantObject;TInstantObject,ObjectClass;}
{\up A}{\footnote {\up A} ObjectClass;ObjectClass_Property;TInstantObject_ObjectClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ObjectClass \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Returns the class type for the default container of the instance.
\par \pard\sb25\sa25\b\f7 property\b0  ObjectClass: TInstantObjectClass;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ObjectClass returns the minimum required class type for the default container of the instance. If no default container is specified, ObjectClass raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ObjectCount}
{\up K}{\footnote {\up K} ObjectCount;ObjectCount,TInstantObject;TInstantObject,ObjectCount;}
{\up A}{\footnote {\up A} ObjectCount;ObjectCount_Property;TInstantObject_ObjectCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ObjectCount \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7710} 
\par \pard\sb25\sa85\tx1435\fs18 Returns the number of objects in the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectCount: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ObjectCount returns the number of objects in the default container of the instance. If no default container is specified, ObjectCount raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Objects\strike0{\v Scribble7720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Objects}
{\up K}{\footnote {\up K} Objects;Objects,TInstantObject;TInstantObject,Objects;}
{\up A}{\footnote {\up A} Objects;Objects_Property;TInstantObject_Objects}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Objects \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7730}
\par \pard\sb25\sa85\tx1435\fs18 Specifies a reference to an object at a given position in the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Objects [\b Index\b0 : Integer]: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use Objects to obtain a reference or change a reference to an object at a specified position in the default container of the instance. The Index argument indicates the zero-based index of the object. Use Objects with the \strike ObjectCount\strike0{\v Scribble7700>main} property to iterate through all of the objects in the default container. If no default container is specified, Objects raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7730}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.ObjectCount\strike0{\v Scribble7700>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Owner}
{\up K}{\footnote {\up K} Owner;Owner,TInstantObject;TInstantObject,Owner;}
{\up A}{\footnote {\up A} Owner;Owner_Property;TInstantObject_Owner}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Owner \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7750}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the object that owns the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Owner: \strike TInstantObject\strike0{\v Scribble7390>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use Owner to access the owner of the instance. The owning object is responsible for the creation as well as the destruction of the instance. If the instance is not owned, Owner returns nil.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.IsOwned\strike0{\v Scribble7650>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OwnerAttribute}
{\up K}{\footnote {\up K} OwnerAttribute;OwnerAttribute,TInstantObject;TInstantObject,OwnerAttribute;}
{\up A}{\footnote {\up A} OwnerAttribute;OwnerAttribute_Property;TInstantObject_OwnerAttribute}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OwnerAttribute \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Specifies the context of an owned object.
\par \pard\sb25\sa25\b\f7 property\b0  OwnerAttribute: \strike TInstantComplex\strike0{\v Scribble3190>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use OwnerAttribute to obtain a reference to the attribute object that constitutes the context for the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7770}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.PersistentId}
{\up K}{\footnote {\up K} PersistentId;PersistentId,TInstantObject;TInstantObject,PersistentId;}
{\up A}{\footnote {\up A} PersistentId;PersistentId_Property;TInstantObject_PersistentId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.PersistentId \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7780}
\par \pard\sb25\sa85\tx1435\fs18 Contains the persistent \strike Id\strike0{\v Scribble7570>main} of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  PersistentId: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 PersistentId returns the persistent \strike Id\strike0{\v Scribble7570>main} of the instance. Since the \strike Id\strike0{\v Scribble7570>main} of the Instance may change, PersistentId keeps the value of the \strike Id\strike0{\v Scribble7570>main} when it was retrieved from the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7780}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Id\strike0{\v Scribble7570>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7790}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.RefCount}
{\up K}{\footnote {\up K} RefCount;RefCount,TInstantObject;TInstantObject,RefCount;}
{\up A}{\footnote {\up A} RefCount;RefCount_Property;TInstantObject_RefCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.RefCount \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7800} 
\par \pard\sb25\sa85\tx1435\fs18 Indicates the number of references to the instance.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  RefCount: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 RefCount is the number of references to the instance. RefCount is used to determine when the instance can be removed from memory. When RefCount is zero, the object can be removed. RefCount is automatically incremented when references to the instance are retrieved, and is automatically decremented when the references are destroyed. RefCount is incremented \strike AddRef\strike0{\v Scribble7900>main} method and decremented by the \strike Release\strike0{\v Scribble8920>main} method.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7800}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AddRef\strike0{\v Scribble7900>main}
\par \strike TInstantObject.Release\strike0{\v Scribble8920>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7810}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.UpdateCount}
{\up K}{\footnote {\up K} TInstantObject,UpdateCount;UpdateCount;UpdateCount,TInstantObject;}
{\up A}{\footnote {\up A} TInstantObject_UpdateCount;UpdateCount;UpdateCount_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.UpdateCount \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Specifies how many times the instance was updated in the database
\par \pard\sb25\sa25\b\f7 property\b0  UpdateCount: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 UpdateCount specifies how many times the instance was updated in the database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject._AddRef}
{\up K}{\footnote {\up K} _AddRef;_AddRef,TInstantObject;TInstantObject,_AddRef;}
{\up A}{\footnote {\up A} _AddRef;_AddRef_Method;TInstantObject__AddRef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject._AddRef \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7830}
\par \pard\sb25\sa85\tx1435\fs18 Increments the reference count for the number of references dependent on the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  _AddRef: Integer; \b stdcall\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 _AddRef implements the IUnknown interface method, \strike AddRef\strike0{\v Scribble7900>main}, defined by COM. It calls the \strike AddRef\strike0{\v Scribble7900>main} method which increments the reference count for the instance. _AddRef returns the resulting value of the reference count for the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7830}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject._Release\strike0{\v Scribble7840>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7840}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject._Release}
{\up K}{\footnote {\up K} _Release;_Release,TInstantObject;TInstantObject,_Release;}
{\up A}{\footnote {\up A} _Release;_Release_Method;TInstantObject__Release}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject._Release \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7850} 
\par \pard\sb25\sa85\tx1435\fs18 Decrements the reference count for the number of references dependent on the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  _Release: Integer; \b stdcall\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 _Release implements the IUnknown interface method, \strike Release\strike0{\v Scribble8920>main}, defined by COM. It calls the \strike Release\strike0{\v Scribble8920>main} method which decrements the reference count for the instance. _Release returns the resulting value of the reference count for the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7850}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject._AddRef\strike0{\v Scribble7820>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7860}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Abandon}
{\up K}{\footnote {\up K} Abandon;Abandon,TInstantObject;TInstantObject,Abandon;}
{\up A}{\footnote {\up A} Abandon;Abandon_Method;TInstantObject_Abandon}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Abandon \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7870}
\par \pard\sb25\sa85\tx1435\fs18 Abandons the object
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Abandon;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Abandon to set the instance in a state where it no longer attempts to store, dispose or refresh itself when the relevant methods are used. Abandon is called automatically by the connector associated with the instance if the connector is destroyed prematurely.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.IsAbandoned\strike0{\v Scribble7590>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7880}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AddObject}
{\up K}{\footnote {\up K} AddObject;AddObject,TInstantObject;TInstantObject,AddObject;}
{\up A}{\footnote {\up A} AddObject;AddObject_Method;TInstantObject_AddObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AddObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7890}
\par \pard\sb25\sa85\tx1435\fs18 Adds an object to the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  AddObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer; \b overload\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AddObject adds an object to the default container of the instance. If no default container is specified, AddObject raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7890}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DefaultContainer\strike0{\v Scribble7540>main}
\par \strike TInstantContainer.Add\strike0{\v Scribble4450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7900}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AddRef}
{\up K}{\footnote {\up K} AddRef;AddRef,TInstantObject;TInstantObject,AddRef;}
{\up A}{\footnote {\up A} AddRef;AddRef_Method;TInstantObject_AddRef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AddRef \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7910} 
\par \pard\sb25\sa85\tx1435\fs18 Increments the reference count for the number of references dependent on the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  AddRef: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AddRef increments the reference count for the instance and returns the resulting value of the reference count.
\par \fs10 
\par \fs18 Although it should not normally be necessary to call AddRef directly, it can be called\lang1033\f1  \lang1040\f0 to ensure the lifetime of an\lang1033\f1  \lang1040\f0 object\lang1033\f1  \lang1040\f0 before calling a method that could result in \lang1033\f1 the\lang1040\f0  premature destruction of the object, and after the method returns, call the \lang1033\f1 Free \lang1040\f0 method to decrement the \lang1033\f1 object's reference \lang1040\f0 count.\lang1033\f1  Note: It is generally not advisable to use the Release method in application development as this might result in memory leaks.\lang1040\f0 
\par \fs10 
\par \lang1033\f1\fs18 For practical examples of when to use the AddRef method study the PrimerCross demo application. One example is the TMainForm.CreateRandomContacts method in Main.pas. In that method a local Companies list is created. When an instance of TCompany is created its AddRef is called and it is added to the Companies list. However during the processing, instances of TCompany can be deleted from the list. As the list is a TObjectList, free will be called on its contained objects when items in the list are deleted or the list is destroyed. Calling AddRef when adding objects to the list ensures that the objects exist until they are deleted from the list or the list is destroyed thereby avoiding the possibility of an AV occurring.\lang1040\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7910}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Release\strike0{\v Scribble8920>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7920}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterAddRef}
{\up K}{\footnote {\up K} AfterAddRef;AfterAddRef,TInstantObject;TInstantObject,AfterAddRef;}
{\up A}{\footnote {\up A} AfterAddRef;AfterAddRef_Method;TInstantObject_AfterAddRef}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterAddRef \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7930} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after a reference has been added to the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterAddRef; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterAddRef is called automatically immediately after a reference has been added to the instance. Do not call it explicitly in your applications. The AfterAddRef method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks when references are added to instances of the class.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7930}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeRelease\strike0{\v Scribble8280>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7940}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterAssign}
{\up K}{\footnote {\up K} AfterAssign;AfterAssign,TInstantObject;TInstantObject,AfterAssign;}
{\up A}{\footnote {\up A} AfterAssign;AfterAssign_Method;TInstantObject_AfterAssign}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterAssign \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7950} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after assigning the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterAssign; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterAssign is called automatically immediately after assignment has been performed using the \strike Assign\strike0{\v Scribble8120>main} method of the instance. Do not call it explicitly in your applications. The AfterAssign method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to assignment without overriding the \strike Assign\strike0{\v Scribble8120>main} method.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7950}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeAssign\strike0{\v Scribble8180>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterContentChange}
{\up K}{\footnote {\up K} AfterContentChange;AfterContentChange,TInstantObject;TInstantObject,AfterContentChange;}
{\up A}{\footnote {\up A} AfterContentChange;AfterContentChange_Method;TInstantObject_AfterContentChange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterContentChange \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7970} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically after the content of a container has changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterContentChange(Container: \strike TInstantContainer\strike0{\v Scribble4300>main}; ChangeType: \strike TInstantContentChangeType\strike0{\v Scribble12240>main}; \b Index\b0 : Integer; AObject: \strike TInstantObject\strike0{\v Scribble7390>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterContentChange is called automatically after the content of a container has changed. Do not call it explicitly in your applications. The AfterContentChange method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks after the content of a container has changed. The Container is specified by the Container argument. The ChangeType specifies the type of change that occurred. The Index argument specifies the index in the containers array of objects where the change occurred. The AObject argument holds a reference to the object for which the change occurred. Please note that this reference may be unassigned.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7970}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeContentChange\strike0{\v Scribble8200>main}
\par \strike TInstantObject.OnAfterContentChange\strike0{\v Scribble9080>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7980}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterCreate}
{\up K}{\footnote {\up K} AfterCreate;AfterCreate,TInstantObject;TInstantObject,AfterCreate;}
{\up A}{\footnote {\up A} AfterCreate;AfterCreate_Method;TInstantObject_AfterCreate}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterCreate \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble7990} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after the new instance has been created.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterCreate; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterCreate is called automatically immediately after the new instance has been created using the \strike Create\strike0{\v Scribble8470>main} constructor. Do not call it explicitly in your applications. The AfterCreate method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the creation of new objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble7990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Create\strike0{\v Scribble8470>main}
\par \strike TInstantObject.AfterRetrieve\strike0{\v Scribble8060>main}
\par \strike TInstantObject.Initialize\strike0{\v Scribble8780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterCreateAttributes}
{\up K}{\footnote {\up K} AfterCreateAttributes;AfterCreateAttributes,TInstantObject;TInstantObject,AfterCreateAttributes;}
{\up A}{\footnote {\up A} AfterCreateAttributes;AfterCreateAttributes_Method;TInstantObject_AfterCreateAttributes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterCreateAttributes \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8010} 
\par \pard\sb25\sa85\tx1435\fs18 Called after the attributes have been created.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterCreateAttributes; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterCreateAttributes is called automatically immediately after the attributes of the instance have been created. Do not call it explicitly in your applications. The AfterCreateAttributes method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the creation of attributes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8010}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeCreateAttributes\strike0{\v Scribble8220>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8020}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterDispose}
{\up K}{\footnote {\up K} AfterDispose;AfterDispose,TInstantObject;TInstantObject,AfterDispose;}
{\up A}{\footnote {\up A} AfterDispose;AfterDispose_Method;TInstantObject_AfterDispose}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterDispose \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8030}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after the instance has been disposed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterDispose; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterDispose is called automatically immediately after the instance has been disposed. Do not call it explicitly in your applications. The AfterDispose method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks after instances are disposed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8030}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeDispose\strike0{\v Scribble8240>main}
\par \strike TInstantObject.Dispose\strike0{\v Scribble8570>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8040}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterRefresh}
{\up K}{\footnote {\up K} AfterRefresh;AfterRefresh,TInstantObject;TInstantObject,AfterRefresh;}
{\up A}{\footnote {\up A} AfterRefresh;AfterRefresh_Method;TInstantObject_AfterRefresh}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterRefresh \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8050}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after the instance has been refreshed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterRefresh; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterRefresh is called automatically immediately after the instance has been refreshed. Do not call it explicitly in your applications. The AfterRefresh method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks after instances are refreshed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8050}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeRefresh\strike0{\v Scribble8260>main}
\par \strike TInstantObject.Refresh\strike0{\v Scribble8890>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterRetrieve}
{\up K}{\footnote {\up K} AfterRetrieve;AfterRetrieve,TInstantObject;TInstantObject,AfterRetrieve;}
{\up A}{\footnote {\up A} AfterRetrieve;AfterRetrieve_Method;TInstantObject_AfterRetrieve}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterRetrieve \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8070}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after the instance has been retrieved.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterRetrieve; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterRetrieve is called automatically immediately after the instance has been retrieved using the \strike Retrieve\strike0{\v Scribble8990>main} constructor. Do not call it explicitly in your applications. The AfterRetrieve method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the retrieval of existing objects.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  AfterRetrieve is not only called when a persistent object is brought from the database into memory for the first time, but also for subsequent requests for the object. Therefore no memory allocation should be performed here.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8070}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Retrieve\strike0{\v Scribble8990>main}
\par \strike TInstantObject.Initialize\strike0{\v Scribble8780>main}
\par \strike TInstantObject.AfterCreate\strike0{\v Scribble7980>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8080}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AfterStore}
{\up K}{\footnote {\up K} AfterStore;AfterStore,TInstantObject;TInstantObject,AfterStore;}
{\up A}{\footnote {\up A} AfterStore;AfterStore_Method;TInstantObject_AfterStore}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AfterStore \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8090} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after the instance has been stored.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AfterStore; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AfterStore is called automatically immediately after the instance has been stored. Do not call it explicitly in your applications. The AfterStore method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks after instances are stored.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeStore\strike0{\v Scribble8290>main}
\par \strike TInstantObject.Store\strike0{\v Scribble9030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ApplyState}
{\up K}{\footnote {\up K} ApplyState;ApplyState,TInstantObject;TInstantObject,ApplyState;}
{\up A}{\footnote {\up A} ApplyState;ApplyState_Method;TInstantObject_ApplyState}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ApplyState \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8110} 
\par \pard\sb25\sa85\tx1435\fs18 Applies the state of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ApplyState; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ApplyState applies the state of the instance. ApplyState is called automatically. Do not call it explicitly in your applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8110}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.SaveState\strike0{\v Scribble9010>main}
\par \strike TInstantObject.RestoreState\strike0{\v Scribble8970>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8120}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Assign}
{\up K}{\footnote {\up K} Assign;Assign,TInstantObject;TInstantObject,Assign;}
{\up A}{\footnote {\up A} Assign;Assign_Method;TInstantObject_Assign}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Assign \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8130}
\par \pard\sb25\sa85\tx1435\fs18 Copies the attributes of another object to the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Assign(Source: TPersistent); \b override\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Assign to copy the attributes of the Source object to the instance. Immediately before and after performing the assignment of the attributes, Assign calls the \strike BeforeAssign\strike0{\v Scribble8180>main} and \strike AfterAssign\strike0{\v Scribble7940>main} methods.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8130}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.BeforeAssign\strike0{\v Scribble8180>main}
\par \strike TInstantObject.AfterAssign\strike0{\v Scribble7940>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8140}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AttributeByName}
{\up K}{\footnote {\up K} AttributeByName;AttributeByName,TInstantObject;TInstantObject,AttributeByName;}
{\up A}{\footnote {\up A} AttributeByName;AttributeByName_Method;TInstantObject_AttributeByName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AttributeByName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8150} 
\par \pard\sb25\sa85\tx1435\fs18 Searches for an attribute by the its name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  AttributeByName(\b const\b0  AttributeName: \b string\b0 ): \strike TInstantAttribute\strike0{\v Scribble2170>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call AttributeByName to search for an attribute by its name. AttributeByName returns the TAttribute object for the specified attribute name. It is only rarely necessary to call AttributeByName since fields are declared for the attributes. If the Attribute does not exist, AttributeByName raises an exception.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  An application should not access the attributes of objects directly. Instead the classes that hold the attributes should also introduce properties and methods through which the attributes can be manipulated. Using this approach, attributes and the logic accompanying them can be encapsulated in the classes to which they belong.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8150}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.FindAttribute\strike0{\v Scribble8680>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.AttributeChanged}
{\up K}{\footnote {\up K} AttributeChanged;AttributeChanged,TInstantObject;TInstantObject,AttributeChanged;}
{\up A}{\footnote {\up A} AttributeChanged;AttributeChanged_Method;TInstantObject_AttributeChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.AttributeChanged \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8170} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after an attribute has changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  AttributeChanged(Attribute: \strike TInstantAttribute\strike0{\v Scribble2170>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 AttributeChanged is called automatically immediately after an attribute has changed. Do not call it explicitly in your applications. The AttributeChanged method implemented by \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override AttributeChanged when creating a class that needs to perform special tasks related to the change of attributes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8170}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Changed\strike0{\v Scribble8330>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeAssign}
{\up K}{\footnote {\up K} BeforeAssign;BeforeAssign,TInstantObject;TInstantObject,BeforeAssign;}
{\up A}{\footnote {\up A} BeforeAssign;BeforeAssign_Method;TInstantObject_BeforeAssign}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeAssign \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8190}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately before assigning the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeAssign; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeAssign is called automatically immediately before assignment is performed using the \strike Assign\strike0{\v Scribble8120>main} method of the instance. Do not call it explicitly in your applications. The BeforeAssign method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to assignment without overriding the \strike Assign\strike0{\v Scribble8120>main} method.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8190}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterAssign\strike0{\v Scribble7940>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8200}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeContentChange}
{\up K}{\footnote {\up K} BeforeContentChange;BeforeContentChange,TInstantObject;TInstantObject,BeforeContentChange;}
{\up A}{\footnote {\up A} BeforeContentChange;BeforeContentChange_Method;TInstantObject_BeforeContentChange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeContentChange \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8210} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically before the content of a container is to be changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeContentChange(Container: \strike TInstantContainer\strike0{\v Scribble4300>main}; ChangeType: \strike TInstantContentChangeType\strike0{\v Scribble12240>main}; \b Index\b0 : Integer; AObject: \strike TInstantObject\strike0{\v Scribble7390>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeContentChange is called automatically before the content of a container is changed. Do not call it explicitly in your applications. The BeforeContentChange method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks before the content of a container is changed. The Container is specified by the Container argument. The ChangeType specifies the type of change that will occur. The Index argument specifies the index in the containers array of objects where the change will occur. The AObject argument holds a reference to the object for which the change will occur. Please note that this reference may be unassigned.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8210}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterContentChange\strike0{\v Scribble7960>main}
\par \strike TInstantObject.OnBeforeContentChange\strike0{\v Scribble9110>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8220}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeCreateAttributes}
{\up K}{\footnote {\up K} BeforeCreateAttributes;BeforeCreateAttributes,TInstantObject;TInstantObject,BeforeCreateAttributes;}
{\up A}{\footnote {\up A} BeforeCreateAttributes;BeforeCreateAttributes_Method;TInstantObject_BeforeCreateAttributes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeCreateAttributes \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8230}
\par \pard\sb25\sa85\tx1435\fs18 Called before the attributes are created.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeCreateAttributes; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeCreateAttributes is called automatically immediately before the attributes of the instance are created. Do not call it explicitly in your applications. The BeforeCreateAttributes method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the creation of attributes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8230}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterCreateAttributes\strike0{\v Scribble8000>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8240}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeDispose}
{\up K}{\footnote {\up K} BeforeDispose;BeforeDispose,TInstantObject;TInstantObject,BeforeDispose;}
{\up A}{\footnote {\up A} BeforeDispose;BeforeDispose_Method;TInstantObject_BeforeDispose}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeDispose \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8250}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately before the instance is disposed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeDispose; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeDispose is called automatically immediately before the instance is disposed. Do not call it explicitly in your applications. The BeforeDispose method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks before instances are disposed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8250}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterDispose\strike0{\v Scribble8020>main}
\par \strike TInstantObject.Dispose\strike0{\v Scribble8570>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8260}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeRefresh}
{\up K}{\footnote {\up K} BeforeRefresh;BeforeRefresh,TInstantObject;TInstantObject,BeforeRefresh;}
{\up A}{\footnote {\up A} BeforeRefresh;BeforeRefresh_Method;TInstantObject_BeforeRefresh}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeRefresh \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8270} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately before the instance is refreshed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeRefresh; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeRefresh is called automatically immediately before the instance is refreshed. Do not call it explicitly in your applications. The BeforeRefresh method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks before instances are refreshed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterRefresh\strike0{\v Scribble8040>main}
\par \strike TInstantObject.Refresh\strike0{\v Scribble8890>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8280}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeRelease}
{\up K}{\footnote {\up K} BeforeRelease;BeforeRelease,TInstantObject;TInstantObject,BeforeRelease;}
{\up A}{\footnote {\up A} BeforeRelease;BeforeRelease_Method;TInstantObject_BeforeRelease}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeRelease \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Called automatically immediately before a reference to the instance is removed.
\par \pard\sb25\sa25\b\f7 procedure\b0  BeforeRelease; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 BeforeRelease is called automatically immediately before a reference to the instance is removed. Do not call it explicitly in your applications. The BeforeRelease method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks when references to instances of the class are removed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8290}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.BeforeStore}
{\up K}{\footnote {\up K} BeforeStore;BeforeStore,TInstantObject;TInstantObject,BeforeStore;}
{\up A}{\footnote {\up A} BeforeStore;BeforeStore_Method;TInstantObject_BeforeStore}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.BeforeStore \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8300} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately before the instance is stored.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  BeforeStore; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 BeforeStore is called automatically immediately before the instance is stored. Do not call it explicitly in your applications. The \strike AfterStore\strike0{\v Scribble8080>main} method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks before instances are stored.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8300}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterStore\strike0{\v Scribble8080>main}
\par \strike TInstantObject.Store\strike0{\v Scribble9030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.CanDispose}
{\up K}{\footnote {\up K} CanDispose;CanDispose,TInstantObject;TInstantObject,CanDispose;}
{\up A}{\footnote {\up A} CanDispose;CanDispose_Method;TInstantObject_CanDispose}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.CanDispose \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Determines the if it is possible to dispose the instance.
\par \pard\sb25\sa25\b\f7 function\b0  CanDispose: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use CanDispose to determine if it is possible to dispose the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.CanStore}
{\up K}{\footnote {\up K} CanStore;CanStore,TInstantObject;TInstantObject,CanStore;}
{\up A}{\footnote {\up A} CanStore;CanStore_Method;TInstantObject_CanStore}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.CanStore \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Determines the if it is possible to store the instance.
\par \pard\sb25\sa25\b\f7 function\b0  CanStore: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use CanStore to determine if it is possible to store the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Changed}
{\up K}{\footnote {\up K} Changed;Changed,TInstantObject;TInstantObject,Changed;}
{\up A}{\footnote {\up A} Changed;Changed_Method;TInstantObject_Changed}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Changed \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8340} 
\par \pard\sb25\sa85\tx1435\fs18 Generates an \strike OnChange\strike0{\v Scribble9130>main} event, and marks the Instance as changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Changed; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Changed generates an \strike OnChange\strike0{\v Scribble9130>main} event, and marks the instance as changed by setting its \strike IsChanged\strike0{\v Scribble7600>main} property to True. If the instance is owned, the owner is notified about the change. It should normally not be necessary to call Changed directly since it is called if a change occurs to the instance. If changes are disabled, none of the above is performed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8340}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.ChangesDisabled\strike0{\v Scribble8350>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ChangesDisabled}
{\up K}{\footnote {\up K} ChangesDisabled;ChangesDisabled,TInstantObject;TInstantObject,ChangesDisabled;}
{\up A}{\footnote {\up A} ChangesDisabled;ChangesDisabled_Method;TInstantObject_ChangesDisabled}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ChangesDisabled \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8360} 
\par \pard\sb25\sa85\tx1435\fs18 Determines if change notification and change of state is disabled for the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  ChangesDisabled: Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ChangesDisabled determines if the instance will recognize and notify occurring changes. If the value is True the instance is isolated, it neither recognizes nor notifies about changes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8360}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DisableChanges\strike0{\v Scribble8540>main}
\par \strike TInstantObject.EnableChanges\strike0{\v Scribble8600>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.CheckId}
{\up K}{\footnote {\up K} CheckId;CheckId,TInstantObject;TInstantObject,CheckId;}
{\up A}{\footnote {\up A} CheckId;CheckId_Method;TInstantObject_CheckId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.CheckId \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Checks if the instance has a valid \strike Id\strike0{\v Scribble7570>main}
\par \pard\sb25\sa25\b\f7 procedure\b0  CheckId;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call CheckId to verify that the instance has a valid \strike Id\strike0{\v Scribble7570>main}. If the instance does not initially have an \strike Id\strike0{\v Scribble7570>main} when calling CheckId, an \strike Id\strike0{\v Scribble7570>main} is generated by the \strike InstantGenerateId\strike0{\v Scribble11520>main} function. If the instance initially has an \strike Id\strike0{\v Scribble7570>main}, this \strike Id\strike0{\v Scribble7570>main} is validated by calling the \strike InstantIsValidObjectId\strike0{\v Scribble11590>main} function.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ClassType}
{\up K}{\footnote {\up K} ClassType;ClassType,TInstantObject;TInstantObject,ClassType;}
{\up A}{\footnote {\up A} ClassType;ClassType_Method;TInstantObject_ClassType}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ClassType \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Returns a pointer to the class type of the instance.
\par \pard\sb25\sa25\b\f7 function\b0  ClassType: TInstantObjectClass;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 ClassType determines the type of the instance an object. It is rarely necessary to call ClassType directly. Instead, use the is or as operator.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ClearObjects}
{\up K}{\footnote {\up K} ClearObjects;ClearObjects,TInstantObject;TInstantObject,ClearObjects;}
{\up A}{\footnote {\up A} ClearObjects;ClearObjects_Method;TInstantObject_ClearObjects}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ClearObjects \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8400} 
\par \pard\sb25\sa85\tx1435\fs18 Removes all objects in the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ClearObjects;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ClearObjects clears the default container of the instance. If no default container is specified, ClearObjects raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8400}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DefaultContainer\strike0{\v Scribble7540>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Clone}
{\up K}{\footnote {\up K} Clone;Clone,TInstantObject;TInstantObject,Clone;}
{\up A}{\footnote {\up A} Clone;Clone_Method;TInstantObject_Clone}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Clone \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8420} 
\par \pard\sb25\sa85\tx1435\fs18 Copy-constructor that duplicates an object.
\par \pard\sb25\sa25\tx1435\b\f7 constructor\b0  \strike Clone\strike0{\v Scribble8430>main}(Source: \strike TInstantObject\strike0{\v Scribble7390>main}; AConnector: \strike TInstantConnector\strike0{\v Scribble3770>main}); \b virtual\b0 ; \b overload\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Creates a new instance that should duplicate another object specified by the Source argument. The AConnector argument can optionally be used to specify the connector associated with the duplicate object. If AConnector is not assigned, the default connector is used for the newly created instance. If also no default \strike Connector\strike0{\v Scribble7530>main} is specified, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8420}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Create\strike0{\v Scribble8470>main}
\par \strike TInstantObject.Retrieve\strike0{\v Scribble8990>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Clone}
{\up K}{\footnote {\up K} Clone;Clone,TInstantObject;TInstantObject,Clone;}
{\up A}{\footnote {\up A} Clone;Clone_Method;TInstantObject_Clone}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Clone \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8440}
\par \pard\sb25\sa85\tx1435\fs18 Creates and returns a duplicate of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  Clone(AConnector: \strike TInstantConnector\strike0{\v Scribble3770>main}): \strike TInstantObject\strike0{\v Scribble7390>main}; \b overload\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Clone to obtain a duplicate of the instance. The AConnector argument can be used to specify the connector associated with the duplicate object. If AConnector is not assigned (default) the connector associated with the instance is used.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Clone\strike0{\v Scribble8430>main}
\par \strike TInstantObject.Assign\strike0{\v Scribble8120>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8450}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ContainerByName}
{\up K}{\footnote {\up K} ContainerByName;ContainerByName,TInstantObject;TInstantObject,ContainerByName;}
{\up A}{\footnote {\up A} ContainerByName;ContainerByName_Method;TInstantObject_ContainerByName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ContainerByName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8460} 
\par \pard\sb25\sa85\tx1435\fs18 Finds a container attribute for the instance by the its name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  ContainerByName(\b const\b0  ContainerName: \b string\b0 ): \strike TInstantContainer\strike0{\v Scribble4300>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call ContainerByName to find a container attribute by its name. ContainerByName returns the TContainer object for the specified attribute name. It is only rarely necessary to use ContainerByName since attribute fields are declared for container attributes. If the container Attribute does not exist, ContainerByName raises an exception.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  An application should not access the attributes of objects directly. Instead the classes that hold the attributes should also introduce properties and methods through which the attributes can be manipulated. Using this approach, attributes and the logic accompanying them can be encapsulated in the classes to which they belong.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8460}
}
\viewkind4\uc1\pard\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.FindContainer\strike0{\v Scribble8700>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantObject;TInstantObject,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantObject_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Create \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8480}
\par \pard\sb25\sa85\tx1435\fs18 Constructor that creates a new instance.
\par \pard\sb25\sa25\tx1435\b\f7 constructor\b0  Create(AConnector: \strike TInstantConnector\strike0{\v Scribble3770>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Create to construct a new instance of a \strike TInstantObject\strike0{\v Scribble7390>main} descendant. The AConnector argument can optionally be used to specify the connector associated with the instance. If AConnector is not assigned, the default connector is used for the newly created instance. If also no default \strike Connector\strike0{\v Scribble7530>main} is specified, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8480}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Clone\strike0{\v Scribble8430>main}
\par \strike TInstantObject.Retrieve\strike0{\v Scribble8990>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8490}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.CreateInstance}
{\up K}{\footnote {\up K} CreateInstance;CreateInstance,TInstantObject;TInstantObject,CreateInstance;}
{\up A}{\footnote {\up A} CreateInstance;CreateInstance_Method;TInstantObject_CreateInstance}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.CreateInstance \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Creates an instance for streaming purposes.
\par \pard\sb25\sa25\b\f7 class\b0  \b function\b0  CreateInstance(Arg: Pointer): \strike TInstantStreamable\strike0{\v Scribble10830>main}; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 CreateInstance is used by the streaming mechanism of InstantObjects to create instances of classes descending from \strike TInstantObject\strike0{\v Scribble7390>main}. If assigned, the Arg argument contains a reference to the connector to be used for the newly created instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.DeleteObject}
{\up K}{\footnote {\up K} DeleteObject;DeleteObject,TInstantObject;TInstantObject,DeleteObject;}
{\up A}{\footnote {\up A} DeleteObject;DeleteObject_Method;TInstantObject_DeleteObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.DeleteObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8510}
\par \pard\sb25\sa85\tx1435\fs18 Deletes an object from the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  DeleteObject(\b Index\b0 : Integer);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 DeleteObject deletes the object at the position specified by the Index argument from the default container of the instance. If no default container is specified, DeleteObject raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DefaultContainer\strike0{\v Scribble7540>main}
\par \strike TInstantObject.RemoveObject\strike0{\v Scribble8940>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Destruct}
{\up K}{\footnote {\up K} Destruct;Destruct,TInstantObject;TInstantObject,Destruct;}
{\up A}{\footnote {\up A} Destruct;Destruct_Method;TInstantObject_Destruct}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Destruct \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8530} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically when the instance is destroyed for the ultimately last time.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Destruct; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Destruct is called automatically when the last reference to a non-persistent (either a newly created or disposed) instance is destroyed. Do not call it explicitly in your applications. The Destruct method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the final destruction of an object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8530}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Create\strike0{\v Scribble8470>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.DisableChanges}
{\up K}{\footnote {\up K} DisableChanges;DisableChanges,TInstantObject;TInstantObject,DisableChanges;}
{\up A}{\footnote {\up A} DisableChanges;DisableChanges_Method;TInstantObject_DisableChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.DisableChanges \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8550}\tab\strike Example 1\strike0{\v Scribble8560>example} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Disables change notification and change of state for the instance.
\par \pard\sb25\sa25\tx1435\tx2875\b\f7 procedure\b0  DisableChanges;
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Disables change notification and change of state for the instance. Use DisableChanges to "isolate" the instance. The instance will neither recognize change notification nor notify about occurring changes. DisableChanges can be nested. Each call to DisableChanges should have a corresponding call to \strike EnableChanges\strike0{\v Scribble8600>main}.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8550}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.EnableChanges\strike0{\v Scribble8600>main}
\par \strike TInstantObject.ChangesDisabled\strike0{\v Scribble8350>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8560}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantObject.DisableChanges, Example 1}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantObject.DisableChanges\strike0{\v Scribble8540>main} 
\par \pard\keep\f7\fs18 Nested call to DisableChanges.
\par 
\par procedure DoNothing(Obj: \strike TInstantObject\strike0{\v Scribble7390>main});
\par begin
\par   Obj.DisableChanges;
\par   Obj.\strike EnableChanges\strike0{\v Scribble8600>main};
\par end;
\par 
\par procedure DoSomething(Obj: \strike TInstantObject\strike0{\v Scribble7390>main});
\par begin
\par   Obj.DisableChanges;
\par   try
\par     DoNothing(Obj);
\par   finally
\par     Obj.\strike EnableChanges\strike0{\v Scribble8600>main};
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8570}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Dispose}
{\up K}{\footnote {\up K} Dispose;Dispose,TInstantObject;TInstantObject,Dispose;}
{\up A}{\footnote {\up A} Dispose;Dispose_Method;TInstantObject_Dispose}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 TInstantObject.Dispose \b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8580} 
\par \pard\sb25\sa85\tx1435\fs18 Disposes the instance from the database.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Dispose(ConflictAction: \strike TInstantConflictAction\strike0{\v Scribble12180>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Dispose disposes the instance from the database. After the instance has been disposed it has the same state as a newly created instance. This means that a disposed object can be stored in the database again if required. Immediately before and after performing the disposal of the instance, Dispose calls the \strike BeforeDispose\strike0{\v Scribble8240>main} and \strike AfterDispose\strike0{\v Scribble8020>main} methods. If the instance is owned, Dispose removes the object from its owner, and the owner is requested to store itself in order to persist the removal. If the instance has not yet been stored Dispose does nothing. The ConflictAction argument specifies how the Dispose operation should respond to conflicts.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8580}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Store\strike0{\v Scribble9030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8590}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.DisposeOwnedObject}
{\up K}{\footnote {\up K} DisposeOwnedObject;DisposeOwnedObject,TInstantObject;TInstantObject,DisposeOwnedObject;}
{\up A}{\footnote {\up A} DisposeOwnedObject;DisposeOwnedObject_Method;TInstantObject_DisposeOwnedObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.DisposeOwnedObject \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Disposes an owned object persistently.
\par \pard\sb25\sa25\b\f7 procedure\b0  DisposeOwnedObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}; ConflictAction: \strike TInstantConflictAction\strike0{\v Scribble12180>main});
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Disposes an owned object by removing the object from the attribute in the owning instance that hold it and store the owning instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.EnableChanges}
{\up K}{\footnote {\up K} EnableChanges;EnableChanges,TInstantObject;TInstantObject,EnableChanges;}
{\up A}{\footnote {\up A} EnableChanges;EnableChanges_Method;TInstantObject_EnableChanges}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.EnableChanges \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8610}
\par \pard\sb25\sa85\tx1435\fs18 Enables change notification and change of state for the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  EnableChanges;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call EnableChanges to enable change notification and change of state for the instance. If the current disabled level is not nested, the call to EnableChanges enables change notification and change of state. Otherwise EnableChanges only decrements the disabled nesting level.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DisableChanges\strike0{\v Scribble8540>main}
\par \strike TInstantObject.ChangesDisabled\strike0{\v Scribble8350>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.EqualsPersistentSignature}
{\up K}{\footnote {\up K} EqualsPersistentSignature;EqualsPersistentSignature,TInstantObject;TInstantObject,EqualsPersistentSignature;}
{\up A}{\footnote {\up A} EqualsPersistentSignature;EqualsPersistentSignature_Method;TInstantObject_EqualsPersistentSignature}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.EqualsPersistentSignature \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8630} 
\par \pard\sb25\sa85\tx1435\fs18 Compares the persistent signature of the instance with another signature.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  EqualsPersistentSignature(\b const\b0  AObjectClassName: \b string\b0 ; \b const\b0  AObjectId: \b string\b0 ): Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call EqualsPersistentSignature to compare the persistent signature of the instance with the signature passed as the AObjectClassName and AObjectId arguments. Since the \strike Id\strike0{\v Scribble7570>main} of the instance may have changed, the persistent signature denotes the combination of the class name and the \strike PersistentId\strike0{\v Scribble7770>main} of the instance. If the instance is persistent and the values are equal, EqualsPersistentSignature returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.EqualsSignature\strike0{\v Scribble8640>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.EqualsSignature}
{\up K}{\footnote {\up K} EqualsSignature;EqualsSignature,TInstantObject;TInstantObject,EqualsSignature;}
{\up A}{\footnote {\up A} EqualsSignature;EqualsSignature_Method;TInstantObject_EqualsSignature}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.EqualsSignature \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8650} 
\par \pard\sb25\sa85\tx1435\fs18 Compares the signature of the instance with another signature.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  EqualsSignature(\b const\b0  AObjectClassName: \b string\b0 ; \b const\b0  AObjectId: \b string\b0 ): Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call EqualsSignature to compare the signature of the instance with the signature passed as the AObjectClassName and AObjectId arguments. The signature denotes the combination of the class name and \strike Id\strike0{\v Scribble7570>main} of the instance. If the values are equal, EqualsSignature returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8650}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.EqualsPersistentSignature\strike0{\v Scribble8620>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Finalize}
{\up K}{\footnote {\up K} Finalize;Finalize,TInstantObject;TInstantObject,Finalize;}
{\up A}{\footnote {\up A} Finalize;Finalize_Method;TInstantObject_Finalize}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Finalize \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8670} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately before memory is deallocated for the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Finalize; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Finalize is called automatically immediately before memory is deallocated for the instance. Do not call it explicitly in your applications. The Finalize method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the deallocation of memory for an object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Initialize\strike0{\v Scribble8780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.FindAttribute}
{\up K}{\footnote {\up K} FindAttribute;FindAttribute,TInstantObject;TInstantObject,FindAttribute;}
{\up A}{\footnote {\up A} FindAttribute;FindAttribute_Method;TInstantObject_FindAttribute}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.FindAttribute \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8690} 
\par \pard\sb25\sa85\tx1435\fs18 Searches for an attribute by the its name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  FindAttribute(\b const\b0  AttributeName: \b string\b0 ): \strike TInstantAttribute\strike0{\v Scribble2170>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call FindAttribute to search for an attribute by its name. FindAttribute returns the \strike TInstantAttribute\strike0{\v Scribble2170>main} object for the specified attribute name. It is only rarely necessary to call FindAttribute since fields for the attributes are present in the class declaration. If the Attribute does not exist, FindAttribute returns nil.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  An application should not access the attributes of objects directly. Instead the classes that hold the attributes should also introduce properties and methods through which the attributes can be manipulated. Using this approach, attributes and the logic accompanying them can be encapsulated in the classes to which they belong.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AttributeByName\strike0{\v Scribble8140>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.FindContainer}
{\up K}{\footnote {\up K} FindContainer;FindContainer,TInstantObject;TInstantObject,FindContainer;}
{\up A}{\footnote {\up A} FindContainer;FindContainer_Method;TInstantObject_FindContainer}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.FindContainer \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8710} 
\par \pard\sb25\sa85\tx1435\fs18 Searches for a container by the its name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  FindContainer(\b const\b0  ContainerName: \b string\b0 ): \strike TInstantContainer\strike0{\v Scribble4300>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call FindContainer to search for a container by its name. FindContainer returns the \strike TInstantContainer\strike0{\v Scribble4300>main} object for the specified attribute name. It is only rarely necessary to call FindContainer since fields for the containers are present in the class declaration. If the container does not exist, FindContainer returns nil.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  An application should not access the attributes of objects directly. Instead the classes that hold the attributes should also introduce properties and methods through which the attributes can be manipulated. Using this approach, attributes and the logic accompanying them can be encapsulated in the classes to which they belong.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.ContainerByName\strike0{\v Scribble8450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.GenerateId}
{\up K}{\footnote {\up K} GenerateId;GenerateId,TInstantObject;TInstantObject,GenerateId;}
{\up A}{\footnote {\up A} GenerateId;GenerateId_Method;TInstantObject_GenerateId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.GenerateId \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8730}
\par \pard\sb25\sa85\tx1435\fs18 Generates an object id
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  GenerateId: \b string\b0 ; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 GenerateId is called automatically to generate an \strike Id\strike0{\v Scribble7570>main} for the instance. Normally it is not necessary to call this method explicitly. By default GenerateId calls \strike InstantGenerateId\strike0{\v Scribble11520>main}. Override this method to customize the \strike Id\strike0{\v Scribble7570>main} generation mechanism for a descendant class.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8730}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantConnector.GenerateId\strike0{\v Scribble4190>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.HandleError}
{\up K}{\footnote {\up K} HandleError;HandleError,TInstantObject;TInstantObject,HandleError;}
{\up A}{\footnote {\up A} HandleError;HandleError_Method;TInstantObject_HandleError}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.HandleError \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8750} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically when an error occurs to generate an \strike OnError\strike0{\v Scribble9150>main} event.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  HandleError(OperationType: \strike TInstantOperationType\strike0{\v Scribble12490>main}; E: Exception; \b var\b0  Action: \strike TInstantErrorAction\strike0{\v Scribble12280>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 HandleError is called automatically to handle errors that occur when the instance is stored, disposed or refreshed. Do not call it explicitly in your applications. The HandleError method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform special error handling tasks. The OperationType argument specifies during which kind of operation the error occurred. The E argument contains the causing Exception object. Use the Action argument to specify what kind of action should be performed in response to the Error.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.OnError\strike0{\v Scribble9150>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IndexOfObject}
{\up K}{\footnote {\up K} IndexOfObject;IndexOfObject,TInstantObject;TInstantObject,IndexOfObject;}
{\up A}{\footnote {\up A} IndexOfObject;IndexOfObject_Method;TInstantObject_IndexOfObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IndexOfObject \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8770} 
\par \pard\sb25\sa85\tx1435\fs18 Returns the index of a specified object in the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  IndexOfObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call IndexOf to get the zero-based index for a specified object in the default container of the instance. If an object is not in the container, IndexOfObject returns -1.
\par If an object appears more than once, IndexOfObject returns the index of the first occurrence of the object. If no default container is specified, IndexOfObject raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8770}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DefaultContainer\strike0{\v Scribble7540>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Initialize}
{\up K}{\footnote {\up K} Initialize;Initialize,TInstantObject;TInstantObject,Initialize;}
{\up A}{\footnote {\up A} Initialize;Initialize_Method;TInstantObject_Initialize}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Initialize \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8790}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after memory has been allocated for the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Initialize; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Initialize is called automatically immediately after memory has been allocated for the instance. Do not call it explicitly in your applications. The Initialize method implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to perform tasks in relation to the allocation of memory for an object. Initialize is the called when creating a new instance as well as when an existing instance is retrieved. Attribute objects have been created.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8790}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Finalize\strike0{\v Scribble8660>main}
\par \strike TInstantObject.AfterCreate\strike0{\v Scribble7980>main}
\par \strike TInstantObject.AfterRetrieve\strike0{\v Scribble8060>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8800}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.InsertObject}
{\up K}{\footnote {\up K} InsertObject;InsertObject,TInstantObject;TInstantObject,InsertObject;}
{\up A}{\footnote {\up A} InsertObject;InsertObject_Method;TInstantObject_InsertObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.InsertObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8810}
\par \pard\sb25\sa85\tx1435\fs18 Adds an object at a given position in the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InsertObject(\b Index\b0 : Integer; AObject: \strike TInstantObject\strike0{\v Scribble7390>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Insert to add an object at a position specified by the zero-based Index argument. Insert adds the object at the specified position, shifting the object that previously occupied that position, and all subsequent objects, up. If no default container is specified, InsertObject raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8810}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AddObject\strike0{\v Scribble7880>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.IsOperationAllowed}
{\up K}{\footnote {\up K} IsOperationAllowed;IsOperationAllowed,TInstantObject;TInstantObject,IsOperationAllowed;}
{\up A}{\footnote {\up A} IsOperationAllowed;IsOperationAllowed_Method;TInstantObject_IsOperationAllowed}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.IsOperationAllowed \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8830}
\par \pard\sb25\sa85\tx1435\fs18 Determines whether a specific operation is allowed or not.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  IsOperationAllowed(OperationType: \strike TInstantOperationType\strike0{\v Scribble12490>main}): Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use the IsOperationAllowed method to determine whether a specific operation is allowed for the instance. If the operation is allowed, the method returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8830}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.VerifyOperation\strike0{\v Scribble9060>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8840}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Metadata}
{\up K}{\footnote {\up K} Metadata;Metadata,TInstantObject;TInstantObject,Metadata;}
{\up A}{\footnote {\up A} Metadata;Metadata_Method;TInstantObject_Metadata}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Metadata \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Contains a reference to the metadata object associated with the class.
\par \pard\sb25\sa25\b\f7 class\b0  \b function\b0  Metadata: TInstantClassMetadata; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Metadata returns the metadata object associated with the class. The metadata object contains the specification for the class and the metadata for the attributes the class introduces. If no Metadata is associated with the class, an exception is raised. Metadata is used internally by the classes of the InstantObjects framework, and should normally not be accessed from your applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8850}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OwnedObjectChanged}
{\up K}{\footnote {\up K} OwnedObjectChanged;OwnedObjectChanged,TInstantObject;TInstantObject,OwnedObjectChanged;}
{\up A}{\footnote {\up A} OwnedObjectChanged;OwnedObjectChanged_Method;TInstantObject_OwnedObjectChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OwnedObjectChanged \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8860} 
\par \pard\sb25\sa85\tx1435\fs18 Called automatically immediately after an owned object has changed.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  OwnedObjectChanged(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 OwnedObjectChanged is called automatically immediately after an owned object has changed. Do not call it explicitly in your applications. The OwnedObjectChanged method implemented by \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override OwnedObjectChanged when creating a class that needs to perform special tasks related to the change of owned objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8860}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Changed\strike0{\v Scribble8330>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8870}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OwnerChanged}
{\up K}{\footnote {\up K} OwnerChanged;OwnerChanged,TInstantObject;TInstantObject,OwnerChanged;}
{\up A}{\footnote {\up A} OwnerChanged;OwnerChanged_Method;TInstantObject_OwnerChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OwnerChanged \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Called automatically immediately after the owner of the instance has changed.
\par \pard\sb25\sa25\b\f7 procedure\b0  OwnerChanged(OldOwner: \strike TInstantObject\strike0{\v Scribble7390>main}; OldOwnerAttribute: \strike TInstantComplex\strike0{\v Scribble3190>main}); \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 OwnerChanged is called automatically immediately after the owner of the instance has changed. Do not call it explicitly in your applications. The OwnerChanged method implemented by \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override OwnerChanged when creating a class that needs to perform special tasks related to the change of the owner. The OldOwner argument specifies the former owner of the instance and the OldOwnerAttribute argument specifies the former attribute to which the instance was associated.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8880}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.QueryInterface}
{\up K}{\footnote {\up K} QueryInterface;QueryInterface,TInstantObject;TInstantObject,QueryInterface;}
{\up A}{\footnote {\up A} QueryInterface;QueryInterface_Method;TInstantObject_QueryInterface}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.QueryInterface \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Returns a reference to a specified interface if that interface is supported by the instance.
\par \pard\sb25\sa25\b\f7 function\b0  QueryInterface(\b const\b0  IID: TGUID; \b out\b0  Obj): HResult; \b virtual\b0 ; \b stdcall\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 QueryInterface implements the IUnknown interface method, QueryInterface, defined by COM. For instances that support interfaces, QueryInterface returns a reference to the interface specified by the IID argument, as the Obj argument. If the instance does not support the interface, the Obj argument returns nil.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8890}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Refresh}
{\up K}{\footnote {\up K} Refresh;Refresh,TInstantObject;TInstantObject,Refresh;}
{\up A}{\footnote {\up A} Refresh;Refresh_Method;TInstantObject_Refresh}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Refresh \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8900} 
\par \pard\sb25\sa85\tx1435\fs18 Refreshes the attributes of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Refresh;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Refresh to ensure that attributes of the instance has the latest values from the database. Immediately before and after performing the refresh of the instance, Refresh calls the \strike BeforeRefresh\strike0{\v Scribble8260>main} and \strike AfterRefresh\strike0{\v Scribble8040>main} methods. If the instance is longer in the database, Refresh raises an exception. If the instance is owned, the owner is requested to refresh itself.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8900}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.RefreshAll\strike0{\v Scribble8910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.RefreshAll}
{\up K}{\footnote {\up K} RefreshAll;RefreshAll,TInstantObject;TInstantObject,RefreshAll;}
{\up A}{\footnote {\up A} RefreshAll;RefreshAll_Method;TInstantObject_RefreshAll}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.RefreshAll \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Refreshes all instances associated with a connector object.
\par \pard\sb25\sa25\b\f7 class\b0  \b procedure\b0  RefreshAll(AConnector: \strike TInstantConnector\strike0{\v Scribble3770>main}; Progress: \strike TInstantProgressEvent\strike0{\v Scribble12520>main});
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call RefreshAll to refresh all instances of the class associated with a connector object. The \strike Connector\strike0{\v Scribble7530>main} argument can optionally be used to specify a \strike Connector\strike0{\v Scribble7530>main} object. If the connector is not specified, RefreshAll uses the default connector. Use the progress argument to attach a progress event in order to receive progress information during the refresh process.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8920}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Release}
{\up K}{\footnote {\up K} Release;Release,TInstantObject;TInstantObject,Release;}
{\up A}{\footnote {\up A} Release;Release_Method;TInstantObject_Release}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Release \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8930} 
\par \pard\sb25\sa85\tx1435\fs18 Decrements the reference count for the number of references dependent on the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  Release: Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Release decrements the reference count and returns the resulting value of the reference count for the instance. It should not normally be necessary to call Release directly from your applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8930}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AddRef\strike0{\v Scribble7900>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8940}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.RemoveObject}
{\up K}{\footnote {\up K} RemoveObject;RemoveObject,TInstantObject;TInstantObject,RemoveObject;}
{\up A}{\footnote {\up A} RemoveObject;RemoveObject_Method;TInstantObject_RemoveObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.RemoveObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8950}
\par \pard\sb25\sa85\tx1435\fs18 Removes an object from the default container of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  RemoveObject(AObject: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 RemoveObject removes an object from the default container of the instance. If no default container is specified, \strike DeleteObject\strike0{\v Scribble8500>main} raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8950}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.DefaultContainer\strike0{\v Scribble7540>main}
\par \strike TInstantObject.DeleteObject\strike0{\v Scribble8500>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.ResetAttributes}
{\up K}{\footnote {\up K} ResetAttributes;ResetAttributes,TInstantObject;TInstantObject,ResetAttributes;}
{\up A}{\footnote {\up A} ResetAttributes;ResetAttributes_Method;TInstantObject_ResetAttributes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.ResetAttributes \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Resets the values of the attributes to their default values.
\par \pard\sb25\sa25\b\f7 procedure\b0  ResetAttributes;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use ResetAttribute\lang1033\f1 s\lang1040\f0  to reset the values of all attributes of the instance to their default values.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8970}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.RestoreState}
{\up K}{\footnote {\up K} RestoreState;RestoreState,TInstantObject;TInstantObject,RestoreState;}
{\up A}{\footnote {\up A} RestoreState;RestoreState_Method;TInstantObject_RestoreState}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.RestoreState \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble8980}
\par \pard\sb25\sa85\tx1435\fs18 Restores the state of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  RestoreState; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 RestoreState restores the state of the instance. RestoreState is called automatically. Do not call it explicitly in your applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8980}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.SaveState\strike0{\v Scribble9010>main}
\par \strike TInstantObject.ApplyState\strike0{\v Scribble8100>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble8990}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Retrieve}
{\up K}{\footnote {\up K} Retrieve;Retrieve,TInstantObject;TInstantObject,Retrieve;}
{\up A}{\footnote {\up A} Retrieve;Retrieve_Method;TInstantObject_Retrieve}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Retrieve \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9000} 
\par \pard\sb25\sa85\tx1435\fs18 Constructor that retrieves an existing instance from the database.
\par \pard\sb25\sa25\tx1435\b\f7 constructor\b0  Retrieve(\b const\b0  AObjectId: \b string\b0 ; CreateIfMissing: Boolean; \strike Refresh\strike0{\v Scribble8890>main}: Boolean; AConnector: \strike TInstantConnector\strike0{\v Scribble3770>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call Retrieve to retrieve an existing instance of a \strike TInstantObject\strike0{\v Scribble7390>main} descendant. Use the AObjectId argument to specify the \strike Id\strike0{\v Scribble7570>main} of the object that should be retrieved. If the object does not exist in the database, the CreateIfMissing argument can be set to True to enable creation of a new instance with the specified \strike Id\strike0{\v Scribble7570>main} instead. The \strike Refresh\strike0{\v Scribble8890>main} argument can be set to True to specify that if the object has already been retrieved from the database and resides in memory, it should be refreshed. The AConnector argument can optionally be used to specify the connector associated with the instance. If AConnector is not assigned, the default connector is used for the newly created instance. If also no default \strike Connector\strike0{\v Scribble7530>main} is specified, an exception is raised.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  Instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants exist only in one instance in memory. In order for the reference tracking mechanism to work correctly, no custom Retrieve constructors must be introduced in descendant classes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9000}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Create\strike0{\v Scribble8470>main}
\par \strike TInstantObject.Clone\strike0{\v Scribble8430>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9010}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.SaveState}
{\up K}{\footnote {\up K} SaveState;SaveState,TInstantObject;TInstantObject,SaveState;}
{\up A}{\footnote {\up A} SaveState;SaveState_Method;TInstantObject_SaveState}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.SaveState \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9020} 
\par \pard\sb25\sa85\tx1435\fs18 Saves the state of the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  SaveState; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 SaveState saves the state of the instance. The state of the instance denotes the values of:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab The \strike IsChanged\strike0{\v Scribble7600>main} property
\par \{bmct bm3.BMP\}\tab The \strike UpdateCount\strike0{\v Scribble7810>main} property
\par \{bmct bm3.BMP\}\tab The \strike PersistentId\strike0{\v Scribble7770>main} property
\par \pard\sb25\sa25\tx495 
\par SaveState is called automatically. Do not call it explicitly in your applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9020}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.ApplyState\strike0{\v Scribble8100>main}
\par \strike TInstantObject.RestoreState\strike0{\v Scribble8970>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Store}
{\up K}{\footnote {\up K} Store;Store,TInstantObject;TInstantObject,Store;}
{\up A}{\footnote {\up A} Store;Store_Method;TInstantObject_Store}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Store \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9040} 
\par \pard\sb25\sa85\tx1435\fs18 Stores an object in the database
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  Store(ConflictAction: \strike TInstantConflictAction\strike0{\v Scribble12180>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Store stores the instance in the database. If the instance has not yet been stored a new instance is added to the database. Otherwise the existing instance is updated. Immediately before and after performing the store of the instance, Store calls the \strike BeforeStore\strike0{\v Scribble8290>main} and \strike AfterStore\strike0{\v Scribble8080>main} methods. If the instance is owned, the owner is requested to Store itself. The ConflictAction argument specifies how the store operation should respond to conflicts.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9040}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Dispose\strike0{\v Scribble8570>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.Unchanged}
{\up K}{\footnote {\up K} TInstantObject,Unchanged;Unchanged;Unchanged,TInstantObject;}
{\up A}{\footnote {\up A} TInstantObject_Unchanged;Unchanged;Unchanged_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.Unchanged \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa85\fs18 Marks the instance as unchanged.
\par \pard\sb25\sa25\b\f7 procedure\b0  Unchanged;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Unchanged marks the instance as unchanged by setting its \strike IsChanged\strike0{\v Scribble7600>main} property to False. It should normally not be necessary to call Unchanged directly since it is called automatically if an instance is no longer changed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.VerifyOperation}
{\up K}{\footnote {\up K} TInstantObject,VerifyOperation;VerifyOperation;VerifyOperation,TInstantObject;}
{\up A}{\footnote {\up A} TInstantObject_VerifyOperation;VerifyOperation;VerifyOperation_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.VerifyOperation \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9070}
\par \pard\sb25\sa85\tx1435\fs18 Called automatically to verify that an operation may be carried out.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  VerifyOperation(OperationType: \strike TInstantOperationType\strike0{\v Scribble12490>main}): \strike TInstantVerificationResult\strike0{\v Scribble12600>main}; \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 VerifyOperation is called automatically to verify that a specific operation may be carried out. Do not call it explicitly in your applications. The VerifyOperation implemented in \strike TInstantObject\strike0{\v Scribble7390>main} does nothing. Override this method when creating a class that needs to verify operations before they are carried out. The method returns vrOk by default.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9070}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.IsOperationAllowed\strike0{\v Scribble8820>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9080}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OnAfterContentChange}
{\up K}{\footnote {\up K} OnAfterContentChange;OnAfterContentChange,TInstantObject;TInstantObject,OnAfterContentChange;}
{\up A}{\footnote {\up A} OnAfterContentChange;OnAfterContentChange_Event;TInstantObject_OnAfterContentChange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OnAfterContentChange \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9090} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs after the content of a container has changed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnAfterContentChange: \strike TInstantContentChangeEvent\strike0{\v Scribble12220>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnAfterContentChange event handler to take specific action after the content of a container of the instance has changed. The event does not occur if \strike DisableChanges\strike0{\v Scribble8540>main} has been called.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterContentChange\strike0{\v Scribble7960>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OnAttributeChanged}
{\up K}{\footnote {\up K} OnAttributeChanged;OnAttributeChanged,TInstantObject;TInstantObject,OnAttributeChanged;}
{\up A}{\footnote {\up A} OnAttributeChanged;OnAttributeChanged_Event;TInstantObject_OnAttributeChanged}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OnAttributeChanged \cf1\b0\fs16 
\par \strike TInstantObject\strike0{\v Scribble7390>main} 
\par \pard\sb25\sa85\fs18 Occurs when the value of an attribute has changed.
\par \pard\sb25\sa25\b\f7 property\b0  OnAttributeChanged: \strike TInstantAttributeChangeEvent\strike0{\v Scribble12120>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Write an OnAttributeChanged event handler to take specific action immediately after an attribute of the instance has changed. The Sender argument contains a reference to the object which the changed attribute, specified by the Attribute argument, belongs to. The event does not occur if \strike DisableChanges\strike0{\v Scribble8540>main} has been called.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OnBeforeContentChange}
{\up K}{\footnote {\up K} OnBeforeContentChange;OnBeforeContentChange,TInstantObject;TInstantObject,OnBeforeContentChange;}
{\up A}{\footnote {\up A} OnBeforeContentChange;OnBeforeContentChange_Event;TInstantObject_OnBeforeContentChange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OnBeforeContentChange \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9120}
\par \pard\sb25\sa85\tx1435\fs18 Occurs before the content of a container is changed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnBeforeContentChange: \strike TInstantContentChangeEvent\strike0{\v Scribble12220>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnBeforeContentChange event handler to take specific action before the content of a container of the instance is changed. The event does not occur if \strike DisableChanges\strike0{\v Scribble8540>main} has been called.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AfterContentChange\strike0{\v Scribble7960>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9130}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OnChange}
{\up K}{\footnote {\up K} OnChange;OnChange,TInstantObject;TInstantObject,OnChange;}
{\up A}{\footnote {\up A} OnChange;OnChange_Event;TInstantObject_OnChange}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OnChange \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9140} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs when the instance is changed
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnChange: \strike TInstantNotifyEvent\strike0{\v Scribble12470>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnChange event handler to take specific action immediately after the instance has changed. The Sender argument contains a reference to the changed instance. The event does not occur if \strike DisableChanges\strike0{\v Scribble8540>main} has been called.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9140}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Changed\strike0{\v Scribble8330>main}
\par \strike TInstantObject.DisableChanges\strike0{\v Scribble8540>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObject.OnError}
{\up K}{\footnote {\up K} OnError;OnError,TInstantObject;TInstantObject,OnError;}
{\up A}{\footnote {\up A} OnError;OnError_Event;TInstantObject_OnError}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObject.OnError \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantObject\strike0{\v Scribble7390>main}\tab\ul See Also\ulnone{\v Scribble9160} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs when the instance encounters an error during a store, dispose or refresh operation.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnError: \strike TInstantErrorEvent\strike0{\v Scribble12300>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnError event handler to respond to errors that arise when storing, disposing or refreshing an instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9160}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.HandleError\strike0{\v Scribble8740>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9170}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantOwnedCollection}
{\up +}{\footnote {\up +} classessymbol:000380}
{\up K}{\footnote {\up K} TInstantOwnedCollection;}
{\up A}{\footnote {\up A} TInstantOwnedCollection;TInstantOwnedCollection_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantOwnedCollection \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble9180}\tab\strike Members\strike0{\v Scribble9230>nav}\tab\strike Methods\strike0{\v Scribble9220>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantOwnedCollection is a collection that has an owner.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantOwnedCollection = \b class\b0 (\strike TInstantCollection\strike0{\v Scribble2970>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Use TInstantOwnedCollection to either create collection instances that has an owned, or descend from TInstantOwnedCollection to create collection classes that has an owner.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9180}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TCollection
\par \pard\li95\tx355\tab |
\par \strike TInstantCollection\strike0{\v Scribble2970>main}
\par \tab |
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9190}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantOwnedCollection Fields \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9200}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantOwnedCollection Properties \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9210}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantOwnedCollection Events \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9220}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantOwnedCollection Methods \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main} 
\par \pard\sb55\sa55\b\fs18 TInstantOwnedCollection
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Owner\strike0{\v Scribble9240>main}
\par \pard\sb55\sa55\b TInstantCollection
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Find\strike0{\v Scribble3040>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetItemNames\strike0{\v Scribble3050>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(const AName: string): Integer; overload;\strike0{\v Scribble3060>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike function IndexOf(Item: TInstantCollectionItem): Integer; overload;\strike0{\v Scribble3070>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble3080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9230}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantOwnedCollection Members \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main} 
\par \pard\sb55\sa55\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Owner\strike0{\v Scribble9240>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9240}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantOwnedCollection.Owner}
{\up K}{\footnote {\up K} Owner;Owner,TInstantOwnedCollection;TInstantOwnedCollection,Owner;}
{\up A}{\footnote {\up A} Owner;Owner_Method;TInstantOwnedCollection_Owner}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantOwnedCollection.Owner \cf1\b0\fs16 
\par \strike TInstantOwnedCollection\strike0{\v Scribble9170>main}
\par \pard\sb25\sa85\fs18 Indicates the owner of the collection.
\par \pard\sb25\sa25\b\f7 function\b0  Owner: TPersistent;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Owner to determine the owner of the collection. Although no assumptions can be made, the owner is usually the object that is responsible for creating and destroying the collection.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9250}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantPart}
{\up +}{\footnote {\up +} classessymbol:000390}
{\up K}{\footnote {\up K} TInstantPart;}
{\up A}{\footnote {\up A} TInstantPart;TInstantPart_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantPart \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\ul Hierarchy\ulnone{\v Scribble9280}\tab\strike Members\strike0{\v Scribble9350>nav}\tab\strike Methods\strike0{\v Scribble9330>nav}\tab\ul See Also\ulnone{\v Scribble9260}\tab\strike Example 1\strike0{\v Scribble9270>example}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 TInstantPart represents a part relationship to a single object.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantPart = \b class\b0 (\strike TInstantElement\strike0{\v Scribble6050>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantPart represents a part relationship to a single object. TInstantPart mainly implements functionality that has been introduced by its abstract ancestors. TInstantPart claims responsibility of an object that is set as its Value. This means that even though the reference to a particular object has been created independently of the part attribute, it is taken over and eventually destroyed by the part attribute if the object is set as the Value of the part attribute.
\par When attempting to get an unassigned Value of a part attribute, an instance of the class type specified by the RequiredClass property is created and returned by the part attribute. This implies that the Value of a part attribute is always assigned.
\par If the part attribute is owned, the owner of the part attribute will become the owner of the part object. When a part object is changed it notifies its owner.
\par Part Objects are retrieved from the database when their owning object is retrieved.
\par \pard\fi-195\li195\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b Note: \b0  Objects that serve as parts should be considered as integrated, replaceable entities of their owner. An object can participate in only one part relationship at the time. If the owner object is stored, disposed or refreshed, it is supposed cascade the store, dispose or refresh operation to its part objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9260}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9270}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantPart, Example 1}
{\up K}{\footnote {\up K} TInstantPart,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantPart\strike0{\v Scribble9250>main} 
\par \pard\keep\f7\fs18 Setting the value of a part attribute. Note that the created Obj instance is
\par only destroyed if an error occurs when setting the value of the part
\par attribute. Otherwise the reference is taken over by the part attribute.
\par 
\par procedure CreatePartObject(AClass: TInstantObjectClass; Part: TInstantPart);
\par var
\par   Obj: \strike TInstantObject\strike0{\v Scribble7390>main};
\par begin
\par   Obj := AClass.Create;
\par   try
\par     Part.Value := Obj;
\par   except
\par     Obj.Free;
\par     raise;
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9280}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantElement\strike0{\v Scribble6050>main}
\par \tab |
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9290}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantPart Fields \cf1\b0\fs16 
\par \strike TInstantPart\strike0{\v Scribble9250>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9300}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantPart Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantPart\strike0{\v Scribble9250>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9310}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6150>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9310}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9320}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantPart Events \cf1\b0\fs16 
\par \strike TInstantPart\strike0{\v Scribble9250>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9330}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantPart Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantPart\strike0{\v Scribble9250>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9340}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantPart
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble9370>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble9380>main}
\par \pard\sb55\sa55\tx355\b TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble6160>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble6170>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble6180>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike LoadObjectFromStream\strike0{\v Scribble6190>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike SaveObjectToStream\strike0{\v Scribble6210>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9340}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9350}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantPart Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantPart\strike0{\v Scribble9250>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9360}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble9370>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble9380>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9360}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantPart.HasValue}
{\up K}{\footnote {\up K} HasValue;HasValue,TInstantPart;TInstantPart,HasValue;}
{\up A}{\footnote {\up A} HasValue;HasValue_Method;TInstantPart_HasValue}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantPart.HasValue \cf1\b0\fs16 
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par \pard\sb25\sa85\fs18 Determines if the instance has been instantiated.
\par \pard\sb25\sa25\b\f7 function\b0  HasValue: Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasValue to determine if the instance associated with the element attribute has been instantiated. If the instance has been instantiated, HasValue returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantPart.Unchanged}
{\up K}{\footnote {\up K} TInstantPart,Unchanged;Unchanged;Unchanged,TInstantPart;}
{\up A}{\footnote {\up A} TInstantPart_Unchanged;Unchanged;Unchanged_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantPart.Unchanged \cf1\b0\fs16 
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par \pard\sb25\sa85\fs18 Marks the attribute as unchanged.
\par \pard\sb25\sa25\b\f7 procedure\b0  Unchanged; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Unchanged marks the attribute as unchanged by setting its IsChanged property to False. It should normally not be necessary to call Unchanged directly since it is called automatically if an attribute is no longer changed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantParts}
{\up +}{\footnote {\up +} classessymbol:000400}
{\up K}{\footnote {\up K} TInstantParts;}
{\up A}{\footnote {\up A} TInstantParts;TInstantParts_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantParts \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\ul Hierarchy\ulnone{\v Scribble9420}\tab\strike Members\strike0{\v Scribble9490>nav}\tab\strike Methods\strike0{\v Scribble9470>nav}\tab\ul See Also\ulnone{\v Scribble9400}\tab\strike Example 1\strike0{\v Scribble9410>example}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 TInstantParts represents a part relationship to multiple objects.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantParts = \b class\b0 (\strike TInstantContainer\strike0{\v Scribble4300>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantParts represents a part relationship to multiple object. TInstantParts mainly implements functionality that has been introduced by its abstract ancestors. TInstantParts claims responsibility of an object that is added to its array of objects. This means that even though the reference to a particular object has been created independently of the parts attribute, it is taken over and eventually destroyed by the parts attribute if the object is added to the parts attributes array of objects.
\par If the parts attribute is owned, the owner of the parts attribute will become the owner of the part object. When a part object is changed it notifies its owner.
\par Part Objects are retrieved from the database when their owning object is retrieved.
\par \pard\fi-195\li195\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b Note: \b0  Objects that serve as parts should be considered as integrated, replaceable entities of their owner. An object can participate in only one part relationship at the time. If the owner object is stored, disposed or refreshed, it is supposed cascade the store, dispose or refresh operation to its part objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9400}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReferences\strike0{\v Scribble9780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9410}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantParts, Example 1}
{\up K}{\footnote {\up K} TInstantParts,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantParts\strike0{\v Scribble9390>main}
\par \pard\keep\f7\fs18 Adding an object to the parts attributes array of objects. Note that the
\par created Obj instance is only destroyed if an error occurs when adding it to
\par the parts attributes array of objects. Otherwise the reference is taken over
\par by the parts attribute.
\par 
\par procedure CreatePartsObject(AClass: TInstantObjectClass; Parts: TInstantParts);
\par var
\par   Obj: \strike TInstantObject\strike0{\v Scribble7390>main};
\par begin
\par   Obj := AClass.Create;
\par   try
\par     Parts.Add(Obj);
\par   except
\par     Obj.Free;
\par     raise;
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9420}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantContainer\strike0{\v Scribble4300>main}
\par \tab |
\par \strike TInstantParts\strike0{\v Scribble9390>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9430}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantParts Fields \cf1\b0\fs16 
\par \strike TInstantParts\strike0{\v Scribble9390>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9440}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantParts Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantParts\strike0{\v Scribble9390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9450}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ChangeCount\strike0{\v Scribble4400>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Count\strike0{\v Scribble4410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Items\strike0{\v Scribble4430>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9450}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9460}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantParts Events \cf1\b0\fs16 
\par \strike TInstantParts\strike0{\v Scribble9390>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9470}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantParts Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantParts\strike0{\v Scribble9390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9480}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantParts
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble9510>main}
\par \pard\sb55\sa55\tx355\b TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Add\strike0{\v Scribble4450>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble4470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble4480>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Delete\strike0{\v Scribble4490>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble4510>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Exchange\strike0{\v Scribble4520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasItem\strike0{\v Scribble4540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOf\strike0{\v Scribble4550>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Insert\strike0{\v Scribble4560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadObjectsFromStream\strike0{\v Scribble4580>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Move\strike0{\v Scribble4600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble4620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveObjectsToStream\strike0{\v Scribble4640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Sort\strike0{\v Scribble4660>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9480}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9490}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantParts Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantParts\strike0{\v Scribble9390>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9500}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble9510>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9500}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantParts.Unchanged}
{\up K}{\footnote {\up K} TInstantParts,Unchanged;Unchanged;Unchanged,TInstantParts;}
{\up A}{\footnote {\up A} TInstantParts_Unchanged;Unchanged;Unchanged_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantParts.Unchanged \cf1\b0\fs16 
\par \strike TInstantParts\strike0{\v Scribble9390>main}
\par \pard\sb25\sa85\fs18 Marks the attribute as unchanged.
\par \pard\sb25\sa25\b\f7 procedure\b0  Unchanged; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Unchanged marks the attribute as unchanged by setting its IsChanged property to False. It should normally not be necessary to call Unchanged directly since it is called automatically if an attribute is no longer changed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference}
{\up +}{\footnote {\up +} classessymbol:000410}
{\up K}{\footnote {\up K} TInstantReference;}
{\up A}{\footnote {\up A} TInstantReference;TInstantReference_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\tx8520\ul Hierarchy\ulnone{\v Scribble9550}\tab\strike Members\strike0{\v Scribble9620>nav}\tab\strike Properties\strike0{\v Scribble9570>nav}\tab\strike Methods\strike0{\v Scribble9600>nav}\tab\ul See Also\ulnone{\v Scribble9530}\tab\strike Example 1\strike0{\v Scribble9540>example}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\tx7195\fs18 TInstantReference represents a reference relationship to a single object.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\f7 TInstantReference = \b class\b0 (\strike TInstantElement\strike0{\v Scribble6050>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b0 TInstantReference represents a reference relationship to a single object. Although TInstantReference introduces properties and methods that can be used to reference objects, it mainly implements functionality that has been introduced by its abstract ancestors.
\par TInstantReference takes its own reference to an object that is set as its Value. This means that an object that has been created independently of the reference attribute should also be destroyed independently of the reference attribute even though it has been set as its Value.
\par The Value of a reference attribute may be unassigned.
\par Reference relationships may be heterogeneous. This means that an object may reference objects that are stored in another database. The Connector property of TInstantReference is therefore writable. To enable this distributed behavior the Connector property should simply be assigned to a Connector object that connects to the right database.
\par Referenced objects are retrieved on demand. This means that the reference attribute will not retrieve the object it references until it is required. If a reference attribute references a non-existing object its Value property is nil.
\par \pard\fi-195\li195\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b Note: \b0  Referenced Objects should be considered as loosely coupled entities of other objects. No ownership is claimed by the object that defines the reference relationship. This implies that an object can participate in as many reference relationships, as it is required. Referenced objects are neither stored, disposed nor refreshed by the objects they are referenced by. If an object is owned, it cannot participate in a reference relationship.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9530}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantPart\strike0{\v Scribble9250>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9540}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantReference, Example 1}
{\up K}{\footnote {\up K} TInstantReference,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\keep\f7\fs18 Setting the value of a reference attribute. Note that the created Obj
\par instance is always destroyed. The reference attribute takes its own reference
\par to the object.
\par 
\par procedure CreateReferenceObject(AClass: TInstantObjectClass; Ref: TInstantReference);
\par var
\par   Obj: \strike TInstantObject\strike0{\v Scribble7390>main};
\par begin
\par   Obj := AClass.Create;
\par   try
\par     Ref.Value := Obj;
\par   finally
\par     Obj.Free;
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9550}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantElement\strike0{\v Scribble6050>main}
\par \tab |
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9560}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReference Fields \cf1\b0\fs16  
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9570}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReference Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantReference\strike0{\v Scribble9520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9580}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantReference
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike AllowOwned\strike0{\v Scribble9640>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsBroken\strike0{\v Scribble9650>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClass\strike0{\v Scribble9660>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClassName\strike0{\v Scribble9680>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectId\strike0{\v Scribble9700>main}
\par \pard\sb55\sa55\tx355\b TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble6150>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9580}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9590}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantReference Events \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9600}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReference Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantReference\strike0{\v Scribble9520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9610}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantReference
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DestroyObject\strike0{\v Scribble9720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasReference\strike0{\v Scribble9730>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble9740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure ReferenceObject(AObjectClass: TInstantObjectClass; const AObjectId: string); overload;\strike0{\v Scribble9750>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure ReferenceObject(const AObjectClassName: string; const AObjectId: string); overload;\strike0{\v Scribble9760>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble9770>main}
\par \pard\sb55\sa55\tx355\b TInstantElement
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble6160>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble6170>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble6180>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike LoadObjectFromStream\strike0{\v Scribble6190>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike SaveObjectToStream\strike0{\v Scribble6210>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9620}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReference Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantReference\strike0{\v Scribble9520>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble9630}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike AllowOwned\strike0{\v Scribble9640>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsBroken\strike0{\v Scribble9650>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClass\strike0{\v Scribble9660>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectClassName\strike0{\v Scribble9680>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectId\strike0{\v Scribble9700>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DestroyObject\strike0{\v Scribble9720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasReference\strike0{\v Scribble9730>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike HasValue\strike0{\v Scribble9740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure ReferenceObject(AObjectClass: TInstantObjectClass; const AObjectId: string); overload;\strike0{\v Scribble9750>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure ReferenceObject(const AObjectClassName: string; const AObjectId: string); overload;\strike0{\v Scribble9760>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble9770>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.AllowOwned}
{\up K}{\footnote {\up K} AllowOwned;AllowOwned,TInstantReference;TInstantReference,AllowOwned;}
{\up A}{\footnote {\up A} AllowOwned;AllowOwned_Property;TInstantReference_AllowOwned}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.AllowOwned \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Specifies whether the attribute should allow owned objects.
\par \pard\sb25\sa25\b\f7 property\b0  AllowOwned;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use AllowOwned to specify if the attribute should allow owned objects. When adding an object that is owned, dependence is created to an object that is internally managed by another instance. The default value of AllowOwned is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.IsBroken}
{\up K}{\footnote {\up K} IsBroken;IsBroken,TInstantReference;TInstantReference,IsBroken;}
{\up A}{\footnote {\up A} IsBroken;IsBroken_Property;TInstantReference_IsBroken}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.IsBroken \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Determines if the referenced object exists.
\par \pard\sb25\sa25\b\f7 property\b0  IsBroken: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use IsBroken to determine if the referenced object exists. If the object doesn't exist, IsBroken returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.ObjectClass}
{\up K}{\footnote {\up K} ObjectClass;ObjectClass,TInstantReference;TInstantReference,ObjectClass;}
{\up A}{\footnote {\up A} ObjectClass;ObjectClass_Property;TInstantReference_ObjectClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.ObjectClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantReference\strike0{\v Scribble9520>main}\tab\ul See Also\ulnone{\v Scribble9670}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class type of the referenced object.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClass: TInstantObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use ObjectClass to determine the class type of the referenced object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReference.ObjectClassName\strike0{\v Scribble9680>main}
\par \strike TInstantReference.ObjectId\strike0{\v Scribble9700>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.ObjectClassName}
{\up K}{\footnote {\up K} ObjectClassName;ObjectClassName,TInstantReference;TInstantReference,ObjectClassName;}
{\up A}{\footnote {\up A} ObjectClassName;ObjectClassName_Property;TInstantReference_ObjectClassName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.ObjectClassName \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantReference\strike0{\v Scribble9520>main}\tab\ul See Also\ulnone{\v Scribble9690}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class name for the referenced object.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClassName: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use ObjectClassName to determine the class name for the referenced object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReference.ObjectClass\strike0{\v Scribble9660>main}
\par \strike TInstantReference.ObjectId\strike0{\v Scribble9700>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.ObjectId}
{\up K}{\footnote {\up K} ObjectId;ObjectId,TInstantReference;TInstantReference,ObjectId;}
{\up A}{\footnote {\up A} ObjectId;ObjectId_Property;TInstantReference_ObjectId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.ObjectId \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantReference\strike0{\v Scribble9520>main}\tab\ul See Also\ulnone{\v Scribble9710}
\par \pard\sb25\sa85\tx1435\fs18 Specifies the Id of the referenced object.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectId: \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use ObjectId to determine the Id of the referenced object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReference.ObjectClass\strike0{\v Scribble9660>main}
\par \strike TInstantReference.ObjectClassName\strike0{\v Scribble9680>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.DestroyObject}
{\up K}{\footnote {\up K} DestroyObject;DestroyObject,TInstantReference;TInstantReference,DestroyObject;}
{\up A}{\footnote {\up A} DestroyObject;DestroyObject_Method;TInstantReference_DestroyObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.DestroyObject \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Destroys the instance.
\par \pard\sb25\sa25\b\f7 procedure\b0  DestroyObject;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call DestroyObject to destroy the instance associated with the reference attribute without clearing the reference.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9730}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.HasReference}
{\up K}{\footnote {\up K} HasReference;HasReference,TInstantReference;TInstantReference,HasReference;}
{\up A}{\footnote {\up A} HasReference;HasReference_Method;TInstantReference_HasReference}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.HasReference \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Specifies whether the reference references an object
\par \pard\sb25\sa25\b\f7 function\b0  HasReference: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasReference to determine if the reference references an object. If HasReference is True, the reference references an object. Otherwise the reference doesn't reference an object
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.HasValue}
{\up K}{\footnote {\up K} HasValue;HasValue,TInstantReference;TInstantReference,HasValue;}
{\up A}{\footnote {\up A} HasValue;HasValue_Method;TInstantReference_HasValue}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.HasValue \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Determines if the instance has been instantiated.
\par \pard\sb25\sa25\b\f7 function\b0  HasValue: Boolean; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use HasValue to determine if the instance associated with the element attribute has been instantiated. If the instance has been instantiated, HasValue returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9750}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.ReferenceObject}
{\up K}{\footnote {\up K} ReferenceObject;ReferenceObject,TInstantReference;TInstantReference,ReferenceObject;}
{\up A}{\footnote {\up A} ReferenceObject;ReferenceObject_Method;TInstantReference_ReferenceObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.ReferenceObject \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main} 
\par \pard\sb25\sa85\fs18 Sets the reference of the attribute to point to another object.
\par \pard\sb25\sa25\b\f7 procedure\b0  \strike ReferenceObject\strike0{\v Scribble9760>main}(AObjectClass: TInstantObjectClass; \b const\b0  AObjectId: \b string\b0 ); \b overload\b0 ;
\par \b procedure\b0  \strike ReferenceObject\strike0{\v Scribble9760>main}(\b const\b0  AObjectClassName: \b string\b0 ; \b const\b0  AObjectId: \b string\b0 ); \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Reference object to make the attribute reference another object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.ReferenceObject}
{\up K}{\footnote {\up K} ReferenceObject;ReferenceObject,TInstantReference;TInstantReference,ReferenceObject;}
{\up A}{\footnote {\up A} ReferenceObject;ReferenceObject_Method;TInstantReference_ReferenceObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.ReferenceObject \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Sets the reference of the attribute to point to another object.
\par \pard\sb25\sa25\b\f7 procedure\b0  ReferenceObject(AObjectClass: TInstantObjectClass; \b const\b0  AObjectId: \b string\b0 ); \b overload\b0 ;
\par \b procedure\b0  ReferenceObject(\b const\b0  AObjectClassName: \b string\b0 ; \b const\b0  AObjectId: \b string\b0 ); \b overload\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Reference object to make the attribute reference another object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9770}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReference.Reset}
{\up K}{\footnote {\up K} Reset;Reset,TInstantReference;TInstantReference,Reset;}
{\up A}{\footnote {\up A} Reset;Reset_Method;TInstantReference_Reset}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReference.Reset \cf1\b0\fs16 
\par \strike TInstantReference\strike0{\v Scribble9520>main}
\par \pard\sb25\sa85\fs18 Resets the actual value of the attribute to the initialization value.
\par \pard\sb25\sa25\b\f7 procedure\b0  Reset; \b override\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Reset to reset the value of the attribute to its initialization value. Reset calls Initialize to do the initialization.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReferences}
{\up +}{\footnote {\up +} classessymbol:000420}
{\up K}{\footnote {\up K} TInstantReferences;}
{\up A}{\footnote {\up A} TInstantReferences;TInstantReferences_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReferences \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7100\tx8520\ul Hierarchy\ulnone{\v Scribble9810}\tab\strike Members\strike0{\v Scribble9880>nav}\tab\strike Properties\strike0{\v Scribble9830>nav}\tab\strike Methods\strike0{\v Scribble9860>nav}\tab\ul See Also\ulnone{\v Scribble9790}\tab\strike Example 1\strike0{\v Scribble9800>example}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\tx7195\fs18 TInstantReferences represents a reference relationship to multiple objects.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\f7 TInstantReferences = \b class\b0 (\strike TInstantContainer\strike0{\v Scribble4300>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b0 TInstantReferences represents a reference relationship to multiple objects. \strike TInstantReference\strike0{\v Scribble9520>main} mainly implements functionality that has been introduced by its abstract ancestors.
\par TInstantReferences takes its own reference to an object that is added to its array of objects. This means that an object that has been created independently of the references attribute should also be destroyed independently of the references attribute even though it has been added to its array of objects.
\par Reference relationships may be heterogeneous. This means that an object may reference objects that are stored in another database. The Connector property of TInstantReferences is therefore writable. To enable this distributed behavior the Connector property should simply be assigned to a Connector object that connects to the right database.
\par Referenced objects are retrieved on demand. This means that the references attribute will not retrieve the objects it references until they are required individually. If a references attribute references a non-existing object, the position the object occupies in the attributes array of objects will be nil.
\par \pard\fi-195\li195\sb25\sa25\tx1435\tx2875\tx4315\tx5755\tx7195\b Note: \b0  Referenced Objects should be considered as loosely coupled entities of other objects. No ownership is claimed by the object that defines the reference relationship. This implies that an object can participate in as many reference relationships, as it is required. Referenced objects are neither stored, disposed nor refreshed by the objects they are referenced by. If an object is owned, it cannot participate in a reference relationship.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9790}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantParts\strike0{\v Scribble9390>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9800}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} TInstantReferences, Example 1}
{\up K}{\footnote {\up K} TInstantReferences,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike TInstantReferences\strike0{\v Scribble9780>main} 
\par \pard\keep\f7\fs18 Adding an object to the references attributes array of objects. Note that the
\par created Obj instance is always destroyed. The references attribute takes its
\par own reference to the object.
\par 
\par procedure CreateReferencesObject(AClass: TInstantObjectClass; Ref: TInstantReferences);
\par var
\par   Obj: \strike TInstantObject\strike0{\v Scribble7390>main};
\par begin
\par   Obj := AClass.Create;
\par   try
\par     Ref.Add(Obj);
\par   finally
\par     Obj.Free;
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9810}
}
\viewkind4\uc1\pard\sb55\sa25\cf1\lang1040\b\f0\fs18 Class Hierarchy
\par 
\par \pard\li95\b0 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \tab |
\par \strike TInstantContainer\strike0{\v Scribble4300>main}
\par \tab |
\par \strike TInstantReferences\strike0{\v Scribble9780>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9820}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReferences Fields \cf1\b0\fs16 
\par \strike TInstantReferences\strike0{\v Scribble9780>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9830}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReferences Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantReferences\strike0{\v Scribble9780>main}\tab\lang1033\f1\tab\cf2\lang1040\ul\f0 Legend\cf3\ulnone{\v Scribble9840}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantReferences
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike AllowOwned\strike0{\v Scribble9900>main}
\par \pard\sb55\sa55\tx355\b TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ChangeCount\strike0{\v Scribble4400>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Count\strike0{\v Scribble4410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Items\strike0{\v Scribble4430>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike AllowOwned\strike0{\v Scribble3300>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Connector\strike0{\v Scribble3310>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClass\strike0{\v Scribble3320>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike RequiredClassName\strike0{\v Scribble3340>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9840}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9850}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantReferences Events \cf1\b0\fs16 
\par \strike TInstantReferences\strike0{\v Scribble9780>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9860}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReferences Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantReferences\strike0{\v Scribble9780>main}\tab\lang1033\f1\tab\cf2\lang1040\ul\f0 Legend\cf3\ulnone{\v Scribble9870}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantReferences
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DestroyObject\strike0{\v Scribble9910>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadReferencesFromStream\strike0{\v Scribble9920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveReferencesToStream\strike0{\v Scribble9940>main}
\par \pard\sb55\sa55\tx355\b TInstantContainer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Add\strike0{\v Scribble4450>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble4470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble4480>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Delete\strike0{\v Scribble4490>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble4510>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Exchange\strike0{\v Scribble4520>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike HasItem\strike0{\v Scribble4540>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOf\strike0{\v Scribble4550>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Insert\strike0{\v Scribble4560>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadObjectsFromStream\strike0{\v Scribble4580>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Move\strike0{\v Scribble4600>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remove\strike0{\v Scribble4620>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveObjectsToStream\strike0{\v Scribble4640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Sort\strike0{\v Scribble4660>main}
\par \pard\sb55\sa55\tx355\b TInstantComplex
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike AttachObject\strike0{\v Scribble3360>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike DetachObject\strike0{\v Scribble3370>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ValidateObject\strike0{\v Scribble3380>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantReferences Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantReferences\strike0{\v Scribble9780>main}\tab\lang1033\f1\tab\cf2\lang1040\ul\f0 Legend\cf3\ulnone{\v Scribble9890}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm7.BMP\} \strike AllowOwned\strike0{\v Scribble9900>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DestroyObject\strike0{\v Scribble9910>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadReferencesFromStream\strike0{\v Scribble9920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveReferencesToStream\strike0{\v Scribble9940>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9890}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par \{bmct bm7.BMP\} write only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9900}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReferences.AllowOwned}
{\up K}{\footnote {\up K} AllowOwned;AllowOwned,TInstantReferences;TInstantReferences,AllowOwned;}
{\up A}{\footnote {\up A} AllowOwned;AllowOwned_Property;TInstantReferences_AllowOwned}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReferences.AllowOwned \cf1\b0\fs16 
\par \strike TInstantReferences\strike0{\v Scribble9780>main}
\par \pard\sb25\sa85\fs18 Specifies whether the attribute should allow owned objects.
\par \pard\sb25\sa25\b\f7 property\b0  AllowOwned;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use AllowOwned to specify if the attribute should allow owned objects. When adding an object that is owned, dependence is created to an object that is internally managed by another instance. The default value of AllowOwned is False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReferences.DestroyObject}
{\up K}{\footnote {\up K} DestroyObject;DestroyObject,TInstantReferences;TInstantReferences,DestroyObject;}
{\up A}{\footnote {\up A} DestroyObject;DestroyObject_Method;TInstantReferences_DestroyObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReferences.DestroyObject \cf1\b0\fs16 
\par \strike TInstantReferences\strike0{\v Scribble9780>main}
\par \pard\sb25\sa85\fs18 Destroys an instance in the items array.
\par \pard\sb25\sa25\b\f7 procedure\b0  DestroyObject(\b Index\b0 : Integer);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call DestroyObject to destroy the instance at the position specified by the Index argument in the Items array without clearing the reference.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9920}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReferences.LoadReferencesFromStream}
{\up K}{\footnote {\up K} LoadReferencesFromStream;LoadReferencesFromStream,TInstantReferences;TInstantReferences,LoadReferencesFromStream;}
{\up A}{\footnote {\up A} LoadReferencesFromStream;LoadReferencesFromStream_Method;TInstantReferences_LoadReferencesFromStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReferences.LoadReferencesFromStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantReferences\strike0{\v Scribble9780>main}\tab\ul See Also\ulnone{\v Scribble9930}
\par \pard\sb25\sa85\tx1435\fs18 Loads object references from a stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  LoadReferencesFromStream(AStream: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call LoadReferencesFromStream to load the object references that the instance should contain from a stream.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9930}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReferences.SaveReferencesToStream\strike0{\v Scribble9940>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9940}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantReferences.SaveReferencesToStream}
{\up K}{\footnote {\up K} SaveReferencesToStream;SaveReferencesToStream,TInstantReferences;TInstantReferences,SaveReferencesToStream;}
{\up A}{\footnote {\up A} SaveReferencesToStream;SaveReferencesToStream_Method;TInstantReferences_SaveReferencesToStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantReferences.SaveReferencesToStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantReferences\strike0{\v Scribble9780>main}\tab\ul See Also\ulnone{\v Scribble9950}
\par \pard\sb25\sa85\tx1435\fs18 Saves object references to a stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  SaveReferencesToStream(AStream: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call SaveReferencesToStream to save the object references that the instance contains to a stream.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9950}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantReferences.LoadReferencesFromStream\strike0{\v Scribble9920>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9960}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantRelationalConnector}
{\up +}{\footnote {\up +} classessymbol:000430}
{\up K}{\footnote {\up K} TInstantRelationalConnector;}
{\up A}{\footnote {\up A} TInstantRelationalConnector;TInstantRelationalConnector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantRelationalConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble9970}\tab\strike Members\strike0{\v Scribble10040>nav}\tab\strike Properties\strike0{\v Scribble9990>nav}\tab\strike Events\strike0{\v Scribble10010>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 Provides access to a database.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\strike\f7 TInstantConnectorClass\strike0{\v Scribble12210>main} = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9970}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TComponent
\par \pard\li95\tx355\tab |
\par \strike TInstantConnector\strike0{\v Scribble3770>main}
\par \tab |
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9980}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantRelationalConnector Fields \cf1\b0\fs16 
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble9990}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantRelationalConnector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantRelationalConnector\strike0{\v Scribble9960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10000}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterConnect\strike0{\v Scribble3870>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AfterDisconnect\strike0{\v Scribble3890>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeConnect\strike0{\v Scribble3910>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeDisconnect\strike0{\v Scribble3930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Broker\strike0{\v Scribble3950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ClientCount\strike0{\v Scribble3960>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Clients\strike0{\v Scribble3980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connected\strike0{\v Scribble4000>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DatabaseName\strike0{\v Scribble4010>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InTransaction\strike0{\v Scribble4020>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike InUse\strike0{\v Scribble4030>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike IsDefault\strike0{\v Scribble4040>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble4050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble4060>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike UseTransactions\strike0{\v Scribble4080>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10000}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10010}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantRelationalConnector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantRelationalConnector\strike0{\v Scribble9960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10020}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantRelationalConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\sb55\sa55\tx355\b TInstantConnector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike BeforeBuildDatabase\strike0{\v Scribble4290>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10020}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10030}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantRelationalConnector Methods \cf1\b0\fs16 
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main} 
\par \pard\sb55\sa55\b\fs18 TInstantConnector
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(Model: TInstantModel); overload;\strike0{\v Scribble4090>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike procedure BuildDatabase(AClasses: array of TInstantObjectClass); overload;\strike0{\v Scribble4100>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CommitTransaction\strike0{\v Scribble4110>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Connect\strike0{\v Scribble4130>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateQuery\strike0{\v Scribble4150>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Disconnect\strike0{\v Scribble4160>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnsureObjectStore\strike0{\v Scribble4180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GenerateId\strike0{\v Scribble4190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RegisterClient\strike0{\v Scribble4210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RollbackTransaction\strike0{\v Scribble4230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike StartTransaction\strike0{\v Scribble4250>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike UnregisterClient\strike0{\v Scribble4270>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10040}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantRelationalConnector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantRelationalConnector\strike0{\v Scribble9960>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10050}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DBMSName\strike0{\v Scribble10060>main}
\par \pard\sb55\sa55\tx355\b Events
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnGetDataSet\strike0{\v Scribble10070>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitDataSet\strike0{\v Scribble10090>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10050}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10060}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantRelationalConnector.DBMSName}
{\up K}{\footnote {\up K} DBMSName;DBMSName,TInstantRelationalConnector;TInstantRelationalConnector,DBMSName;}
{\up A}{\footnote {\up A} DBMSName;DBMSName_Property;TInstantRelationalConnector_DBMSName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantRelationalConnector.DBMSName \cf1\b0\fs16 
\par \strike TInstantRelationalConnector\strike0{\v Scribble9960>main}
\par \pard\sb25\sa85\fs18 Determines the name of the DBMS the connector component connects to.
\par \pard\sb25\sa25\b\f7 property\b0  DBMSName: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use DBMSName to determine the name of the DBMS (Database management system) the connector component connects to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10070}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantRelationalConnector.OnGetDataSet}
{\up K}{\footnote {\up K} OnGetDataSet;OnGetDataSet,TInstantRelationalConnector;TInstantRelationalConnector,OnGetDataSet;}
{\up A}{\footnote {\up A} OnGetDataSet;OnGetDataSet_Event;TInstantRelationalConnector_OnGetDataSet}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantRelationalConnector.OnGetDataSet \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantRelationalConnector\strike0{\v Scribble9960>main}\tab\ul See Also\ulnone{\v Scribble10080} 
\par \pard\sb25\sa85\tx1435\fs18 Occurs when the persistence mechanism request a dataset.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnGetDataSet: \strike TInstantGetDataSetEvent\strike0{\v Scribble12410>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an OnGetDataSet event handler to supply dataset components to the persistence mechanism associated with the connector component.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  This event occurs only for persistence mechanisms that accesses the database through instances of TDataSet descendants.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10080}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantRelationalConnector.OnInitDataSet\strike0{\v Scribble10090>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10090}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantRelationalConnector.OnInitDataSet}
{\up K}{\footnote {\up K} OnInitDataSet;OnInitDataSet,TInstantRelationalConnector;TInstantRelationalConnector,OnInitDataSet;}
{\up A}{\footnote {\up A} OnInitDataSet;OnInitDataSet_Event;TInstantRelationalConnector_OnInitDataSet}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantRelationalConnector.OnInitDataSet \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantRelationalConnector\strike0{\v Scribble9960>main}\tab\ul See Also\ulnone{\v Scribble10100}
\par \pard\sb25\sa85\tx1435\fs18 Occurs when the persistence mechanism initializes a dataset.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  OnInitDataSet: \strike TInstantInitDataSetEvent\strike0{\v Scribble12440>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Write an \strike OnGetDataSet\strike0{\v Scribble10070>main} event handler to initialize dataset components used by the persistence mechanism associated with the connector component.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  This event occurs only for persistence mechanisms that accesses the database through instances of TDataSet descendants.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10100}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantRelationalConnector.OnGetDataSet\strike0{\v Scribble10070>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantResourceStream}
{\up +}{\footnote {\up +} classessymbol:000440}
{\up K}{\footnote {\up K} TInstantResourceStream;}
{\up A}{\footnote {\up A} TInstantResourceStream;TInstantResourceStream_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantResourceStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble10120}\tab\strike Members\strike0{\v Scribble10170>nav}\tab\strike Methods\strike0{\v Scribble10160>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantResourceStream provides access to a compiled resource in the application.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantResourceStream = \b class\b0 (\strike TInstantStream\strike0{\v Scribble10540>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Use TInstantResourceStream to access a resource of a Windows application. Like all \strike TInstantStream\strike0{\v Scribble10540>main} objects, TInstantResourceStream uses a source stream that handles the streaming. The Source stream of TInstantResourceStream is a TResourceStream object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TStream
\par \pard\li95\tx355\tab |
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \tab |
\par \strike TInstantResourceStream\strike0{\v Scribble10110>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10130}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantResourceStream Fields \cf1\b0\fs16  
\par \strike TInstantResourceStream\strike0{\v Scribble10110>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10140}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantResourceStream Properties \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1 
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FreeSource\strike0{\v Scribble10610>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Source\strike0{\v Scribble10620>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10150}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantResourceStream Events \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnProcessObject\strike0{\v Scribble10820>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10160}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantResourceStream Methods \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1
\par \pard\sb55\sa55\b\fs18 TInstantResourceStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateFromId\strike0{\v Scribble10190>main}
\par \pard\sb55\sa55\b TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AlignStream\strike0{\v Scribble10640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObject\strike0{\v Scribble10660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObjectRes\strike0{\v Scribble10680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResHeader\strike0{\v Scribble10700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObject\strike0{\v Scribble10740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObjectRes\strike0{\v Scribble10760>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceHeader\strike0{\v Scribble10800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10170}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantResourceStream Members \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1 
\par \pard\sb55\sa55\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike CreateFromId\strike0{\v Scribble10190>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantResourceStream.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantResourceStream;TInstantResourceStream,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantResourceStream_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantResourceStream.Create \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1
\par \pard\sb25\sa85\fs18 Creates an instance of \strike TInstantResourceStream\strike0{\v Scribble10110>main} associated with a particular resource.
\par \pard\sb25\sa25\b\f7 constructor\b0  Create(Instance: THandle; \b const\b0  ResName: \b string\b0 ; ResType: PChar);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Create to instantiate a \strike TInstantResourceStream\strike0{\v Scribble10110>main}. The Instance argument specifies the handle associated with the executable or DLL. The Resname argument specifies the name of the resource. The ResType argument specifies the type of the resource. Windows provides a number of predefined resource types. Please refer to the Windows SDK online help for further information.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantResourceStream.CreateFromId}
{\up K}{\footnote {\up K} CreateFromId;CreateFromId,TInstantResourceStream;TInstantResourceStream,CreateFromId;}
{\up A}{\footnote {\up A} CreateFromId;CreateFromId_Method;TInstantResourceStream_CreateFromId}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantResourceStream.CreateFromId \cf1\b0\fs16 
\par \cf2\strike TInstantResourceStream\cf3\strike0{\v Scribble10110>main}\cf1
\par \pard\sb25\sa85\fs18 Creates an instance of \strike TInstantResourceStream\strike0{\v Scribble10110>main} associated with a particular resource.
\par \pard\sb25\sa25\b\f7 constructor\b0  CreateFromId(Instance: THandle; ResID: Integer; ResType: PChar);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call \strike Create\strike0{\v Scribble10180>main} to instantiate a \strike TInstantResourceStream\strike0{\v Scribble10110>main}. The Instance argument specifies the handle associated with the executable or DLL. The ResId argument specifies the Id of the resource. The ResType argument specifies the type of the resource. Windows provides a number of predefined resource types. Please refer to the Windows SDK online help for further information.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10200}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector}
{\up +}{\footnote {\up +} classessymbol:000450}
{\up K}{\footnote {\up K} TInstantSelector;}
{\up A}{\footnote {\up A} TInstantSelector;TInstantSelector_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble10220}\tab\strike Members\strike0{\v Scribble10300>nav}\tab\strike Properties\strike0{\v Scribble10240>nav}\tab\ul See Also\ulnone{\v Scribble10210}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantSelector provides dataset-based access to a selection of objects.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantSelector = \b class\b0 (\strike TInstantCustomExposer\strike0{\v Scribble4790>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 TInstantSelector exposes a selection of objects. The objects are selected by the means of a \strike Command\strike0{\v Scribble10330>main} statement. The selector is independent of the kind of database from which the selection is to be made. The syntax of the \strike Command\strike0{\v Scribble10330>main} statement is therefore also database independent. When performing the selection, the \strike Command\strike0{\v Scribble10330>main} statement is parsed and translated to a statement that is understandable by the database to which the selector is connected through its \strike Connector\strike0{\v Scribble10340>main} property.
\par The selection of objects may be modified by adding or removing objects to and from the selector components array of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10210}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantExposer\strike0{\v Scribble6450>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10220}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TDataSet
\par \pard\li95\tx355\tab |
\par \strike TInstantCustomExposer\strike0{\v Scribble4790>main}
\par \tab |
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10230}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSelector Fields \cf1\b0\fs16  
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10240}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSelector Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10250}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 TInstantSelector
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AutoOpen\strike0{\v Scribble10320>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Command\strike0{\v Scribble10330>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connector\strike0{\v Scribble10340>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MaxCount\strike0{\v Scribble10350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ObjectClass\strike0{\v Scribble10360>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ObjectClassName\strike0{\v Scribble10380>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ParamCheck\strike0{\v Scribble10400>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Params\strike0{\v Scribble10410>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Query\strike0{\v Scribble10420>main}
\par \pard\sb55\sa55\tx355\b TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Accessor\strike0{\v Scribble4900>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ContainerName\strike0{\v Scribble4910>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike CurrentObject\strike0{\v Scribble4920>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike FieldOptions\strike0{\v Scribble4930>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike HasSubject\strike0{\v Scribble4950>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsChanged\strike0{\v Scribble4980>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Limited\strike0{\v Scribble5000>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Mode\strike0{\v Scribble5020>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClass\strike0{\v Scribble5030>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike ObjectClassName\strike0{\v Scribble5050>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike ObjectCount\strike0{\v Scribble5070>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Objects\strike0{\v Scribble5090>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Options\strike0{\v Scribble5110>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ReadOnly\strike0{\v Scribble5120>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Sorted\strike0{\v Scribble5130>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Subject\strike0{\v Scribble5150>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike TotalCount\strike0{\v Scribble5160>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10250}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10260}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSelector Events \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10270}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCompare\strike0{\v Scribble5520>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnCreateObject\strike0{\v Scribble5540>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnFieldError\strike0{\v Scribble5550>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnIncludeField\strike0{\v Scribble5570>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitField\strike0{\v Scribble5600>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnInitFieldDef\strike0{\v Scribble5620>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike OnLimit\strike0{\v Scribble5640>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10280}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSelector Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10290}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantCustomExposer
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AddObject\strike0{\v Scribble5180>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ApplyChanges\strike0{\v Scribble5190>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AssignFieldValue\strike0{\v Scribble5200>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ChangesDisabled\strike0{\v Scribble5210>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Clear\strike0{\v Scribble5230>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DeleteObject\strike0{\v Scribble5240>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike DisableChanges\strike0{\v Scribble5260>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike EnableChanges\strike0{\v Scribble5280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GetFieldStrings\strike0{\v Scribble5300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike GotoObject\strike0{\v Scribble5310>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike HandleFieldError\strike0{\v Scribble5320>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike IncludeField\strike0{\v Scribble5330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IndexOfObject\strike0{\v Scribble5340>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitField\strike0{\v Scribble5350>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike InitFieldDef\strike0{\v Scribble5360>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike InsertObject\strike0{\v Scribble5370>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFields\strike0{\v Scribble5380>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike PostChanges\strike0{\v Scribble5390>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshCurrentObject\strike0{\v Scribble5400>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RefreshData\strike0{\v Scribble5410>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReleaseObject\strike0{\v Scribble5420>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Remember\strike0{\v Scribble5430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike RemoveObject\strike0{\v Scribble5450>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Reset\strike0{\v Scribble5470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Revert\strike0{\v Scribble5480>main}
\par \{bmct bm0.BMP\}\{bmct bm5.BMP\} \strike Undo\strike0{\v Scribble5500>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10300}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSelector Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10310}\cf1
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike AutoOpen\strike0{\v Scribble10320>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Command\strike0{\v Scribble10330>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Connector\strike0{\v Scribble10340>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike MaxCount\strike0{\v Scribble10350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ObjectClass\strike0{\v Scribble10360>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ObjectClassName\strike0{\v Scribble10380>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike ParamCheck\strike0{\v Scribble10400>main}
\par \{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Params\strike0{\v Scribble10410>main}
\par \{bmct bm5.BMP\}\{bmct bm1.BMP\} \strike Query\strike0{\v Scribble10420>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10310}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.AutoOpen}
{\up K}{\footnote {\up K} AutoOpen;AutoOpen,TInstantSelector;TInstantSelector,AutoOpen;}
{\up A}{\footnote {\up A} AutoOpen;AutoOpen_Property;TInstantSelector_AutoOpen}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.AutoOpen \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par \pard\sb25\sa85\fs18 Specifies if the selector should be automatically opened.
\par \pard\sb25\sa25\b\f7 property\b0  AutoOpen: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Specifies if the selector should be automatically opened after it has been loaded.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.Command}
{\up K}{\footnote {\up K} Command;Command,TInstantSelector;TInstantSelector,Command;}
{\up A}{\footnote {\up A} Command;Command_Property;TInstantSelector_Command}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.Command \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main} 
\par \pard\sb25\sa85\fs18 Specifies command to be executed.
\par \pard\sb25\sa25\b\f7 property\b0  Command: TStringList;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Command to specify the command to execute. Command is a textual representation of a command that results in an extend of objects when executed.
\par The Command has the following syntax:
\par \pard\keep\f7 
\par   SELECT [DISTINCT] * | ObjectPath
\par   FROM [ANY] ClassRef
\par   [WHERE Clause]
\par   [ORDER BY Order]
\par \pard\sb25\sa25\f0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.Connector}
{\up K}{\footnote {\up K} Connector;Connector,TInstantSelector;TInstantSelector,Connector;}
{\up A}{\footnote {\up A} Connector;Connector_Property;TInstantSelector_Connector}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.Connector \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par \pard\sb25\sa85\fs18 Specifies the used connector component.
\par \pard\sb25\sa25\b\f7 property\b0  Connector: \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Connector specifies the used connector component. The connector serves as the conduit between the selector component and the database from which the selection is to be performed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.MaxCount}
{\up K}{\footnote {\up K} MaxCount;MaxCount,TInstantSelector;TInstantSelector,MaxCount;}
{\up A}{\footnote {\up A} MaxCount;MaxCount_Property;TInstantSelector_MaxCount}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.MaxCount \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main} 
\par \pard\sb25\sa85\fs18 Specifies the maximum number of objects
\par \pard\sb25\sa25\b\f7 property\b0  MaxCount: Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Specifies the maximum number of objects for the selectors extend of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.ObjectClass}
{\up K}{\footnote {\up K} ObjectClass;ObjectClass,TInstantSelector;TInstantSelector,ObjectClass;}
{\up A}{\footnote {\up A} ObjectClass;ObjectClass_Property;TInstantSelector_ObjectClass}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.ObjectClass \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\ul See Also\ulnone{\v Scribble10370} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The exposer uses dataset fields to access properties of exposed objects. ObjectClass specifies the common base class of the objects being exposed. By default, the accessor created by the exposer to access the subject will determine the class from the attached subject. TInstantCustomExposer therefore introduces the ObjectClass property as read-only, but descendants may reintroduce this property as writable, allowing you to override the class determined by the accessor. TInstantExposer is an example hereof.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10370}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantSelector.ObjectClassName\strike0{\v Scribble10380>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.ObjectClassName}
{\up K}{\footnote {\up K} ObjectClassName;ObjectClassName,TInstantSelector;TInstantSelector,ObjectClassName;}
{\up A}{\footnote {\up A} ObjectClassName;ObjectClassName_Property;TInstantSelector_ObjectClassName}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.ObjectClassName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantSelector\strike0{\v Scribble10200>main}\tab\ul See Also\ulnone{\v Scribble10390} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the class name of objects being exposed.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  ObjectClassName;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ObjectClassName specifies the name of the common class of the objects being exposed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10390}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantSelector.ObjectClass\strike0{\v Scribble10360>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.ParamCheck}
{\up K}{\footnote {\up K} ParamCheck;ParamCheck,TInstantSelector;TInstantSelector,ParamCheck;}
{\up A}{\footnote {\up A} ParamCheck;ParamCheck_Property;TInstantSelector_ParamCheck}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.ParamCheck \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par \pard\sb25\sa85\fs18 Specifies whether the parameter list is regenerated.
\par \pard\sb25\sa25\b\f7 property\b0  ParamCheck: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use ParamCheck to specify if the \strike Params\strike0{\v Scribble10410>main} property must be cleared and regenerated if an application modifies the Selectors \strike Command\strike0{\v Scribble10330>main} property at runtime. By default ParamCheck is True. An application that does not use parameterized queries may choose to set ParamCheck to False, but otherwise ParamCheck should be True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.Params}
{\up K}{\footnote {\up K} Params;Params,TInstantSelector;TInstantSelector,Params;}
{\up A}{\footnote {\up A} Params;Params_Property;TInstantSelector_Params}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.Params \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main} 
\par \pard\sb25\sa85\fs18 Contains the parameters for the command.
\par \pard\sb25\sa25\b\f7 property\b0  Params: TParams;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use the Params property to specify parameter names, values, and data types at design time or runtime for the command of the Selector. Params is a zero-based array of TParams parameter records. Index specifies the array element to access.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10420}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSelector.Query}
{\up K}{\footnote {\up K} Query;Query,TInstantSelector;TInstantSelector,Query;}
{\up A}{\footnote {\up A} Query;Query_Property;TInstantSelector_Query}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSelector.Query \cf1\b0\fs16 
\par \strike TInstantSelector\strike0{\v Scribble10200>main}
\par \pard\sb25\sa85\fs18 Determines the query object that the selector component uses to perform a selection.
\par \pard\sb25\sa25\b\f7 property\b0  Query: TInstantQuery;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Query to gain access to the query object that the selector component uses to perform a selection.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSimple}
{\up +}{\footnote {\up +} classessymbol:000460}
{\up K}{\footnote {\up K} TInstantSimple;}
{\up A}{\footnote {\up A} TInstantSimple;TInstantSimple_Object}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 TInstantSimple \b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\cf2\ul Hierarchy\cf3\ulnone{\v Scribble10450}\cf2\tab\ul See Also\cf3\ulnone{\v Scribble10440}\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf0 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 The ancestor of all the attribute classes that represent simple types.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantSimple = \b class\b0 (\cf2\strike TInstantAttribute\cf3\strike0{\v Scribble2170>main}\cf0 )
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantSimple is the ancestor of all the attribute classes that represents simple types.
\par TInstantSimple is abstract; so do not create instances of this class. Instead refer to the following concrete descendant classes: 
\par 
\par \ul\b Simple attribute classes\ulnone\b0 
\par \cf2\strike TInstantBlob\cf3\strike0{\v Scribble2680>main}\cf0 
\par \cf2\strike TInstantBoolean\cf3\strike0{\v Scribble2860>main}\cf0 
\par \cf2\strike TInstant\lang1033\f1 Currency\cf3\lang3081\strike0\f0{\v Scribble4670>main}\cf0 
\par \cf2\strike TInstantDateTime\cf3\strike0{\v Scribble5670>main}\cf0 
\par \cf2\strike TInstantFloat\cf3\strike0{\v Scribble6840>main}\cf0 
\par \cf2\strike TInstantInteger\cf3\strike0{\v Scribble7070>main}\cf0 
\par \cf2\strike TInstantMemo\cf3\strike0{\v Scribble7190>main}\cf0 
\par \cf2\strike TInstantString\cf3\strike0{\v Scribble11000>main}\cf0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10440}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantComplex\strike0{\v Scribble3190>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10450}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10460}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSimple Fields \cf1\b0\fs16  
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10470}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSimple Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantSimple\strike0{\v Scribble10430>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10480}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10480}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10490}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantSimple Events \cf1\b0\fs16 
\par \strike TInstantSimple\strike0{\v Scribble10430>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10500}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSimple Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantSimple\strike0{\v Scribble10430>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10510}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10520}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantSimple Members \cf1\b0\fs16 
\par \strike TInstantSimple\strike0{\v Scribble10430>main}\tab\ul Legend\ulnone{\v Scribble10530}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10530}
}
\viewkind4\uc1\pard\sb55\sa25\tx355\lang1040\b\f0\fs18 Legend
\par \pard\li95\sb25\sa25\tx355\cf1\b0\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream}
{\up +}{\footnote {\up +} classessymbol:000470}
{\up K}{\footnote {\up K} TInstantStream;}
{\up A}{\footnote {\up A} TInstantStream;TInstantStream_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5720\tx7080\ul Hierarchy\ulnone{\v Scribble10550}\tab\strike Members\strike0{\v Scribble10600>nav}\tab\strike Properties\strike0{\v Scribble10570>nav}\tab\strike Methods\strike0{\v Scribble10590>nav}\tab\strike Events\strike0{\v Scribble10580>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\tx5755\fs18 TStream is the base class for classes that provide streaming capabilities for various kinds of media.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\f7 TInstantStream = \b class\b0 (TStream)
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\tx5755\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\tx5755\b0 TInstantStream is the base class for classes that provide streaming capabilities. TInstantStream uses a source stream that handles the streaming. The source stream is specified by the \strike Source\strike0{\v Scribble10620>main} property, or as an argument of the constructor. TInstantStream is not abstract but can be instantiated. If the \strike Source\strike0{\v Scribble10620>main} stream is unassigned, the TInstantStream object automatically creates a TMemoryStream object which it uses as its source stream.
\par TInstantStream implements functionality to:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Manage resource files
\par \{bmct bm3.BMP\}\tab Read and write objects.
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10550}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TStream
\par \pard\li95\tx355\tab |
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10560}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStream Fields \cf1\b0\fs16  
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10570}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStream Properties \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FreeSource\strike0{\v Scribble10610>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Source\strike0{\v Scribble10620>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10580}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStream Events \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnProcessObject\strike0{\v Scribble10820>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10590}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStream Methods \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AlignStream\strike0{\v Scribble10640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObject\strike0{\v Scribble10660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObjectRes\strike0{\v Scribble10680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResHeader\strike0{\v Scribble10700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObject\strike0{\v Scribble10740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObjectRes\strike0{\v Scribble10760>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceHeader\strike0{\v Scribble10800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10600}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStream Members \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb55\sa55\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FreeSource\strike0{\v Scribble10610>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Source\strike0{\v Scribble10620>main}
\par \pard\sb55\sa55\b Events
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnProcessObject\strike0{\v Scribble10820>main}
\par \pard\sb55\sa55\b Methods
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AlignStream\strike0{\v Scribble10640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObject\strike0{\v Scribble10660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObjectRes\strike0{\v Scribble10680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResHeader\strike0{\v Scribble10700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObject\strike0{\v Scribble10740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObjectRes\strike0{\v Scribble10760>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceHeader\strike0{\v Scribble10800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10610}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.FreeSource}
{\up K}{\footnote {\up K} FreeSource;FreeSource,TInstantStream;TInstantStream,FreeSource;}
{\up A}{\footnote {\up A} FreeSource;FreeSource_Property;TInstantStream_FreeSource}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.FreeSource \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main} 
\par \pard\sb25\sa85\fs18 Specifies if the source stream should be destroyed.
\par \pard\sb25\sa25\b\f7 property\b0  FreeSource: Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use FreeSource to specify if the \strike Source\strike0{\v Scribble10620>main} stream should be destroyed when the instance is destroyed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.Source}
{\up K}{\footnote {\up K} Source;Source,TInstantStream;TInstantStream,Source;}
{\up A}{\footnote {\up A} Source;Source_Property;TInstantStream_Source}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.Source \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10630} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the source stream.
\par \pard\sb25\sa25\tx1435\b\f7 property\b0  Source: TStream;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use Source to specify the source stream that the \strike TInstantStream\strike0{\v Scribble10540>main} instance should use for streaming.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.FreeSource\strike0{\v Scribble10610>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.AlignStream}
{\up K}{\footnote {\up K} AlignStream;AlignStream,TInstantStream;TInstantStream,AlignStream;}
{\up A}{\footnote {\up A} AlignStream;AlignStream_Method;TInstantStream_AlignStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.AlignStream \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb25\sa85\fs18 Aligns the position of the stream to the next 32-bit boundary.
\par \pard\sb25\sa25\b\f7 procedure\b0  AlignStream;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call AlignStream to align the stream to the next 32-bit boundary. The stream is automatically enlarged if required.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantStream;TInstantStream,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantStream_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.Create \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb25\sa85\fs18 Creates a \strike TInstantStream\strike0{\v Scribble10540>main} instance
\par \pard\sb25\sa25\b\f7 constructor\b0  Create(ASource: TStream; AFreeSource: Boolean);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Creates a \strike TInstantStream\strike0{\v Scribble10540>main} instance. Use the ASource argument specify the source stream that the \strike TInstantStream\strike0{\v Scribble10540>main} instance should use for streaming, and the AFreeSource argument to specify if the \strike Source\strike0{\v Scribble10620>main} stream should be destroyed when the \strike TInstantStream\strike0{\v Scribble10540>main} instance is destroyed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.ReadObject}
{\up K}{\footnote {\up K} ReadObject;ReadObject,TInstantStream;TInstantStream,ReadObject;}
{\up A}{\footnote {\up A} ReadObject;ReadObject_Method;TInstantStream_ReadObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.ReadObject \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10670} 
\par \pard\sb25\sa85\tx1435\fs18 Reads an object from the stream.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  ReadObject(AObject: TPersistent; Arg: Pointer): TPersistent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use ReadObject to read an object from the stream into the object specified by the AObject argument. If AObject is nil, ReadObject creates an object based on the type information in the stream and returns the newly created object. The Arg argument is an optional argument used if the construction of the object requires an argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.WriteObject\strike0{\v Scribble10740>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.ReadObjectRes}
{\up K}{\footnote {\up K} ReadObjectRes;ReadObjectRes,TInstantStream;TInstantStream,ReadObjectRes;}
{\up A}{\footnote {\up A} ReadObjectRes;ReadObjectRes_Method;TInstantStream_ReadObjectRes}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.ReadObjectRes \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10690} 
\par \pard\sb25\sa85\tx1435\fs18 Reads an object enclosed in a resource entry from the stream.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  ReadObjectRes(AObject: TPersistent; Arg: Pointer): TPersistent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Reads an object enclosed in a resource entry from the stream into the object specified by the AObject argument. If AObject is nil, \strike ReadObject\strike0{\v Scribble10660>main} creates an object based on the type information in the stream and returns the newly created object. The Arg argument is an optional argument used if the construction of the object requires an argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.WriteObjectRes\strike0{\v Scribble10760>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.ReadResHeader}
{\up K}{\footnote {\up K} ReadResHeader;ReadResHeader,TInstantStream;TInstantStream,ReadResHeader;}
{\up A}{\footnote {\up A} ReadResHeader;ReadResHeader_Method;TInstantStream_ReadResHeader}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.ReadResHeader \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10710}
\par \pard\sb25\sa85\tx1435\fs18 Reads a Windows resource-entry header from the stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ReadResHeader;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ReadResHeader reads a Windows resource-entry header from the stream. After reading the resource-entry header, the position of the stream will be just beyond the header.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10710}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.WriteResourceHeader\strike0{\v Scribble10800>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.ReadResourceFileHeader}
{\up K}{\footnote {\up K} ReadResourceFileHeader;ReadResourceFileHeader,TInstantStream;TInstantStream,ReadResourceFileHeader;}
{\up A}{\footnote {\up A} ReadResourceFileHeader;ReadResourceFileHeader_Method;TInstantStream_ReadResourceFileHeader}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.ReadResourceFileHeader \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10730} 
\par \pard\sb25\sa85\tx1435\fs18 Reads a Windows resource-file header from the stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ReadResourceFileHeader;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ReadResourceFileHeader reads a Windows resource-file header from the stream. After reading the resource-file header, the position of the stream will be just beyond the header.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10730}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.WriteObject}
{\up K}{\footnote {\up K} TInstantStream,WriteObject;WriteObject;WriteObject,TInstantStream;}
{\up A}{\footnote {\up A} TInstantStream_WriteObject;WriteObject;WriteObject_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.WriteObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10750}
\par \pard\sb25\sa85\tx1435\fs18 Writes an object to the stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  WriteObject(AObject: TPersistent);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use WriteObject to write the object specified by the AObject argument to the stream.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.ReadObject\strike0{\v Scribble10660>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.WriteObjectRes}
{\up K}{\footnote {\up K} TInstantStream,WriteObjectRes;WriteObjectRes;WriteObjectRes,TInstantStream;}
{\up A}{\footnote {\up A} TInstantStream_WriteObjectRes;WriteObjectRes;WriteObjectRes_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.WriteObjectRes \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10770}
\par \pard\sb25\sa85\tx1435\fs18 Writes an object to the stream as a resource entry.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  WriteObjectRes(\b const\b0  ResName: \b string\b0 ; AObject: TPersistent);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Writes the object specified by the AObject argument to the stream as a resource entry with the name specified as the ResName argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10770}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.ReadObjectRes\strike0{\v Scribble10680>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.WriteResourceFileHeader}
{\up K}{\footnote {\up K} TInstantStream,WriteResourceFileHeader;WriteResourceFileHeader;WriteResourceFileHeader,TInstantStream;}
{\up A}{\footnote {\up A} TInstantStream_WriteResourceFileHeader;WriteResourceFileHeader;WriteResourceFileHeader_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.WriteResourceFileHeader \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10790} 
\par \pard\sb25\sa85\tx1435\fs18 Writes a Windows resource-file header to the stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  WriteResourceFileHeader;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call WriteResourceFileHeader to write a Windows resource-file header to the stream.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10790}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10800}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.WriteResourceHeader}
{\up K}{\footnote {\up K} TInstantStream,WriteResourceHeader;WriteResourceHeader;WriteResourceHeader,TInstantStream;}
{\up A}{\footnote {\up A} TInstantStream_WriteResourceHeader;WriteResourceHeader;WriteResourceHeader_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.WriteResourceHeader \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStream\strike0{\v Scribble10540>main}\tab\ul See Also\ulnone{\v Scribble10810}
\par \pard\sb25\sa85\tx1435\fs18 Writes a Windows resource-entry header to the stream.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  WriteResourceHeader(\b const\b0  ResName: \b string\b0 ; DataSize: Cardinal);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 WriteResHeader writes a Windows resource-entry header to the stream. The ResName argument specifies the name of the resource, and the DataSize argument specifies the amount of data that the resource contains. After writing the resource-entry header, the position of the stream will be just beyond the header.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10810}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStream.ReadResHeader\strike0{\v Scribble10700>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStream.OnProcessObject}
{\up K}{\footnote {\up K} OnProcessObject;OnProcessObject,TInstantStream;TInstantStream,OnProcessObject;}
{\up A}{\footnote {\up A} OnProcessObject;OnProcessObject_Event;TInstantStream_OnProcessObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStream.OnProcessObject \cf1\b0\fs16 
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \pard\sb25\sa85\fs18 Specifies an object processing event handler.
\par \pard\sb25\sa25\b\f7 property\b0  OnProcessObject: \strike TInstantProcessObjectEvent\strike0{\v Scribble12510>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use OnProcessObject to attach an optional object processing event handler to the stream. When an object is either written to or read from the stream, the OnProcessObject event is triggered.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10830}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable}
{\up +}{\footnote {\up +} classessymbol:000480}
{\up K}{\footnote {\up K} TInstantStreamable;}
{\up A}{\footnote {\up A} TInstantStreamable;TInstantStreamable_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble10840}\tab\strike Members\strike0{\v Scribble10900>nav}\tab\strike Methods\strike0{\v Scribble10880>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantStreamable is the base class for classes that are streamable.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantStreamable = \b class\b0 (TPersistent)
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantStreamable introduces the ability to read and write instances from and to a stream. Use TInstantStreamable as base class when declaring classes that should be streamable. To enable streaming of a class, override the \strike ReadObject\strike0{\v Scribble10950>main}, \strike WriteObject\strike0{\v Scribble10980>main} and \strike CreateInstance\strike0{\v Scribble10920>main} methods.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10840}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10850}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStreamable Fields \cf1\b0\fs16  
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10860}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStreamable Properties \cf1\b0\fs16 
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10870}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStreamable Events \cf1\b0\fs16 
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10880}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStreamable Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantStreamable\strike0{\v Scribble10830>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10890}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10890}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10900}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStreamable Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantStreamable\strike0{\v Scribble10830>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble10910}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10910}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10920}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable.CreateInstance}
{\up K}{\footnote {\up K} CreateInstance;CreateInstance,TInstantStreamable;TInstantStreamable,CreateInstance;}
{\up A}{\footnote {\up A} CreateInstance;CreateInstance_Method;TInstantStreamable_CreateInstance}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable.CreateInstance \cf1\b0\fs16 
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \pard\sb25\sa85\fs18 Creates an instance.
\par \pard\sb25\sa25\b\f7 class\b0  \b function\b0  CreateInstance(Arg: Pointer): \strike TInstantStreamable\strike0{\v Scribble10830>main}; \b virtual\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 CreateInstance is called automatically by streaming mechanism when reading an object from a stream requires construction of a new instance. Do not call it explicitly in your applications. The CreateInstance method implemented in \strike TInstantStreamable\strike0{\v Scribble10830>main} calls the default TObject Create constructor. Override this class function when creating a class that needs to read instances from a stream. Use the methods of the reader objects passed as the Reader argument to read the properties of the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable.LoadFromStream}
{\up K}{\footnote {\up K} LoadFromStream;LoadFromStream,TInstantStreamable;TInstantStreamable,LoadFromStream;}
{\up A}{\footnote {\up A} LoadFromStream;LoadFromStream_Method;TInstantStreamable_LoadFromStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable.LoadFromStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStreamable\strike0{\v Scribble10830>main}\tab\ul See Also\ulnone{\v Scribble10940}
\par \pard\sb25\sa85\tx1435\fs18 Loads the object from a stream
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  LoadFromStream(Stream: TStream; ProcessEvent: \strike TInstantProcessObjectEvent\strike0{\v Scribble12510>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call LoadFromStream to load the object from a stream specified by the Stream argument. The stream must contain an object in the binary stream format. By setting the ProcessEvent argument, information about the objects being processed can be obtained.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10940}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStreamable.SaveToStream\strike0{\v Scribble10970>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable.ReadObject}
{\up K}{\footnote {\up K} ReadObject;ReadObject,TInstantStreamable;TInstantStreamable,ReadObject;}
{\up A}{\footnote {\up A} ReadObject;ReadObject_Method;TInstantStreamable_ReadObject}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable.ReadObject \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike TInstantStreamable\strike0{\v Scribble10830>main}\tab\ul See Also\ulnone{\v Scribble10960}
\par \pard\sb25\sa85\tx1435\fs18 Reads the instance.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  ReadObject(Reader: TInstantReader); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 ReadObject is called automatically by streaming mechanism. Do not call it explicitly in your applications. The ReadObject method implemented in \strike TInstantStreamable\strike0{\v Scribble10830>main} does nothing. Override this method when creating a class that needs to read instances from a stream. Use the methods of the reader objects passed as the Reader argument to read the properties of the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10960}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStreamable.WriteObject\strike0{\v Scribble10980>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10970}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable.SaveToStream}
{\up K}{\footnote {\up K} SaveToStream;SaveToStream,TInstantStreamable;TInstantStreamable,SaveToStream;}
{\up A}{\footnote {\up A} SaveToStream;SaveToStream_Method;TInstantStreamable_SaveToStream}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable.SaveToStream \cf1\b0\fs16 
\par \strike TInstantStreamable\strike0{\v Scribble10830>main} 
\par \pard\sb25\sa85\fs18 Saves the object to a stream
\par \pard\sb25\sa25\b\f7 procedure\b0  SaveToStream(Stream: TStream; ProcessEvent: \strike TInstantProcessObjectEvent\strike0{\v Scribble12510>main});
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Saves the object to a stream specified by the Stream argument. By setting the ProcessEvent argument, information about the objects being processed can be obtained.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10980}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamable.WriteObject}
{\up K}{\footnote {\up K} TInstantStreamable,WriteObject;WriteObject;WriteObject,TInstantStreamable;}
{\up A}{\footnote {\up A} TInstantStreamable_WriteObject;WriteObject;WriteObject_Method}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamable.WriteObject \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike TInstantStreamable\strike0{\v Scribble10830>main}\tab\ul See Also\ulnone{\v Scribble10990} 
\par \pard\sb25\sa85\tx1435\fs18 Writes the instance
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  WriteObject(Writer: TInstantWriter); \b virtual\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 WriteObject is called automatically by streaming mechanism. Do not call it explicitly in your applications. The WriteObject method implemented in \strike TInstantStreamable\strike0{\v Scribble10830>main} does nothing. Override this method when creating a class that needs to write instances to a stream. Use the methods of the writer objects passed as the Writer argument to write the properties of the instance.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble10990}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantStreamable.ReadObject\strike0{\v Scribble10950>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11000}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantString}
{\up +}{\footnote {\up +} classessymbol:000490}
{\up K}{\footnote {\up K} TInstantString;}
{\up A}{\footnote {\up A} TInstantString;TInstantString_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantString \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1400\tx2840\tx4260\ul Hierarchy\ulnone{\v Scribble11010}\tab\strike Members\strike0{\v Scribble11080>nav}\tab\strike Properties\strike0{\v Scribble11030>nav}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\tx2875\fs18 TInstantString represents a string value.
\par \pard\sb25\sa25\tx1435\tx2875\f7 TInstantString = \b class\b0 (\strike TInstantSimple\strike0{\v Scribble10430>main})
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 TInstantString holds a string as its value. A string can be of arbitrary length. Usually databases impose some limitations regarding the length of strings.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11010}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TPersistent
\par \pard\li95\tx355\tab |
\par \strike TInstantStreamable\strike0{\v Scribble10830>main}
\par \tab |
\par \strike TInstantAttribute\strike0{\v Scribble2170>main}
\par \tab |
\par \strike TInstantSimple\strike0{\v Scribble10430>main}
\par \tab |
\par \strike TInstantString\strike0{\v Scribble11000>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11020}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantString Fields \cf1\b0\fs16  
\par \strike TInstantString\strike0{\v Scribble11000>main}
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11030}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantString Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantString\strike0{\v Scribble11000>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble11040}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantString
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble11100>main}
\par \pard\sb55\sa55\tx355\b TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsBoolean\strike0{\v Scribble2270>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsCurrency\strike0{\v Scribble2280>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsDateTime\strike0{\v Scribble2290>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsFloat\strike0{\v Scribble2300>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsInteger\strike0{\v Scribble2310>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsObject\strike0{\v Scribble2320>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsString\strike0{\v Scribble2330>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AsVariant\strike0{\v Scribble2340>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DisplayText\strike0{\v Scribble2350>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike IsChanged\strike0{\v Scribble2360>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsDefault\strike0{\v Scribble2380>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsIndexed\strike0{\v Scribble2390>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsMandatory\strike0{\v Scribble2410>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike IsRequired\strike0{\v Scribble2430>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Metadata\strike0{\v Scribble2450>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Name\strike0{\v Scribble2460>main}
\par \{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike Owner\strike0{\v Scribble2470>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Value\strike0{\v Scribble2480>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11040}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11050}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantString Events \cf1\b0\fs16 
\par \strike TInstantString\strike0{\v Scribble11000>main}\cf0\cf1 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11060}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantString Methods \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2820\strike TInstantString\strike0{\v Scribble11000>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble11070}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantAttribute
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm6.BMP\} \strike AttributeType\strike0{\v Scribble2490>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Changed\strike0{\v Scribble2500>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Create\strike0{\v Scribble2520>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike Initialize\strike0{\v Scribble2530>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Reset\strike0{\v Scribble2540>main}
\par \{bmct bm0.BMP\}\{bmct bm2.BMP\} \strike Unchanged\strike0{\v Scribble2550>main}
\par \pard\sb55\sa55\tx355\b TInstantStreamable
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike CreateInstance\strike0{\v Scribble10920>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike LoadFromStream\strike0{\v Scribble10930>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike ReadObject\strike0{\v Scribble10950>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike SaveToStream\strike0{\v Scribble10970>main}
\par \{bmct bm5.BMP\}\{bmct bm2.BMP\} \strike WriteObject\strike0{\v Scribble10980>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11070}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11080}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantString Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantString\strike0{\v Scribble11000>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble11090}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm4.BMP\} \strike Value\strike0{\v Scribble11100>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11090}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm6.BMP\} abstract
\par \{bmct bm2.BMP\} virtual
\par \{bmct bm5.BMP\} protected
\par \{bmct bm4.BMP\} published
\par \{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantString.Value}
{\up K}{\footnote {\up K} TInstantString,Value;Value;Value,TInstantString;}
{\up A}{\footnote {\up A} TInstantString_Value;Value;Value_Property}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantString.Value \cf1\b0\fs16 
\par \strike TInstantString\strike0{\v Scribble11000>main} 
\par \pard\sb25\sa85\fs18 Specifies the value of the string attribute
\par \pard\sb25\sa25\b\f7 property\b0  Value: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use Value to specify the value of the string attribute.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStringStream}
{\up +}{\footnote {\up +} classessymbol:000500}
{\up K}{\footnote {\up K} TInstantStringStream;}
{\up A}{\footnote {\up A} TInstantStringStream;TInstantStringStream_Object}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStringStream \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1400\tx2840\tx4280\tx5700\ul Hierarchy\ulnone{\v Scribble11120}\tab\strike Members\strike0{\v Scribble11180>nav}\tab\strike Properties\strike0{\v Scribble11140>nav}\tab\strike Methods\strike0{\v Scribble11170>nav}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\tx2875\tx4315\fs18 TInstantStringStream provides stream-based access to a string.
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\f7 TInstantStringStream = \b class\b0 (\strike TInstantStream\strike0{\v Scribble10540>main})
\par \pard\sb55\sa25\tx1435\tx2875\tx4315\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\b0 Use TInstantStringStream to access a string as a stream. TInstantStringStream is useful as an intermediary object since it can hold text as well as binary data. Like all \strike TInstantStream\strike0{\v Scribble10540>main} objects, TInstantStringStream uses a Source stream that handles the streaming. The Source stream of TInstantStringStream is a TStringStream object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11120}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Class Hierarchy
\par 
\par \pard\li95\cf1\b0\fs18 TStream
\par \pard\li95\tx355\tab |
\par \strike TInstantStream\strike0{\v Scribble10540>main}
\par \tab |
\par \strike TInstantStringStream\strike0{\v Scribble11110>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11130}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStringStream Fields \cf1\b0\fs16 
\par \strike TInstantStringStream\strike0{\v Scribble11110>main} 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11140}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStringStream Properties \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantStringStream\strike0{\v Scribble11110>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble11150}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 TInstantStringStream
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DataString\strike0{\v Scribble11200>main}
\par \pard\sb55\sa55\tx355\b TInstantStream
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike FreeSource\strike0{\v Scribble10610>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Source\strike0{\v Scribble10620>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11150}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11160}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStringStream Events \cf1\b0\fs16 
\par \strike TInstantStringStream\strike0{\v Scribble11110>main} 
\par \pard\sb55\sa55\b\fs18 TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike OnProcessObject\strike0{\v Scribble10820>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11170}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 TInstantStringStream Methods \cf1\b0\fs16 
\par \strike TInstantStringStream\strike0{\v Scribble11110>main} 
\par \pard\sb55\sa55\b\fs18 TInstantStringStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble11210>main}
\par \pard\sb55\sa55\b TInstantStream
\par \pard\keep\li95\sb25\sa25\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike AlignStream\strike0{\v Scribble10640>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble10650>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObject\strike0{\v Scribble10660>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadObjectRes\strike0{\v Scribble10680>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResHeader\strike0{\v Scribble10700>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike ReadResourceFileHeader\strike0{\v Scribble10720>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObject\strike0{\v Scribble10740>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteObjectRes\strike0{\v Scribble10760>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceFileHeader\strike0{\v Scribble10780>main}
\par \{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike WriteResourceHeader\strike0{\v Scribble10800>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11180}
}
\viewkind4\uc1\pard\keepn\sb25\tx355\lang1040\b\f0\fs24 TInstantStringStream Members \cf1\b0\fs16 
\par \pard\keepn\sb25\tx2840\strike TInstantStringStream\strike0{\v Scribble11110>main}\tab\cf2\ul Legend\cf3\ulnone{\v Scribble11190}\cf1 
\par \pard\sb55\sa55\tx355\b\fs18 Properties
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm1.BMP\} \strike DataString\strike0{\v Scribble11200>main}
\par \pard\sb55\sa55\tx355\b Methods
\par \pard\keep\li95\sb25\sa25\tx355\b0\{bmct bm0.BMP\}\{bmct bm0.BMP\} \strike Create\strike0{\v Scribble11210>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11190}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 Legend
\par \pard\li95\sb25\sa25\cf1\b0\fs18\{bmct bm1.BMP\} read only
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11200}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStringStream.DataString}
{\up K}{\footnote {\up K} DataString;DataString,TInstantStringStream;TInstantStringStream,DataString;}
{\up A}{\footnote {\up A} DataString;DataString_Property;TInstantStringStream_DataString}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStringStream.DataString \cf1\b0\fs16 
\par \strike TInstantStringStream\strike0{\v Scribble11110>main} 
\par \pard\sb25\sa85\fs18 Provides access to the string represented by the \strike TInstantStringStream\strike0{\v Scribble11110>main} instance.
\par \pard\sb25\sa25\b\f7 property\b0  DataString: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use DataString to access the stream as a string. DataString represents the data that the stream manages.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11210}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStringStream.Create}
{\up K}{\footnote {\up K} Create;Create,TInstantStringStream;TInstantStringStream,Create;}
{\up A}{\footnote {\up A} Create;Create_Method;TInstantStringStream_Create}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStringStream.Create \cf1\b0\fs16 
\par \strike TInstantStringStream\strike0{\v Scribble11110>main} 
\par \pard\sb25\sa85\fs18 Creates an instance of \strike TInstantStringStream\strike0{\v Scribble11110>main}.
\par \pard\sb25\sa25\b\f7 constructor\b0  Create(AString: \b string\b0 );
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Call Create to create a \strike TInstantStringStream\strike0{\v Scribble11110>main} object. Create initializes the \strike DataString\strike0{\v Scribble11200>main} property to the AString parameter.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11220}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCharSetToStr}
{\up +}{\footnote {\up +} functionsssymbol:000010}
{\up K}{\footnote {\up K} InstantCharSetToStr;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantCharSetToStr \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\ul See Also\ulnone{\v Scribble11230}\tab\strike Example 1\strike0{\v Scribble11240>example}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Converts a set of char to a string.
\par \pard\sb25\sa25\tx1435\tx2875\b\f7 function\b0  InstantCharSetToStr(C: TChars): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Use InstantCharSetToStr to convert a set of char to a string. The resulting string is condensed to be as short as possible using ".." to denote ranges.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11230}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantStrToCharSet\strike0{\v Scribble11860>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11240}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} InstantCharSetToStr, Example 1}
{\up K}{\footnote {\up K} InstantCharSetToStr,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike InstantCharSetToStr\strike0{\v Scribble11220>main} 
\par \pard\keep\f7\fs18   InstantCharSetToStr(['a','b','c']);  //'abc'
\par   InstantCharSetToStr(['a','b','c','d']);  //'a..d'
\par   InstantCharSetToStr(['4','a','1','c','3','b','2','d']);  //'1..4a..d'
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11250}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCheckConnection}
{\up +}{\footnote {\up +} functionsssymbol:000020}
{\up K}{\footnote {\up K} InstantCheckConnection;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 InstantCheckConnection \b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Checks the assignment of a connection
\par \pard\sb25\sa25\b\f7 procedure\b0  InstantCheckConnection(Connection: TCustomConnection);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 InstantCheckConnection checks if a connection is assigned. If the connection is unassigned an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11260}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCheckConnector}
{\up +}{\footnote {\up +} functionsssymbol:000030}
{\up K}{\footnote {\up K} InstantCheckConnector;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantCheckConnector \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11270}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 Checks the assignment of a connector
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantCheckConnector(\b var\b0  Connector: \strike TInstantConnector\strike0{\v Scribble3770>main}): \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantCheckConnector checks if a connector is assigned. If the Connector argument is unassigned, the function checks if a default connector exists. If a default connector exists and the argument is unassigned, the argument as well as the result of the function is assigned to the default connector. If neither the argument is assigned nor a default Connector exists, an exception is raised.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11270}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDefaultConnector\strike0{\v Scribble11370>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11280}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantClassNameToName}
{\up +}{\footnote {\up +} functionsssymbol:000040}
{\up K}{\footnote {\up K} InstantClassNameToName;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantClassNameToName \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11290}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 Converts a class name to a name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantClassNameToName(\b const\b0  ClassName: \b string\b0 ): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantClassNameToName converts a class name to a displayable name by removing the class prefix.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantNameToClassName\strike0{\v Scribble11640>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCompareObjects 1}
{\up +}{\footnote {\up +} functionsssymbol:000050}
{\up K}{\footnote {\up K} InstantCompareObjects 1;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 InstantCompareObjects 1 \b0\fs16 
\par \cf2\strike Unit: InstantUtils\cf3\strike0{\v Scribble13160>main}\cf0 
\par \pard\sb25\sa85\fs18 Compares two objects by comparing a named published property.
\par \pard\sb25\sa25\b\f7 function\b0  InstantCompareObjects(Obj1: TObject; Obj2: TObject; PropName: \b string\b0 ; Options: \cf2\strike TInstantCompareOptions\cf3\strike0{\v Scribble12170>main}\cf0 ): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InstantCompareObjects to compare two objects by a single published property named as the PropName argument. The Options argument applies to string property comparisons and specifies if a case insensitive comparison should be performed and if a partial match is sufficient.
\par The result of the comparison renders the following return values:
\par \fs10 
\par \pard\sb25\sa25\tqc\tx2500\b\fs18 Comparison\tab Return value\b0 
\par Obj1 < Obj2\tab -1
\par Obj1 = Obj2\tab 0
\par Obj1 > Obj2\tab 1
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCompareObjects 2}
{\up +}{\footnote {\up +} functionsssymbol:000060}
{\up K}{\footnote {\up K} InstantCompareObjects 2;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 InstantCompareObjects 2 \b0\fs16 
\par \cf2\strike Unit: InstantUtils\cf3\strike0{\v Scribble13160>main}\cf0 
\par \pard\sb25\sa85\fs18 Compares two objects by comparing mulpiple named published properties.
\par \pard\sb25\sa25\b\f7 function\cf2\b0\strike InstantCompareObjects\cf3\strike0{\v Scribble11300>main}\cf0 (Obj1: TObject; Obj2: TObject; PropNames: TStrings; Options: \cf2\strike TInstantCompareOptions\cf3\strike0{\v Scribble12170>main}\cf0 ): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use \cf2\strike InstantCompareObjects\cf3\strike0{\v Scribble11300>main}\cf0  to compare two objects by multiple published properties listed in the PropNames argument. The Options argument applies to string property comparisons and specifies if a case insensitive comparison should be performed and if a partial match is sufficient.
\par The result of the comparison renders the following return values:
\par \fs10 
\par \pard\sb25\sa25\tqc\tx2500\b\fs18 Comparison\tab Return value\b0 
\par Obj1 < Obj2\tab -1
\par Obj1 = Obj2\tab 0
\par Obj1 > Obj2\tab 1
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCompareText}
{\up +}{\footnote {\up +} functionsssymbol:000070}
{\up K}{\footnote {\up K} InstantCompareText;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantCompareText \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Compares two strings by ordinal value.
\par \pard\sb25\sa25\b\f7 function\b0  InstantCompareText(\b const\b0  S1: \b string\b0 ; \b const\b0  S2: \b string\b0 ; IgnoreCase: Boolean): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 CompareText compares S1 and S2 and returns 0 if they are equal. If S1 is greater than S2, CompareText returns an integer greater than 0. If S1 is less than S2, CompareText returns an integer less than 0. If the IgnoreCase argument is true, a case insensitive comparison is performed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantCompareValues}
{\up +}{\footnote {\up +} functionsssymbol:000080}
{\up K}{\footnote {\up K} InstantCompareValues;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantCompareValues \b0\fs16 
\par \cf2\strike Unit: InstantUtils\cf3\strike0{\v Scribble13160>main}\cf0 
\par \pard\sb25\sa85\fs18 Compares the values of two variants.
\par \pard\sb25\sa25\b\f7 function\b0  InstantCompareValues(V1: Variant; V2: Variant; Options: \cf2\strike TInstantCompareOptions\cf3\strike0{\v Scribble12170>main}\cf0 ): Integer;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use IntantCompareValues to compare the values of two variants. The Options argument applies to string value comparisons and specifies if a case insensitive comparison should be performed and if a partial match is sufficient.
\par The result of the comparison renders the following return values:
\par \fs10 
\par \pard\sb25\sa25\tqc\tx2500\b\fs18 Comparison\tab Return value\b0 
\par Obj1 < Obj2\tab -1
\par Obj1 = Obj2\tab 0
\par Obj1 > Obj2\tab 1
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantConstArrayToVariant}
{\up +}{\footnote {\up +} functionsssymbol:000090}
{\up K}{\footnote {\up K} InstantConstArrayToVariant;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantConstArrayToVariant \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Converts an array of constants to a variant array.
\par \pard\sb25\sa25\b\f7 function\b0  InstantConstArrayToVariant(AValues: \b array\b0  \b of\b0  \b const\b0 ): Variant;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InstantConstArrayToVariant to convert an array of constants to a variant array.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11350}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDateTimeToStr}
{\up +}{\footnote {\up +} functionsssymbol:000100}
{\up K}{\footnote {\up K} InstantDateTimeToStr;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDateTimeToStr \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11360}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Converts a TDatetime value to a string.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantDateTimeToStr(DateTime: TDateTime): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantDateTimeToStr to convert a TDateTimeValue to a string using the datetime format specified by the \strike InstantDateTimeFormat\strike0{\v Scribble12670>main} string.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11360}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantStrToDateTime\strike0{\v Scribble11910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDefaultConnector}
{\up +}{\footnote {\up +} functionsssymbol:000110}
{\up K}{\footnote {\up K} InstantDefaultConnector;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDefaultConnector \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Returns the default connector instance.
\par \pard\sb25\sa25\b\f7 function\b0  InstantDefaultConnector: \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 InstantDefaultConnector returns the connector instance marked as default. The default connector is used whenever a connector is required and no connector has been specified.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDisableNotifiers}
{\up +}{\footnote {\up +} functionsssymbol:000120}
{\up K}{\footnote {\up K} InstantDisableNotifiers;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDisableNotifiers \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11390}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Disables all notifiers
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantDisableNotifiers;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantDisableNotifiers when all notifiers in the application should be disabled. This is especially important when performing object updates that should not be reflected in the user interface while these are ongoing.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11390}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantEnableNotifiers\strike0{\v Scribble11400>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11400}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantEnableNotifiers}
{\up +}{\footnote {\up +} functionsssymbol:000130}
{\up K}{\footnote {\up K} InstantEnableNotifiers;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantEnableNotifiers \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11410}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Enables all notifiers
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantEnableNotifiers;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantEnableNotifiers to re-enable all notifiers in the applications.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11410}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDisableNotifiers\strike0{\v Scribble11380>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11420}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantExploreObject}
{\up +}{\footnote {\up +} functionsssymbol:000140}
{\up K}{\footnote {\up K} InstantExploreObject;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantExploreObject \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11430}\tab\strike Unit: InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb25\sa85\tx1435\fs18 Explores an object
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantExploreObject(AObject: TObject);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantExploreObject creates an instance of \strike TInstantExplorer\strike0{\v Scribble6230>main} and uses this instance to explore the object specified as the AObject argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11430}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantExplorer\strike0{\v Scribble6230>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11440}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantFileVersion}
{\up +}{\footnote {\up +} functionsssymbol:000150}
{\up K}{\footnote {\up K} InstantFileVersion;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantFileVersion \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11450}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Returns the version of a file as a record
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantFileVersion(\b const\b0  FileName: \b string\b0 ): \strike TInstantVersion\strike0{\v Scribble12070>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantFileVersion returns the version of the file specified by the FileName argument as a \strike TInstantVersion\strike0{\v Scribble12070>main} record.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11450}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantFileVersionStr\strike0{\v Scribble11460>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11460}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantFileVersionStr}
{\up +}{\footnote {\up +} functionsssymbol:000160}
{\up K}{\footnote {\up K} InstantFileVersionStr;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantFileVersionStr \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11470}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Returns the version of a file as a string
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantFileVersionStr(\b const\b0  FileName: \b string\b0 ): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0\strike InstantFileVersion\strike0{\v Scribble11440>main} returns the version of the file specified by the FileName argument in the format; [Major].[Minor].[Release].[Build]
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11470}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantFileVersion\strike0{\v Scribble11440>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantFindAccessorClass}
{\up +}{\footnote {\up +} functionsssymbol:000170}
{\up K}{\footnote {\up K} InstantFindAccessorClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantFindAccessorClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11490}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main}
\par \pard\sb25\sa85\tx1435\fs18 Finds and returns a class derived from TInstantAccessor.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantFindAccessorClass(ObjectClass: TClass): TInstantAccessorClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantFindAccessorClass to locate a class derived from TInstantAccessor by its association to another class. InstantFindAccessorClass searches the classes that have been registered using the registration procedures.
\par If the requested class cannot be found, InstantFindAccessorClass raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11490}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantGetAccessorClass\strike0{\v Scribble11530>main}
\par \strike InstantRegisterAccessorClass\strike0{\v Scribble11780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantFindClass}
{\up +}{\footnote {\up +} functionsssymbol:000180}
{\up K}{\footnote {\up K} InstantFindClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantFindClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11510}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Finds and returns a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantFindClass(\b const\b0  ClassName: \b string\b0 ): TInstantObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantFindClass to locate a class derived from \strike TInstantObject\strike0{\v Scribble7390>main} by name. InstantFindClass searches the classes that have been registered using the registration procedures.
\par If the requested class cannot be found, InstantFindClass raises an exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11510}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantGetClass\strike0{\v Scribble11550>main}
\par \strike InstantRegisterClass\strike0{\v Scribble11800>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantGenerateId}
{\up +}{\footnote {\up +} functionsssymbol:000190}
{\up K}{\footnote {\up K} InstantGenerateId;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantGenerateId \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Generates an unique Id.
\par \pard\sb25\sa25\b\f7 function\b0  InstantGenerateId: \b string\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 InstantGenerateId generates an unique 128-bit Integer value and returns its hexadecimal representation. To a very high degree of certainty, the Id returned by this function should be unique on the same machine or any other system (networked or not).
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11530}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantGetAccessorClass}
{\up +}{\footnote {\up +} functionsssymbol:000200}
{\up K}{\footnote {\up K} InstantGetAccessorClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantGetAccessorClass \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11540}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\tx1435\fs18 Finds and returns a class derived from TInstantAccessor.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantGetAccessorClass(ObjectClass: TClass): TInstantAccessorClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantGetAccessorClass to locate a class derived from TInstantAccessor by its association to another class. InstantGetAccessorClass searches the classes that have been registered using the registration procedures.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11540}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantFindAccessorClass\strike0{\v Scribble11480>main}
\par \strike InstantRegisterAccessorClass\strike0{\v Scribble11780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11550}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantGetClass}
{\up +}{\footnote {\up +} functionsssymbol:000210}
{\up K}{\footnote {\up K} InstantGetClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantGetClass \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11560}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 Finds and returns a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantGetClass(\b const\b0  ClassName: \b string\b0 ): TInstantObjectClass;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantGetClass to locate a class derived from \strike TInstantObject\strike0{\v Scribble7390>main} by name. InstantGetClass searches the classes that have been registered using the registration procedures.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11560}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantFindClass\strike0{\v Scribble11500>main}
\par \strike InstantRegisterClass\strike0{\v Scribble11800>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11570}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantGetClasses}
{\up +}{\footnote {\up +} functionsssymbol:000220}
{\up K}{\footnote {\up K} InstantGetClasses;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantGetClasses \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Extracts a list of registered classes.
\par \pard\sb25\sa25\b\f7 procedure\b0  InstantGetClasses(Classes: TList; BaseClass: TInstantObjectClass);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InstantGetClasses to extract registered classes into the list specified by the Classes parameter. Optionally the base class from which the extracted classes must descend can be specified by setting the BaseClass parameter.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11580}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantIsIdentifier}
{\up +}{\footnote {\up +} functionsssymbol:000230}
{\up K}{\footnote {\up K} InstantIsIdentifier;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantIsIdentifier \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Determines if a string is a valid identifier
\par \pard\sb25\sa25\b\f7 function\b0  InstantIsIdentifier(Str: \b string\b0 ): Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InstantIsIdentifier to determine if the string specified as the S argument is a valid identifier. If S is valid, the function returns True.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11590}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantIsValidObjectId}
{\up +}{\footnote {\up +} functionsssymbol:000240}
{\up K}{\footnote {\up K} InstantIsValidObjectId;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantIsValidObjectId \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Tests for a valid Object Id.
\par \pard\sb25\sa25\b\f7 function\b0  InstantIsValidObjectId(\b const\b0  AObjectId: \b string\b0 ): Boolean;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use InstantIsValidObjectId to test if a string contains a valid Id for an object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantMatchObject 1}
{\up +}{\footnote {\up +} functionsssymbol:000250}
{\up K}{\footnote {\up K} InstantMatchObject,1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantMatchObject 1 \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11610}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Compares a value to the value of an objects property
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantMatchObject(Obj: TObject; PropName: \b string\b0 ; \b const\b0  KeyValue: Variant; Options: \strike TInstantCompareOptions\strike0{\v Scribble12170>main}): Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantMatchObject to compare a value specified as the KeyValue argument to the value of a property named PropName for the object specified as the AObject argument. The Options argument applies to string property comparisons and specifies if a case insensitive comparison should be performed and if a partial match is sufficient.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantMatchObject\strike0{\v Scribble11600>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantMatchObject 2}
{\up +}{\footnote {\up +} functionsssymbol:000260}
{\up K}{\footnote {\up K} InstantMatchObject,2;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantMatchObject 2  \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11630}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Compares multiple values to the values of an objects properties
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  \strike InstantMatchObject\strike0{\v Scribble11600>main}(Obj: TObject; PropNames: TStrings; \b const\b0  KeyValues: Variant; Options: \strike TInstantCompareOptions\strike0{\v Scribble12170>main}): Boolean;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call \strike InstantMatchObject\strike0{\v Scribble11600>main} to compare values specified as the KeyValues variant array argument to the value of the properties contained in PropNames TStrings object for the object specified as the AObject argument. The Options argument applies to string property comparisons and specifies if a case insensitive comparison should be performed and if a partial match is sufficient.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantMatchObject\strike0{\v Scribble11600>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantNameToClassName}
{\up +}{\footnote {\up +} functionsssymbol:000270}
{\up K}{\footnote {\up K} InstantNameToClassName;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantNameToClassName \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11650}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Converts a name to a class name.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantNameToClassName(\b const\b0  \b Name\b0 : \b string\b0 ): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantNameToClassName converts a displayable name to a class name by adding the class prefix.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11650}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantClassNameToName\strike0{\v Scribble11280>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11660}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantObjectBinaryToText}
{\up +}{\footnote {\up +} functionsssymbol:000280}
{\up K}{\footnote {\up K} InstantObjectBinaryToText;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantObjectBinaryToText \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11670}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\fs18 Converts the binary representation of an object to a textual representation.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantObjectBinaryToText(Input: TStream; Output: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantObjectBinaryToText to convert the binary representation of an object to a readable textual format. The Input stream contains the binary representation, and the textual representation is written to the Output stream.
\par InstantObjectBinaryToText is only capable of converting the binary representation of a \strike TInstantObject\strike0{\v Scribble7390>main} instance to a textual representation.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11670}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantObjectTextToBinary\strike0{\v Scribble11680>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11680}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantObjectTextToBinary}
{\up +}{\footnote {\up +} functionsssymbol:000290}
{\up K}{\footnote {\up K} InstantObjectTextToBinary;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantObjectTextToBinary \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11690}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\fs18 Converts the textual representation of an object to a binary representation.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantObjectTextToBinary(Input: TStream; Output: TStream);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantObjectTextToBinary to convert the textual representation of an object to a binary representation. The Input stream contains the textual representation, and the binary representation is written to the Output stream.
\par \strike InstantObjectBinaryToText\strike0{\v Scribble11660>main} is only capable of converting the textual representation of a \strike TInstantObject\strike0{\v Scribble7390>main} instance to a binary representation.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11690}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantObjectBinaryToText\strike0{\v Scribble11660>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11700}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantPartStr}
{\up +}{\footnote {\up +} functionsssymbol:000300}
{\up K}{\footnote {\up K} InstantPartStr;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantPartStr \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike Example 1\strike0{\v Scribble11710>example}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Extracts a part of a delimited string.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantPartStr(Str: \b string\b0 ; \b Index\b0 : Integer; Delimiter: Char): \b string\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantPartStr to extract a part of a string separated by a Delimiter. The Index is one-based and denotes which part of the string should be returned.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11710}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} InstantPartStr, Example 1}
{\up K}{\footnote {\up K} InstantPartStr,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike InstantPartStr\strike0{\v Scribble11700>main} 
\par \pard\keep\f7\fs18   InstantPartString('Part1.Part2', 1, '.'); //'Part1'
\par   InstantPartString('Part3.Part4', 2, '.'); //'Part4'
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11720}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantReadObject}
{\up +}{\footnote {\up +} functionsssymbol:000310}
{\up K}{\footnote {\up K} InstantReadObject;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 InstantReadObject \b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11730}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\fs18 Reads an object from a stream
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantReadObject(Stream: TStream; Format: \strike TInstantStreamFormat\strike0{\v Scribble12580>main}; AObject: TPersistent): TPersistent;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantReadObject to read the object specified by the AObject argument from the stream specified by the Stream argument. If the AObject argument is nil, InstantReadObject creates an object and returns this object as the function result. The Format argument specifies the format of the stream.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  The sfXML format can only be used for instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11730}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantWriteObject\strike0{\v Scribble12030>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantReadObjects}
{\up +}{\footnote {\up +} functionsssymbol:000320}
{\up K}{\footnote {\up K} InstantReadObjects;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantReadObjects \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11750}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}
\par \pard\sb25\sa85\tx1435\fs18 Reads objects from a stream
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantReadObjects(Stream: TStream; Format: \strike TInstantStreamFormat\strike0{\v Scribble12580>main}; Objects: TList);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantReadObjects to read objects from the stream specified by the Stream argument into the list specified by the Objects argument. The Format argument specifies the format of the stream.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  The sfXML format can only be used for instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11750}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantWriteObjects\strike0{\v Scribble12050>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantRefreshObjects}
{\up +}{\footnote {\up +} functionsssymbol:000330}
{\up K}{\footnote {\up K} InstantRefreshObjects;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantRefreshObjects \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11770}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 Refreshes all instances of an array of classes
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantRefreshObjects(Classes: \b array\b0  \b of\b0  TInstantObjectClass; Progress: \strike TInstantProgressEvent\strike0{\v Scribble12520>main}; Connector: \strike TInstantConnector\strike0{\v Scribble3770>main});
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantRefreshObjects to refresh all instances of the Classes in the array using the specified Connector. Assign the progress argument to receive progress information.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11770}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.Refresh\strike0{\v Scribble8890>main}
\par \strike TInstantObject.RefreshAll\strike0{\v Scribble8910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11780}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantRegisterAccessorClass}
{\up +}{\footnote {\up +} functionsssymbol:000340}
{\up K}{\footnote {\up K} InstantRegisterAccessorClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantRegisterAccessorClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11790}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main}
\par \pard\sb25\sa85\tx1435\fs18 Registers a class derived from TInstantAccessor.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantRegisterAccessorClass(AClass: TInstantAccessorClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantRegisterAccessorClass to register an accessor class. The class registration is required to enable access to contained objects in instances of the class associated with a registered accessor class.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11790}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantUnregisterAccessorClass\strike0{\v Scribble11970>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11800}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantRegisterClass}
{\up +}{\footnote {\up +} functionsssymbol:000350}
{\up K}{\footnote {\up K} InstantRegisterClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantRegisterClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11810}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Registers a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantRegisterClass(AClass: TInstantObjectClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantRegisterClass to register a class. The class registration is required to enable streaming and persistence of instances of the registered class.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11810}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantUnregisterClass\strike0{\v Scribble11990>main}
\par \strike InstantRegisterClasses\strike0{\v Scribble11820>main}
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantRegisterClasses}
{\up +}{\footnote {\up +} functionsssymbol:000360}
{\up K}{\footnote {\up K} InstantRegisterClasses;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantRegisterClasses \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11830}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Registers an array of classes derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantRegisterClasses(AClasses: \b array\b0  \b of\b0  TInstantObjectClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use RegisterClasses to conveniently register an array of classes instead of registering classes individually.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11830}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantUnregisterClasses\strike0{\v Scribble12010>main}
\par \strike InstantRegisterClass\strike0{\v Scribble11800>main}
\par \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11840}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantRightPos}
{\up +}{\footnote {\up +} functionsssymbol:000370}
{\up K}{\footnote {\up K} InstantRightPos;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantRightPos \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike Example 1\strike0{\v Scribble11850>example}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Returns the starting position of the last occurrence of a substring in a given string.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantRightPos(\b const\b0  SubStr: \b string\b0 ; \b const\b0  Str: \b string\b0 ; IgnoreCase: Boolean): Integer;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantRightPos searches for a substring in a given string. It returns the one-based index of the first character of the last occurrence of the substring in the given string. InstantRightPos is case-sensitive. If the substring is not found, InstantRightPos returns zero. Use the IgnoreCase argument to specify if an case insensitive comparison should be made.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11850}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} InstantRightPos, Example 1}
{\up K}{\footnote {\up K} InstantRightPos,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike InstantRightPos\strike0{\v Scribble11840>main} 
\par \pard\keep\f7\fs18 var
\par   Pos: Integer;
\par begin
\par   Pos := InstantRightPos('Inst', 'Install InstantObjects Instantaneously');
\par   ShowMessage(IntToStr(Pos)); //Pos equals 24
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11860}
{\up $}{\footnote {\up $} InstantStrToCharSet}
{\up +}{\footnote {\up +} functionsssymbol:000380}
{\up K}{\footnote {\up K} InstantStrToCharSet;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 InstantStrToCharSet \b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\ul See Also\ulnone{\v Scribble11870}\tab\strike Example 1\strike0{\v Scribble11880>example}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\tx2875\fs18 Converts a string to a set of char.
\par \pard\sb25\sa25\tx1435\tx2875\b\f7 function\b0  InstantStrToCharSet(\b const\b0  Str: \b string\b0 ): TChars;
\par \pard\sb55\sa25\tx1435\tx2875\b\f0 Description
\par \pard\sb25\sa25\tx1435\tx2875\b0 Use InstantStrToCharSet to convert a string to a set of char. The string may be condensed using ".." to denote ranges.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11870}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantCharSetToStr\strike0{\v Scribble11220>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11880}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} InstantStrToCharSet, Example 1}
{\up K}{\footnote {\up K} InstantStrToCharSet,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike InstantStrToCharSet\strike0{\v Scribble11860>main} 
\par \pard\keep\f7\fs18   InstantStrToCharSet('abc');  //['a'..'c']
\par   InstantStrToCharSet('a..d');  //['a'..'d']
\par   InstantStrToCharSet('1..4a..d');  //['1'..'4','a'..'d']
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11890}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantStrToDate}
{\up +}{\footnote {\up +} functionsssymbol:000390}
{\up K}{\footnote {\up K} InstantStrToDate;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 InstantStrToDate \b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11900}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Converts a string to a TDateTime value.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantStrToDate(\b const\b0  Str: \b string\b0 ): TDateTime;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantStrToDate to convert a date value encoded in a string to a TDateTime value. The date string must conform to the date format of ISO 8601.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11900}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDateFormat\strike0{\v Scribble12650>main}
\par \strike InstantStrToTime\strike0{\v Scribble11950>main}
\par \strike InstantStrToDateTime\strike0{\v Scribble11910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantStrToDateTime}
{\up +}{\footnote {\up +} functionsssymbol:000400}
{\up K}{\footnote {\up K} InstantStrToDateTime;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantStrToDateTime \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11920}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Converts a string to a TDateTime value.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantStrToDateTime(\b const\b0  Str: \b string\b0 ): TDateTime;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantStrToDateTime to convert a date and time encoded in a string to a TDateTime value. The date-time string must conform to the date and time format of ISO 8601.
\par If S does not contain a valid date, InstantStrToDateTime raises an EInstantConvertionError exception.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11920}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDateTimeFormat\strike0{\v Scribble12670>main}
\par \strike InstantStrToDate\strike0{\v Scribble11890>main}
\par \strike InstantStrToTime\strike0{\v Scribble11950>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantStrToList}
{\up +}{\footnote {\up +} functionsssymbol:000410}
{\up K}{\footnote {\up K} InstantStrToList;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantStrToList \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\strike Example 1\strike0{\v Scribble11940>example}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Adds the individual strings of a delimited string to a TStrings object.
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantStrToList(\b const\b0  Str: \b string\b0 ; List: TStrings; Delimiters: TChars);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantStrToList converts a delimited string to individual strings and adds these strings to a TStrings object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11940}
{\up >}{\footnote {\up >} example}
{\up $}{\footnote {\up $} InstantStrToList, Example 1}
{\up K}{\footnote {\up K} InstantStrToList,Example 1;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 Example 1 \cf1\b0\fs16 
\par \strike InstantStrToList\strike0{\v Scribble11930>main} 
\par \pard\keep\f7\fs18 var
\par   S: string;
\par   StringList: TStringList;
\par begin
\par   S := 'String1:String2.String3<String4';
\par   StringList := TStringList.Create;
\par   try
\par     InstantStrToList(S, StringList, [':','.','<','x']);
\par     ShowMessage(IntToStr(StringList.Count)); //StringList.Count equals 4
\par   finally
\par     StringList.Free;
\par   end;
\par end;
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantStrToTime}
{\up +}{\footnote {\up +} functionsssymbol:000420}
{\up K}{\footnote {\up K} InstantStrToTime;}
}
\viewkind4\uc1\pard\keepn\cf1\lang1040\b\f0\fs24 InstantStrToTime \b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11960}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main}
\par \pard\sb25\sa85\tx1435\fs18 Converts a string to a TDateTime value.
\par \pard\sb25\sa25\tx1435\b\f7 function\b0  InstantStrToTime(\b const\b0  Str: \b string\b0 ): TDateTime;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use \strike InstantStrToDate\strike0{\v Scribble11890>main} to convert a time value encoded in a string to a TDateTime value. The time string must conform to the time format of ISO 8601.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11960}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantTimeFormat\strike0{\v Scribble12690>main}
\par \strike InstantStrToDate\strike0{\v Scribble11890>main}
\par \strike InstantStrToDateTime\strike0{\v Scribble11910>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11970}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantUnregisterAccessorClass}
{\up +}{\footnote {\up +} functionsssymbol:000430}
{\up K}{\footnote {\up K} InstantUnregisterAccessorClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantUnregisterAccessorClass \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble11980}\tab\strike Unit: InstantPresentation\strike0{\v Scribble13100>main}
\par \pard\sb25\sa85\tx1435\fs18 Unregisters a class derived from TInstantAccessor
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantUnregisterAccessorClass(AClass: TInstantAccessorClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantUnregisterAccessorClass to unregister an accessor class that is no longer required.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11980}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantRegisterAccessorClass\strike0{\v Scribble11780>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble11990}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantUnregisterClass}
{\up +}{\footnote {\up +} functionsssymbol:000440}
{\up K}{\footnote {\up K} InstantUnregisterClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantUnregisterClass \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12000}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 Unregisters a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantUnregisterClass(AClass: TInstantObjectClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantUnregisterClass to unregister a class derived from \strike TInstantObject\strike0{\v Scribble7390>main} that is no longer required.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12000}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantRegisterClass\strike0{\v Scribble11800>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12010}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantUnregisterClasses}
{\up +}{\footnote {\up +} functionsssymbol:000450}
{\up K}{\footnote {\up K} InstantUnregisterClasses;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantUnregisterClasses \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12020}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Unregisters an array of classes derived from \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantUnregisterClasses(AClasses: \b array\b0  \b of\b0  TInstantObjectClass);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Use InstantUnregisterClasses to conveniently unregister an array of classes that are no longer required, instead of unregistering the classes individually.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12020}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantRegisterClasses\strike0{\v Scribble11820>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantWriteObject}
{\up +}{\footnote {\up +} functionsssymbol:000460}
{\up K}{\footnote {\up K} InstantWriteObject;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantWriteObject \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12040}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\fs18 Writes an object to a stream
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantWriteObject(Stream: TStream; Format: \strike TInstantStreamFormat\strike0{\v Scribble12580>main}; AObject: TPersistent);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantWriteObject to write the object specified by the AObject argument to the stream specified by the Stream argument. The Format argument specifies the format of the output.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  The sfXML format can only be used for instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12040}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantReadObject\strike0{\v Scribble11720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantWriteObjects}
{\up +}{\footnote {\up +} functionsssymbol:000470}
{\up K}{\footnote {\up K} InstantWriteObjects;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantWriteObjects \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12060}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\tx1435\fs18 Writes objects to a stream
\par \pard\sb25\sa25\tx1435\b\f7 procedure\b0  InstantWriteObjects(Stream: TStream; Format: \strike TInstantStreamFormat\strike0{\v Scribble12580>main}; Objects: TList);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Call InstantWriteObjects to write the objects in the list specified by the Objects argument to the stream specified by the Stream argument. The Format argument specifies the format of the output.
\par \pard\fi-195\li195\sb25\sa25\tx1435\b Note: \b0  The sfXML format can only be used for instances of \strike TInstantObject\strike0{\v Scribble7390>main} descendants
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12060}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantReadObjects\strike0{\v Scribble11740>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12070}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantVersion}
{\up +}{\footnote {\up +} recordssymbol:000010}
{\up K}{\footnote {\up K} TInstantVersion;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantVersion \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12080}\tab\strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\tx1435\fs18 Specifies the version of a file.
\par \pard\sb25\sa25\tx1435\f7 TInstantVersion = \b record\b0 
\par   Build: Word;
\par   Major: Word;
\par   Minor: Word;
\par   Release: Word;
\par   \b end\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Specifies as a record the version of a file.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12080}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantFileVersion\strike0{\v Scribble11440>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12090}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAddClassFieldDefEvent}
{\up +}{\footnote {\up +} typessymbol:000040}
{\up K}{\footnote {\up K} TInstantAddClassFieldDefEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAddClassFieldDefEvent \cf1\b0\fs16 
\par \cf2\strike Unit: InstantP\lang1033\f1 resentation\cf3\strike0{\v Scribble13100>main}\cf1\lang1040\f0 
\par \pard\sb25\sa85\fs18 The event type for \lang1033\f1 exposer field definition\lang1040\f0  \lang1033\f1 creation\lang1040\f0  events.
\par \pard\sb25\sa25\f7 TInstantAddClassFieldDefEvent = \b procedure\b0  (const FieldName : string; var BreakProcess : boolean) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantAddClassFieldDefEvent is the event type for \lang1033\f1 exposer field definition\lang1040\f0  \lang1033\f1 creation\lang1040\f0  events. The \f5 FieldName \f0 argument contains \lang1033\f1 the field name for the field definition that is to be created\lang1040\f0 .\lang1033\f1  Set the BreakProcess variable to false to prevent this field definition and any further field definitions from being created during the current process.\lang1040\f0 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAccessMode}
{\up +}{\footnote {\up +} typessymbol:000010}
{\up K}{\footnote {\up K} TInstantAccessMode;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAccessMode \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 Determines how an object is being accessed.
\par \pard\sb25\sa25\f7 TInstantAccessMode = (amObject, amContent);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 Specifies how objects are accessed. Either the object itself or objects \lang1033\f1 referenced by its \lang1040\f0 containe\lang1033\f1 r attributes\lang1040\f0  can be accessed.
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab Meaning\lang1040\f0 
\par \b0 amObject\lang1033\f1\tab\lang1040\f0 The object itself is accessed.\b 
\par \b0 amContent\lang1033\f1\tab\lang1040\f0 The contained objects are accessed.\b 
\par \b0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12110}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantADOProviderType}
{\up +}{\footnote {\up +} typessymbol:000020}
{\up K}{\footnote {\up K} TInstantADOProviderType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantADOProviderType \cf1\b0\fs16 
\par \strike Unit: InstantADO\strike0{\v Scribble12710>main} 
\par \pard\sb25\sa85\fs18 The ADO provider type
\par \pard\sb25\sa25\f7 TInstantADOProviderType = (ptUnknown, ptMSJet, ptMSSQLServer, ptOracle, ptMySQL, ptIBMDB2);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 TInstantADOProviderType enumerates the types of ADO providers recognized by InstantObjects\lang1033\f1 .\lang1040\f0  
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par \f2 ptUnknown\lang1033\tab\lang1040 The provider is not recognized
\par \f0 pt\lang1033\f1 MS\lang1040\f0 Jet\lang1033\f1\tab\lang1040\f0 Microsoft Jet OLE DB Provider
\par ptMSSQLServer\lang1033\f1\tab\lang1040\f0 Microsoft OLE DB Provider for SQL Server
\par ptOracle\lang1033\f1\tab\lang1040\f0 Oracle OLE DB Provider
\par \f5 ptMySQL\lang1033\tab\lang1040 MySQL \f0 Provider
\par \f5 ptIBMDB2\lang1033\tab\lang1040 IBM DB2 \f0 Provider\f5 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12120}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttributeChangeEvent}
{\up +}{\footnote {\up +} typessymbol:000030}
{\up K}{\footnote {\up K} TInstantAttributeChangeEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttributeChangeEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 The event type for attribute change notification events.
\par \pard\sb25\sa25\f7 TInstantAttributeChangeEvent = \b procedure\b0  (Sender: \strike TInstantObject\strike0{\v Scribble7390>main}; Attribute: \strike TInstantAttribute\strike0{\v Scribble2170>main}) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantAttributeChangeEvent is the event type for attribute change notification events. The Sender argument contains a reference to the object that the attribute, specified by the Attribute argument, belongs to.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12130}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantAttributeType}
{\up +}{\footnote {\up +} typessymbol:000050}
{\up K}{\footnote {\up K} TInstantAttributeType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantAttributeType \cf1\b0\fs16 
\par \cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf1  
\par \pard\sb25\sa85\fs18 Specifies the type of an attribute.
\par \pard\sb25\sa25\f7 TInstantAttributeType = (atUnknown, atInteger, atFloat, atCurrency, atBoolean, atString, atDateTime, atBlob, atMemo, atPart, atReference, atParts, atReferences);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 TInstantAttributeType specifies the type of an attribute. 
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par atUnknown\lang1033\f1\tab\lang1040\f0 Unknown or undetermined
\par atInteger\lang1033\f1\tab\lang1040\f0 32-Bit integer attribute
\par atFloat\lang1033\f1\tab\lang1040\f0 Floating-point numeric attribute
\par at\lang1033\f1 Currency\tab Currency \lang1040\f0 attribute
\par atBoolean\lang1033\f1\tab\lang1040\f0 Boolean attribute
\par atString\lang1033\f1\tab\lang1040\f0 Character or string attribute
\par atDateTime\lang1033\f1\tab\lang1040\f0 Date and time attribute
\par atBlob\lang1033\f1\tab\lang1040\f0 Binary Large Object attribute
\par atMemo\lang1033\f1\tab\lang1040\f0 Text memo attribute
\par atPart\lang1033\f1\tab\lang1040\f0 Single object embedding attribute
\par atReference\lang1033\f1\tab\lang1040\f0 Single object reference attribute
\par atParts\lang1033\f1\tab\lang1040\f0 Multiple objects embedding attribute
\par atReferences\lang1033\f1\tab\lang1040\f0 Multiple objects reference attribute
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12140}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantBDEDriverType}
{\up +}{\footnote {\up +} typessymbol:000060}
{\up K}{\footnote {\up K} TInstantBDEDriverType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantBDEDriverType \cf1\b0\fs16 
\par \strike Unit: InstantBDE\strike0{\v Scribble12760>main} 
\par \pard\sb25\sa85\fs18 The BDE driver type
\par \pard\sb25\sa25\f7 TInstantBDEDriverType = (dtUnknown, dtStandard, dtInterBase, dtMSAccess, dtMSSQLServer, dtOracle, dtDB2);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 TInstantBDEDriverType enumerates the types of BDE drivers recognized by InstantObjects\lang1033\f1 .\lang1040\f0  
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par dtUnknown\lang1033\f1\tab\lang1040\f0 The driver is not recognized
\par dtStandard\lang1033\f1\tab\lang1040\f0 STANDARD driver
\par dtInterBase\lang1033\f1\tab\lang1040\f0 INTRBASE driver
\par dtMSAccess\lang1033\f1\tab\lang1040\f0 MSACCESS driver
\par dtMSSQLServer\lang1033\f1\tab\lang1040\f0 MSSQL driver
\par dtOracle\lang1033\f1\tab\lang1040\f0 ORACLE driver
\par \f5 dtDB2\tab IBM DB2 driver\f0 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12150}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCompareObjectsEvent}
{\up +}{\footnote {\up +} typessymbol:000070}
{\up K}{\footnote {\up K} TInstantCompareObjectsEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCompareObjectsEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for object comparison events.
\par \pard\sb25\sa25\f7 TInstantCompareObjectsEvent = \b procedure\b0  (Sender: TObject; AObject1, AObject2: TObject; \b var\b0  Compare: Integer) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use TInstantCompareObjectsEvent as the event type for object comparison events. The AObject1 and AObject2 arguments specify the objects that are to be compared. Set the Compare argument to a value less than 0 if AObject1 is less than AObject2. Set Compare to 0 if AObject1 is equivalent to AObject2, and set Compare to a value greater than 0 if AObject1 is greater than AObject2.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCompareOption}
{\up +}{\footnote {\up +} typessymbol:000080}
{\up K}{\footnote {\up K} TInstantCompareOption;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCompareOption \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Specifies options for a comparison.
\par \pard\sb25\sa25\f7 TInstantCompareOption = (coCaseInsensitive, coPartial);
\par \strike TInstantCompareOptions\strike0{\v Scribble12170>main} = \b set\b0  \b of\b0  TInstantCompareOption;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantCompareOption specifies the options that apply to a comparison.
\par \pard\fi-1980\li1980\tx1980 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par coCaseInsensitive\lang1033\f1\tab\lang1040\f0 A case insensitive comparison is performed.
\par coPartial\lang1033\f1\tab\lang1040\f0 A partial match is sufficient.
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12170}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCompareOptions}
{\up +}{\footnote {\up +} typessymbol:000090}
{\up K}{\footnote {\up K} TInstantCompareOptions;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCompareOptions \cf1\b0\fs16 
\par \strike Unit: InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb25\sa85\fs18 Specifies options for a comparison.
\par \pard\sb25\sa25\strike\f7 TInstantCompareOption\strike0{\v Scribble12160>main} = (coCaseInsensitive, coPartial);
\par TInstantCompareOptions = \b set\b0  \b of\b0  \strike TInstantCompareOption\strike0{\v Scribble12160>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantCompareOption specifies the options that apply to a comparison.
\par \pard\fi-1980\li1980\tx1980 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par coCaseInsensitive\lang1033\f1\tab\lang1040\f0 A case insensitive comparison is performed.
\par coPartial\lang1033\f1\tab\lang1040\f0 A partial match is sufficient.
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12180}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConflictAction}
{\up +}{\footnote {\up +} typessymbol:000100}
{\up K}{\footnote {\up K} TInstantConflictAction;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConflictAction \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Specifies how conflicts should be resolved.
\par \pard\sb25\sa25\f7 TInstantConflictAction = (caIgnore, caFail);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 TInstantConflictAction specifies how conflicting updates to an object should be handled. 
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par caIgnore\lang1033\f1\tab\lang1040\f0 Conflicts are ignored. The operation is forcefully executed.
\par caFail\lang1033\f1\tab\lang1040\f0 Conflicts result in an error.
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12190}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManagerActionType}
{\up +}{\footnote {\up +} typessymbol:000110}
{\up K}{\footnote {\up K} TInstantConnectionManagerActionType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManagerActionType \cf1\b0\fs16 
\par \strike Unit: InstantConnectionManager\strike0{\v Scribble12860>main} 
\par \pard\sb25\sa85\fs18 Connection manager action types.
\par \pard\sb25\sa25\f7 TInstantConnectionManagerActionType = (atNew, atEdit, atDelete, atRename, atConnect, atDisconnect, atBuild);
\par \strike TInstantConnectionManagerActionTypes\strike0{\v Scribble12200>main} = \b set\b0  \b of\b0  TInstantConnectionManagerActionType;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Defines the actions that can appear in a connection manager.
\par \pard\fi-1980\li1980\tx1980 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par atNew\lang1033\f1\tab\lang1040\f0 Allow creating new connections\lang1033\f1 .\lang1040\f0 
\par atEdit\lang1033\f1\tab\lang1040\f0 Allow editing existing connections.
\par atDelete\lang1033\f1\tab\lang1040\f0 Allow deleting connections\lang1033\f1 .\lang1040\f0 
\par atRename\lang1033\f1\tab\lang1040\f0 Allow renaming connections\lang1033\f1 .\lang1040\f0 
\par atConnect\lang1033\f1\tab\lang1040\f0 Allow connecting from within the manager\lang1033\f1 .\lang1040\f0 
\par atDisconnect\lang1033\f1\tab\lang1040\f0 Allow disconnecting from within the manager\lang1033\f1 .\lang1040\f0 
\par atBuild\lang1033\f1\tab\lang1040\f0 Allow building the database via a connection\lang1033\f1 .\lang1040\f0 
\par \pard\fi-1980\li1980\tx1980 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12200}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectionManagerActionTypes}
{\up +}{\footnote {\up +} typessymbol:000120}
{\up K}{\footnote {\up K} TInstantConnectionManagerActionTypes;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectionManagerActionTypes \cf1\b0\fs16 
\par \strike Unit: InstantConnectionManager\strike0{\v Scribble12860>main} 
\par \pard\sb25\sa85\fs18 Connection manager action types.
\par \pard\sb25\sa25\strike\f7 TInstantConnectionManagerActionType\strike0{\v Scribble12190>main} = (atNew, atEdit, atDelete, atRename, atConnect, atDisconnect, atBuild);
\par TInstantConnectionManagerActionTypes = \b set\b0  \b of\b0  \strike TInstantConnectionManagerActionType\strike0{\v Scribble12190>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Defines the actions that can appear in a connection manager.
\par \pard\fi-1980\li1980\tx1980 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0 
\par atNew\lang1033\f1\tab\lang1040\f0 Allow creating new connections\lang1033\f1 .\lang1040\f0 
\par atEdit\lang1033\f1\tab\lang1040\f0 Allow editing existing connections.
\par atDelete\lang1033\f1\tab\lang1040\f0 Allow deleting connections\lang1033\f1 .\lang1040\f0 
\par atRename\lang1033\f1\tab\lang1040\f0 Allow renaming connections\lang1033\f1 .\lang1040\f0 
\par atConnect\lang1033\f1\tab\lang1040\f0 Allow connecting from within the manager\lang1033\f1 .\lang1040\f0 
\par atDisconnect\lang1033\f1\tab\lang1040\f0 Allow disconnecting from within the manager\lang1033\f1 .\lang1040\f0 
\par atBuild\lang1033\f1\tab\lang1040\f0 Allow building the database via a connection\lang1033\f1 .\lang1040\f0 
\par \pard 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12210}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantConnectorClass}
{\up +}{\footnote {\up +} typessymbol:000130}
{\up K}{\footnote {\up K} TInstantConnectorClass;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantConnectorClass \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050} 
\par \pard\sb25\sa85\fs18 Provides access to a database.
\par \pard\sb25\sa25\f7 TInstantConnectorClass = \b class\b0  \b of\b0  \strike TInstantConnector\strike0{\v Scribble3770>main};
\par \strike TInstantConnector\strike0{\v Scribble3770>main} = \b class\b0 (TComponent)
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantConnector components are used to gain access to databases. The connector uses components that are specific to the database engine to establish the actual connection. Multiple objects and components can share the connection provided by a single TInstantConnector component.
\par TInstantConnector introduces properties and methods that fall into the following categories:
\par \pard\fi-295\li495\sb25\sa25\tx495\{bmct bm3.BMP\}\tab Connecting and disconnecting to a database
\par \{bmct bm3.BMP\}\tab Transaction control
\par \{bmct bm3.BMP\}\tab Information about the database
\par \{bmct bm3.BMP\}\tab Initialization of a database specific persistence broker
\par \pard\sb25\sa25\tx495 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12220}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContentChangeEvent}
{\up +}{\footnote {\up +} typessymbol:000140}
{\up K}{\footnote {\up K} TInstantContentChangeEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantContentChangeEvent \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12230}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 The event type for content change notification events.
\par \pard\sb25\sa25\tx1435\f7 TInstantContentChangeEvent = \b procedure\b0  (Sender: \strike TInstantObject\strike0{\v Scribble7390>main}; Container: \strike TInstantContainer\strike0{\v Scribble4300>main}; ChangeType: \strike TInstantContentChangeType\strike0{\v Scribble12240>main}; \b Index\b0 : Integer; AObject: \strike TInstantObject\strike0{\v Scribble7390>main}) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantContentChangeEvent is the event type for container attribute content change notification events. The Sender argument contains a reference to the object which the changed container, specified by the Container argument, belongs to. The ChangeType specifies the type of change that occurred. The Index argument specifies the index in the containers array of objects where the change occurred. The AObject argument holds a reference to the object for which the change occurred. Please note that this reference may be unassigned.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12230}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.OnBeforeContentChange\strike0{\v Scribble9110>main}
\par \strike TInstantObject.OnAfterContentChange\strike0{\v Scribble9080>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12240}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantContentChangeType}
{\up +}{\footnote {\up +} typessymbol:000150}
{\up K}{\footnote {\up K} TInstantContentChangeType;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 TInstantContentChangeType \b0\fs16  
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12250}\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf0 
\par \pard\sb25\sa85\tx1435\fs18 The types of possible changes that may occur to a container.
\par \pard\sb25\sa25\tx1435\f7 TInstantContentChangeType = (ctAdd, ctRemove, ctReplace, ctClear);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\b0 TInstantContentChangeType specifies the possible change type that can occur to a container. 
\par \fs10 
\par \pard\tx1980\b\fs18 Value\f1\tab Meaning\b0 
\par ctAdd\tab An object has been added or inserted 
\par ctRemove\tab An object has been deleted or removed
\par ctReplace\tab An object has been replaced
\par ctClear\tab The container was cleared 
\par  
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12250}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContentChangeEvent\strike0{\v Scribble12220>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12260}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantCreateObjectEvent}
{\up +}{\footnote {\up +} typessymbol:000160}
{\up K}{\footnote {\up K} TInstantCreateObjectEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantCreateObjectEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type used for object creation events.
\par \pard\sb25\sa25\f7 TInstantCreateObjectEvent = \b procedure\b0  (Sender: TObject; \b var\b0  AObject: TObject) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantCreateObjectEvent is the event type for object creation events. The Sender argument contains the object that request an object to be created, and the AObject argument should be assigned to hold the created object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12270}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantDataTypes}
{\up +}{\footnote {\up +} typessymbol:000170}
{\up K}{\footnote {\up K} TInstantDataType;TInstantDataTypes;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantDataTypes \cf1\b0\fs16 
\par \cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf1  
\par \pard\sb25\sa85\fs18 Specifies the datatype of fields in tables
\par \pard\sb25\sa25\f7 TInstantDataType = (dtInteger, dtFloat, dtCurrency, dtBoolean, dtString, dtMemo, dtDateTime, dtBlob);
\par TInstantDataTypes = set of TInstantDataType;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantDataType specifies the datatype of fields in tables.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12280}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantErrorAction}
{\up +}{\footnote {\up +} typessymbol:000180}
{\up K}{\footnote {\up K} TInstantErrorAction;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantErrorAction \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12290}\cf1\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf1  
\par \pard\sb25\sa85\tx1435\fs18 Defines actions used in error handlers.
\par \pard\sb25\sa25\tx1435\f7 TInstantErrorAction = (eaRetry, eaIgnore, eaError, eaRevert, eaCancel);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\b0 The TInstantErrorAction type defines the possible values for actions used in error handlers.\lang1033\f1 
\par 
\par \lang1040\f0 Although the exact interpretation of the value depends on what kind of operation is performed, their general meaning is described in the following table: 
\par 
\par \pard\tx1980\b Value\lang1033\f1\tab Meaning\lang1040\b0\f2 
\par \f0 eaRetry\lang1033\f1\tab\lang1040\f0 Retry the operation.\f2 
\par \f0 eaIgnore\lang1033\f1\tab\lang1040\f0 Retry the operation and ignore errors.\f2 
\par \f0 eaError\lang1033\f1\tab\lang1040\f0 Fail.\f2 
\par \f0 eaRevert\lang1033\f1\tab\lang1040\f0 Revert the operation.\f2 
\par \f0 eaCancel\lang1033\f1\tab\lang1040\f0 Cancel the operation.\f2 
\par \pard\fi-1980\li1980\tx1980\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12290}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.OnError\strike0{\v Scribble9150>main}
\par \strike TInstantObject.HandleError\strike0{\v Scribble8740>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12300}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantErrorEvent}
{\up +}{\footnote {\up +} typessymbol:000190}
{\up K}{\footnote {\up K} TInstantErrorEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantErrorEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 The event type for error events.
\par \pard\sb25\sa25\f7 TInstantErrorEvent = \b procedure\b0  (Sender: TObject; OperationType: \strike TInstantOperationType\strike0{\v Scribble12490>main}; E: Exception; \b var\b0  Action: \strike TInstantErrorAction\strike0{\v Scribble12280>main}) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantErrorEvent is the event type for error events. The Sender argument contains a reference to the object for which the operation failed. The OperationType argument specifies during which kind of operation the error occurred. The E argument contains the causing Exception object. Use the Action argument to specify what kind of action should be performed in response to the Error.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12310}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorerLayout}
{\up +}{\footnote {\up +} typessymbol:000200}
{\up K}{\footnote {\up K} TInstantExplorerLayout;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 TInstantExplorerLayout \b0\fs16 
\par \cf2\strike Unit: InstantExplorer\cf3\strike0{\v Scribble12950>main}\cf0 
\par \pard\sb25\sa85\fs18 Determines the layout of the explorer.
\par \pard\sb25\sa25\f7 TInstantExplorerLayout = (loTreeOnly, loDetailOnly, loVertical, loHorizontal);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Layout is used to specify the extent and arrangement of the explorer.
\par \fs10 
\par \pard\tx1980\b\fs18 Value\f1\tab Meaning\b0 
\par loTreeOnly\tab Show tree only
\par loDetailOnly\tab Show detail only
\par loVertical\tab Show tree on top of details
\par loHorizontal\tab Show tree left to details 
\par  
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12320}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorerNodeType}
{\up +}{\footnote {\up +} typessymbol:000210}
{\up K}{\footnote {\up K} TInstantExplorerNodeType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorerNodeType \cf1\b0\fs16 
\par \strike Unit: InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb25\sa85\fs18 Defines node types of an explorer.
\par \pard\sb25\sa25\f7 TInstantExplorerNodeType = (ntProperty, ntObject, ntContainer);
\par \strike TInstantExplorerNodeTypes\strike0{\v Scribble12330>main} = \b set\b0  \b of\b0  TInstantExplorerNodeType;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Defines the various node types used by \strike TInstantExplorer\strike0{\v Scribble6230>main}.
\par \pard\fi-1980\li1980\tx1980\tab\tab 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0\f2 
\par \f0 ntProperty\lang1033\f1\tab\lang1040\f0 Node represents a property of an object
\par ntObject\lang1033\f1\tab\lang1040\f0 Node represents an object
\par ntContainer\lang1033\f1\tab\lang1040\f0 Node represents a container attribute
\par 
\par \pard\fi-1980\li1980\tx1980 
\par \f2 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12330}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExplorerNodeTypes}
{\up +}{\footnote {\up +} typessymbol:000220}
{\up K}{\footnote {\up K} TInstantExplorerNodeTypes;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantExplorerNodeTypes \cf1\b0\fs16 
\par \strike Unit: InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb25\sa85\fs18 Defines node types of an explorer.
\par \pard\sb25\sa25\strike\f7 TInstantExplorerNodeType\strike0{\v Scribble12320>main} = (ntProperty, ntObject, ntContainer);
\par TInstantExplorerNodeTypes = \b set\b0  \b of\b0  \strike TInstantExplorerNodeType\strike0{\v Scribble12320>main};
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Defines the various node types used by \strike TInstantExplorer\strike0{\v Scribble6230>main}.
\par \pard\fi-1980\li1980\tx1980\tab\tab 
\par \pard\tx1980\b Value\lang1033\f1\tab\lang1040\f0 Meaning\b0\f2 
\par \f0 ntProperty\lang1033\f1\tab\lang1040\f0 Node represents a property of an object
\par ntObject\lang1033\f1\tab\lang1040\f0 Node represents an object
\par ntContainer\lang1033\f1\tab\lang1040\f0 Node represents a container attribute
\par 
\par \pard 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12340}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantExposerOptions}
{\up +}{\footnote {\up +} typessymbol:000240}
{\up K}{\footnote {\up K} TInstantExposerOption;TInstantExposerOptions;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 TInstantExposerOptions\b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12350}\tab\cf2\strike Unit: InstantPresentation\cf3\strike0{\v Scribble13100>main}\cf0 
\par \pard\sb25\sa85\tx1435\fs18 Specifies options for an exposer.
\par \pard\fi-2620\li2620\sb25\sa25\f7 TInstantExposerOption = (eoAutoApply, eoAutoRemember, eoNotDisposeReferences, eoDeferInsert, eoSyncEdit);
\par \pard\sb25\sa25\tx1435 TInstantExposerOptions = \b set\b0  \b of\b0  TInstantExposerOption;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantExposerOptions specifies a set of options for an exposer that modifies its behavior.
\par \pard\sb25\sa25\f2\fs10 
\par \pard\fi-2440\li2440\sb25\sa25\tx2440\b\fs18 Value\tab Description\tab\b0 
\par eoAutoApply\tab Changes \f0 made to the exposer's \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf0  or objects contained in the \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf0  should be applied automatically. For \cf2\strike TInstantObject\cf3\strike0{\v Scribble7390>main}\cf0  descendants this means that the persistent storage is updated for each changed object. Deleted objects will be disposed from the persistent storage and new objects will be added.
\par eoAutoRemember\tab Automatically applies \cf2\strike Remember\cf3\strike0{\v Scribble5430>main}\cf0  and \cf2\strike Revert\cf3\strike0{\v Scribble5480>main}\cf0  functionality to the \f1 exposer's \cf2\strike\f0 Subject\cf3\strike0{\v Scribble5150>main}\cf0 .
\par eoNotDisposeReferences\tab Do not \cf2\strike Dispose\cf3\strike0{\v Scribble8570>main}\cf0  referenced objects of References attributes when deleting the \cf2\strike CurrentObject\cf3\strike0{\v Scribble4920>main}\cf0  of the exposer. This option is only effective when the exposer is in amContent \cf2\strike Mode\cf3\strike0{\v Scribble5020>main}\cf0  and its \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf0  is a References attribute.
\par eoDeferInsert\tab\lang1033\f1 Addition or i\lang3081\f0 nsertion of object\lang1033\f1 s\lang3081\f0  in\lang1033\f1 to\lang3081\f0  \lang1033\f1 a\lang3081\f0  container of the Subject is deferred. It specifies that objects that are appended or inserted are not applied to the container of the \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf0  until a row is posted. This option is only effective when the exposer is in amContent \cf2\strike\f1 Mode\cf3\strike0\f0{\v Scribble5020>main}\cf0 .
\par \pard\fi-2440\li2440\tx2440\cf1\f2 eoSyncEdit\lang1033\tab\lang3081 Allows a buffer update if the exposer's \cf2\strike Subject\cf3\strike0{\v Scribble5150>main}\cf1  is changed or refreshed and the exposer is in Edit mode.\lang1033  \f5 This option is useful \lang3081\f2 when a\lang1033\f5  \lang3081\f2 single \lang1033\f5 o\lang3081\f2 bject is simultaneously connected to multiple exposers\lang1033\f5  \cf0\lang3081 to ensure that all of the exposers maintain a consistent view of the shared object\cf1\f2 .\lang1033\f5  \cf0\lang3081 If eoSyncEdit is not enabled (the default) in this scenario, the exposers can easily get out of sync causing undesirable behaviour.\f0 
\par \pard\fi-2440\li2440\sb25\sa25\tx2440 
\par \tab\f2 
\par \pard\f5 . 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12350}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantCustomExposer.Options\strike0{\v Scribble5110>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12360}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFieldDefEvent}
{\up +}{\footnote {\up +} typessymbol:000250}
{\up K}{\footnote {\up K} TInstantFieldDefEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFieldDefEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for field definition initialization events.
\par \pard\sb25\sa25\f7 TInstantFieldDefEvent = \b procedure\b0  (Sender: TObject; FieldDef: TFieldDef) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use TInstantFieldDefEvent as the event type for field definition initialization events. The Sender argument specifies the holder of the TFieldDef object specified by the FieldDef argument that should be initialized.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12370}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFieldErrorEvent}
{\up +}{\footnote {\up +} typessymbol:000260}
{\up K}{\footnote {\up K} TInstantFieldErrorEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFieldErrorEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for field errors.
\par \pard\sb25\sa25\f7 TInstantFieldErrorEvent = \b procedure\b0  (Sender: TObject; E: Exception; Field: TField; Value: Variant; \b Write\b0 : Boolean; \b var\b0  Handled: Boolean) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use TInstantFieldErrorEvent as the event type for field error events. The Sender argument specifies the holder of the field specified by the Field argument for which the error occurred. The E argument specifies the causing exception. The Value argument specifies the erroneous value that is either read from or written to the field. If the error is caused by writing the value to the field, the Write argument is True. Otherwise the Write argument is false.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12380}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFieldEvent}
{\up +}{\footnote {\up +} typessymbol:000270}
{\up K}{\footnote {\up K} TInstantFieldEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantFieldEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for field events.
\par \pard\sb25\sa25\f7 TInstantFieldEvent = \b procedure\b0  (Sender: TObject; Field: TField) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 Use TInstantFieldEvent as the event type for field events. The Sender argument specifies the holder of the field specified by the Field argument.
\par 
\par \pard\plain\f1

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12390}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantFieldOptions}
{\up +}{\footnote {\up +} typessymbol:000230}
{\up K}{\footnote {\up K} TInstantFieldOption;TInstantFieldOptions;}
}
\viewkind4\uc1\pard\keepn\lang1033\b\f1\fs24 TInstantFieldOptions\lang3081\b0\f0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12400}\tab\cf2\strike Unit: InstantPresentation\cf3\strike0{\v Scribble13100>main}\cf0
\par \pard\sb25\sa85\tx1435\cf1\lang1033\f1\fs18 Defines additional default field creation\lang1040\f0  \cf0\lang3081 options for an exposer.
\par \pard\fi-2620\li2620\sb25\sa25\f7 TInstant\lang1033\f8 Field\lang3081\f7 Option = (\lang1033\f8 f\lang3081\f7 o\lang1033\f8 Objects\lang3081\f7 , \lang1033\f8 f\lang3081\f7 o\lang1033\f8 Thorough\lang3081\f7 , \lang1033\f8 foRecurseNesting\lang3081\f7 );
\par \pard\sb25\sa25\tx1435 TInstant\lang1033\f8 Field\lang3081\f7 Options = \b set\b0  \b of\b0  TInstant\lang1033\f8 Field\lang3081\f7 Option;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\b0\f5 An exposer will create one default field for each s\cf1\lang1040\f0 imple published \cf0\lang3081\f5 property of the exposed object. \f0 TInstant\lang1033\f1 Field\lang3081\f0 Options specifies \f5 what kinds of additional default fields are created by \f0 an exposer\lang1033\f1  for published properties\lang3081\f0 .
\par \pard\sb25\sa25\f2\fs10 
\par \pard\fi-2000\li2000\sb25\sa25\tx1980\b\fs18 Value\tab\lang1033\f5 Meaning\lang3081\f2\tab\b0 
\par \lang1033\f5 f\lang3081 o\lang1033 Objects\lang3081\f2\tab\lang1033\f5 Create fields for published object properties of the exposed object\lang3081\f0 .
\par \lang1033\f5 f\lang3081 o\lang1033 Thorough\lang3081\f0\tab\lang1033\f1 Create fields for \cf1\lang1040\f0 published properties of the objects assigned to the object properties\cf0\lang3081 .
\par \lang1033\f5 foRecurseNesting\lang3081\f0\tab\lang1033\f1 Persistent fields\f5  \f1 of \f5 object container properties \f1 created at design time are available as \cf1\lang1040\f0 nested datasets\cf0\lang1033\f1 . The contained objects can also have \f5 published \f1 object container properties that were not persisted at design time. Dataset fields for these object container\cf1\lang1040\f0  properties\lang1033\f1  can be made available a\cf0 t run time by using this option, which recursively creates dataset fields for the \f5 published \f1 object container\cf1\lang1040\f0  properties of \lang1033\f1 contained\lang1040\f0  objects assigned to the\lang1033\f1 se\lang1040\f0  properties\cf0\lang1033\f1 . This option does not affect the design time behaviour of an exposer.\lang3081\f0 
\par \pard\fi-2440\li2440\sb25\sa25\tx2440 
\par \pard\sb25\sa25\lang1033\f5 At design time the f\lang3081 o\lang1033 Objects and f\lang3081 o\lang1033 Thorough options affect the kind of fields available for selection as persistent fields. If no persistent fields are declared for the exposer these two field options determine the availability of fields during run time. When persistent fields are declared for the exposer these two field options do not affect the availability of fields during run time. If access to objects within published container properties of persisted fields is required during run time then use the foRecurseNesting option .\lang3081\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12400}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \cf2\strike TInstantCustomExposer.FieldOptions\cf3\strike0{\v Scribble4930>main}
\par \cf2\strike TInstantCustomExposer.OnAddClassFieldDef\cf3\strike0{\v Scribble5510>main}\cf2\strike 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12410}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantGetDataSetEvent}
{\up +}{\footnote {\up +} typessymbol:000280}
{\up K}{\footnote {\up K} TInstantGetDataSetEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantGetDataSetEvent \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12420}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 The event type for dataset request events.
\par \pard\sb25\sa25\tx1435\f7 TInstantGetDataSetEvent = \b procedure\b0  (Sender: TObject; \b const\b0  CommandText: \b string\b0 ; \b var\b0  DataSet: TDataset) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0\strike TInstantInitDataSetEvent\strike0{\v Scribble12440>main} is the event type for dataset request events. The Sender argument contains a reference to the object requesting a TDataSet. The dataset must be assigned to the DataSet argument. The TableName specifies the name of the table which the dataset object is associated.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12420}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantInitDataSetEvent\strike0{\v Scribble12440>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12430}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantIncludeFieldEvent}
{\up +}{\footnote {\up +} typessymbol:000290}
{\up K}{\footnote {\up K} TInstantIncludeFieldEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantIncludeFieldEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for field inclusion events.
\par \pard\sb25\sa25\f7 TInstantIncludeFieldEvent = \b procedure\b0  (Sender: TObject; \b const\b0  FieldName: \b string\b0 ; \b var\b0  Include: Boolean) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantIncludeFieldEvent is the event type for field inclusion events. The Sender argument specifies the holder of a field with the name specified by the FieldName argument for which it should be determined whether it is to be included. If the field should be included set the Include argument to True. Otherwise set the Include argument to False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12440}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantInitDataSetEvent}
{\up +}{\footnote {\up +} typessymbol:000300}
{\up K}{\footnote {\up K} TInstantInitDataSetEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantInitDataSetEvent \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12450}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 The event type for dataset initialization events.
\par \pard\sb25\sa25\tx1435\f7 TInstantInitDataSetEvent = \b procedure\b0  (Sender: TObject; \b const\b0  CommandText: \b string\b0 ; DataSet: TDataSet) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 TInstantInitDataSetEvent is the event type for dataset initialization events. The Sender argument contains a reference to the object requesting a TDataSet object specified by the DataSet argument to be initialized. The TableName specifies the name of the table which the dataset object is associated.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12450}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantGetDataSetEvent\strike0{\v Scribble12410>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12460}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantLimitObjectsEvent}
{\up +}{\footnote {\up +} typessymbol:000310}
{\up K}{\footnote {\up K} TInstantLimitObjectsEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantLimitObjectsEvent \cf1\b0\fs16 
\par \strike Unit: InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb25\sa85\fs18 The event type for object limitation events.
\par \pard\sb25\sa25\f7 TInstantLimitObjectsEvent = \b procedure\b0  (Sender: TObject; AObject: TObject; \b var\b0  Accept: Boolean) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantLimitObjectsEvent is the event type for object limitation events. The Sender argument specifies the object for which it should be determined whether it should accept or reject the object specified by the AObject argument. If It is to be accepted, set the Accept argument to True. Otherwise set the Accept argument to False.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12470}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantNotifyEvent}
{\up +}{\footnote {\up +} typessymbol:000320}
{\up K}{\footnote {\up K} TInstantNotifyEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantNotifyEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 TInstantNotifyEvent is the event type for simple notification events.
\par \pard\sb25\sa25\f7 TInstantNotifyEvent = \b procedure\b0  (Sender: \strike TInstantObject\strike0{\v Scribble7390>main}) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantNotifyEvent is the type for events that require no specific arguments except a reference to the object to which the event occurred. This object is specified by the Sender argument.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12480}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantObjectNotifyEvent}
{\up +}{\footnote {\up +} typessymbol:000330}
{\up K}{\footnote {\up K} TInstantObjectNotifyEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantObjectNotifyEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 TInstantObjectNotifyEvent is used for notification.
\par \pard\sb25\sa25\f7 TInstantObjectNotifyEvent = \b procedure\b0  (Sender: \strike TInstantObject\strike0{\v Scribble7390>main}; Notification: TInstantObjectNotification) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 The TInstantObjectNotifyEventis the type for events that are used to notify about object events.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12490}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantOperationType}
{\up +}{\footnote {\up +} typessymbol:000340}
{\up K}{\footnote {\up K} TInstantOperationType;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantOperationType \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 Indicates the type an operation.
\par \pard\sb25\sa25\f7 TInstantOperationType = (otNone, otCreate, otStore, otRetrieve, otRefresh, otDispose);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\fi-1980\li1980\tx1980\b0 TInstantOperationType indicates the type operation that occurred to an object. 
\par \b 
\par \pard\tx1980 Operation Type\lang1033\f1\tab\lang1040\f0 Operation\b0\f2 
\par \f0 otNone\lang1033\f1\tab\lang1040\f0 No operation\f2 
\par \f0 otCreate\lang1033\f1\tab\lang1040\f0 The object was created\f2 
\par \f0 otStore\lang1033\f1\tab\lang1040\f0 The object was stored\f2 
\par \f0 otRetrieve\lang1033\f1\tab\lang1040\f0 The object was retrieved\f2 
\par \f0 otRefresh\lang1033\f1\tab\lang1040\f0 The object was refreshed\f2 
\par \f0 otDispose\lang1033\f1\tab\lang1040\f0 The object was disposed\f2 
\par \pard\fi-1980\li1980\tx1980 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12500}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantPersistence}
{\up +}{\footnote {\up +} typessymbol:000350}
{\up K}{\footnote {\up K} TInstantPersistence;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantPersistence \cf1\b0\fs16 
\par \cf2\strike Unit: Instant\lang1033\f1 Types\cf3\strike0{\v Scribble13140>main}\cf1\lang1040\f0 
\par \pard\sb25\sa85\fs18 Indicates the type \lang1033\f1 of persistence for instances of a class\lang1040\f0 .
\par \pard\sb25\sa25\lang3081\f3 TInstantPersistence\lang1040  \f7 = (peEmbedded, peStored);
\par \pard\sb55\sa25\b\f0 Description
\par \pard\b0 TInstantPersistence\lang1033\f1  \lang1040\f0 indicates the type \lang1033\f1 of persistence for the instances of a class\lang1040\f0 .
\par \pard\fi-1980\li1980\tx1980\b 
\par Operation Type\lang1033\f1\tab\lang1040\f0 Operation\b0\f2 
\par \f5 peEmbedded\lang1033\tab\f1 I\lang1040\f0 nstance\lang1033\f1 s\lang1040\f0  can exist in the database only as \lang1033\f1 an attribute\lang1040\f0  of \lang1033\f1 its owner, usually in a BLOB type column in the database .\lang1040\f0  \f5 
\par peStored\lang1033\tab\lang1040\f0 Instances can be \lang1033\f1 independently \lang1040\f0 stored in and retrieved from \lang1033\f1 the database\lang1040\f0 .\f5 
\par \f2 
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12510}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantProcessObjectEvent}
{\up +}{\footnote {\up +} typessymbol:000360}
{\up K}{\footnote {\up K} TInstantProcessObjectEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantProcessObjectEvent \cf1\b0\fs16 
\par \strike Unit: InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb25\sa85\fs18 The event type for object processing events.
\par \pard\sb25\sa25\f7 TInstantProcessObjectEvent = \b procedure\b0  (Sender: TObject; AObject: TPersistent) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantProcessObjectEvent is the event type for object processing events. The Sender argument contains a reference to the processing object. The AObject argument contains a reference to the object being processed.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12520}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantProgressEvent}
{\up +}{\footnote {\up +} typessymbol:000370}
{\up K}{\footnote {\up K} TInstantProgressEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantProgressEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 The event type for progress events.
\par \pard\sb25\sa25\f7 TInstantProgressEvent = \b procedure\b0  (Sender: TObject; Count: Integer; \b var\b0  Continue: Boolean) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 TInstantProgressEvent is the event type for progress events. The Sender argument specifies the object to which the progress occurs. The Count argument specifies the progress in percent. Use the Continue argument to specify if the process triggering the event should continue.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12530}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSchemeEvent}
{\up +}{\footnote {\up +} typessymbol:000380}
{\up K}{\footnote {\up K} TInstantSchemeEvent;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSchemeEvent \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 The event type for database-build related events.
\par \pard\sb25\sa25\f7 TInstantSchemeEvent = \b procedure\b0  (Sender: TObject; Scheme: TInstantScheme) \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0\strike TInstantAttributeChangeEvent\strike0{\v Scribble12120>main} is the event type for database-build related events. The Sender argument contains a reference to the object which attempts to build a database and the Scheme argument specifies the database scheme that is used.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12540}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantSortCompare}
{\up +}{\footnote {\up +} typessymbol:000390}
{\up K}{\footnote {\up K} TInstantSortCompare;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantSortCompare \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12550}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main}
\par \pard\sb25\sa85\tx1435\fs18 Prototype of function used to Compares objects
\par \pard\sb25\sa25\tx1435\f7 TInstantSortCompare = \b function\b0  (Holder, Obj1, Obj2: \strike TInstantObject\strike0{\v Scribble7390>main}): Integer \b of\b0  \b object\b0 ;
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 Implement a function compatible with TInstantSortCompare to use for comparison of objects. The function is expected to return < 0 if Obj1 is less and Obj2, 0 if they are equal and > 0 if Obj1 is greater than Obj2. The Holder argument specifies the context of the comparison in terms of another object.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12550}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantContainer.Sort\strike0{\v Scribble4660>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12560}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStorageKind}
{\up +}{\footnote {\up +} typessymbol:000400}
{\up K}{\footnote {\up K} TInstantStorageKind;}
}
\viewkind4\uc1\pard\keepn\lang3081\b\f0\fs24 TInstantStorageKind  \b0\fs16 
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12570}\tab\cf2\strike Unit: Instant\lang1033\f1 Types\cf3\strike0{\v Scribble13140>main}\lang3081\f0\cf0 
\par \pard\sb25\sa85\tx1435\fs18 The types of \lang1033\f1 persistence table mapping options for Part, Parts and References class attributes\lang3081\f0 .
\par \pard\sb25\sa25\tx1435\f7 TInstantStorageKind = (skEmbedded, skExternal);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa85\tx1435\b0 TInstantStorageKind specifies the  type of \lang1033\f1 persistence table mapping for Part, Parts and References class attributes\lang3081\f0 . 
\par \pard\fs10 
\par \pard\tx1980\b\fs18 Value\f1\tab Meaning\b0 
\par \f5 skEmbedded\tab The atrribute value storage occurs within the table of its owning class; usually in a BLOB type column.
\par skExternal\tab The atrribute value storage is mapped externally to the table of its owning class.
\par \f1  
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12570}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \cf2\strike External Storage of Attributes\cf3\strike0{\v Scribble220>main}\cf1 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12580}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantStreamFormat}
{\up +}{\footnote {\up +} typessymbol:000410}
{\up K}{\footnote {\up K} TInstantStreamFormat;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantStreamFormat\cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12590}\tab\strike Unit: InstantClasses\strike0{\v Scribble12820>main}\cf0\b\fs24  \cf1\b0\fs16
\par \pard\sb25\sa85\tx1435\fs18 The possible stream formats
\par \pard\sb25\sa25\tx1435\f7 TInstantStreamFormat = (sfBinary, sfXML);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \b0 TInstantStreamFormat specifies the possible stream formats.
\par 
\par \pard\sb55\sa25\tx1980\b\f2 Value\tab Meaning
\par \b0 sfBinary\tab The stream contains data in binary format
\par sfXML\tab The stream contains data in the XML format
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12590}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantWriteObject\strike0{\v Scribble12030>main}
\par \strike InstantReadObject\strike0{\v Scribble11720>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12600}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} TInstantVerificationResult}
{\up +}{\footnote {\up +} typessymbol:000420}
{\up K}{\footnote {\up K} TInstantVerificationResult;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 TInstantVerificationResult \b0\fs16  
\par \pard\keepn\sb25\tx1435\cf2\ul See Also\cf3\ulnone{\v Scribble12610}\tab\cf2\strike Unit: InstantPersistence\cf3\strike0{\v Scribble13050>main}\cf0 
\par \pard\sb25\sa85\tx1435\fs18 Defines result of a verification operation.
\par \pard\sb25\sa25\tx1435\f7 TInstantVerificationResult = (vrOk, vrCancel, vrAbort, vrError);
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 The TInstantVerificationResult type defines the possible values for verification of operations.
\par 
\par \pard Although the exact interpretation of the value depends on what kind of operation is performed, their general meaning is described in the following table: 
\par \fs10 
\par \pard\tx1980\b\fs18 Value\f1\tab Meaning\b0 
\par vrOk\tab The operation may be performed
\par vrCancel\tab The operation must be canceled
\par vrAbort\tab The operation must be aborted
\par vrError\tab The operation must be terminated with an exception
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12610}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.VerifyOperation\strike0{\v Scribble9060>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12620}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantAttributePrefix}
{\up +}{\footnote {\up +} constssymbol:000010}
{\up K}{\footnote {\up K} InstantAttributePrefix;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantAttributePrefix \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12630}\tab\strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\tx1435\fs18 The prefix used for attribute fields.
\par \pard\sb25\sa25\tx1435\f7 InstantAttributePrefix: \b string\b0   = '_';
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantAttributePrefix is the prefix used for attribute fields. The value can be changed if another prefix is required.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12630}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike TInstantObject.AttributeByName\strike0{\v Scribble8140>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12640}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantClassPrefix}
{\up +}{\footnote {\up +} constssymbol:000020}
{\up K}{\footnote {\up K} InstantClassPrefix;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantClassPrefix \cf1\b0\fs16 
\par \strike Unit: InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb25\sa85\fs18 The prefix used for classes.
\par \pard\sb25\sa25\f7 InstantClassPrefix: \b string\b0   = 'T';
\par \pard\sb55\sa25\b\f0 Description
\par \pard\sb25\sa25\b0 InstantClassPrefix is the prefix used for classes. The value can be changed if another prefix is required.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12650}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDateFormat}
{\up +}{\footnote {\up +} constssymbol:000030}
{\up K}{\footnote {\up K} InstantDateFormat;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDateFormat \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12660}\tab\strike Unit: InstantConsts\strike0{\v Scribble12890>main} 
\par \pard\sb25\sa25\tx1435\f7\fs18 InstantDateFormat = 'yyyymmdd';
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantDateFormat is the date format string. It complies with the date format of ISO 8601.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12660}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantTimeFormat\strike0{\v Scribble12690>main}
\par \strike InstantDateTimeFormat\strike0{\v Scribble12670>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12670}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDateTimeFormat}
{\up +}{\footnote {\up +} constssymbol:000040}
{\up K}{\footnote {\up K} InstantDateTimeFormat;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDateTimeFormat \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12680}\tab\strike Unit: InstantConsts\strike0{\v Scribble12890>main}
\par \pard\sb25\sa25\tx1435\f7\fs18 InstantDateTimeFormat = \strike InstantDateFormat\strike0{\v Scribble12650>main} + \strike InstantTimeFormat\strike0{\v Scribble12690>main};
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantDateTimeFormat is the date and time format string. It complies with the date and time format of ISO 8601. InstantDateTimeFormat is use to convert TDateTime values to strings.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12680}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDateFormat\strike0{\v Scribble12650>main}
\par \strike InstantTimeFormat\strike0{\v Scribble12690>main}
\par \strike InstantDateTimeToStr\strike0{\v Scribble11350>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12690}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantTimeFormat}
{\up +}{\footnote {\up +} constssymbol:000050}
{\up K}{\footnote {\up K} InstantTimeFormat;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantTimeFormat \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\ul See Also\ulnone{\v Scribble12700}\tab\strike Unit: InstantConsts\strike0{\v Scribble12890>main} 
\par \pard\sb25\sa25\tx1435\f7\fs18 InstantTimeFormat = 'hhnnsszzz';
\par \pard\sb55\sa25\tx1435\b\f0 Description
\par \pard\sb25\sa25\tx1435\b0 InstantTimeFormat is the time format string. It complies with the time format of ISO 8601.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12700}
}
\viewkind4\uc1\pard\sb55\sa25\lang1040\b\f0\fs24 See Also
\par \pard\li95\sb25\sa25\cf1\b0\fs18 
\par \strike InstantDateFormat\strike0{\v Scribble12650>main}
\par \strike InstantDateTimeFormat\strike0{\v Scribble12670>main}
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12710}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantADO.pas}
{\up +}{\footnote {\up +} unitssymbol:000010}
{\up K}{\footnote {\up K} InstantADO.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantADO.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike Classes\strike0{\v Scribble12720>nav}\tab\strike Types\strike0{\v Scribble12730>nav} 
\par \pard\sb25\sa25\tx1435\fs18 InstantObjects ADO support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12720}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantADO\strike0{\v Scribble12710>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantADO
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantADOConnector\strike0{\v Scribble1900>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12730}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantADO\strike0{\v Scribble12710>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantADO
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantADOProviderType\strike0{\v Scribble12110>main}
\par \pard\li195\sb15\sa25\fs16 The ADO provider type
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12740}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantADS.pas}
{\up +}{\footnote {\up +} unitssymbol:000020}
{\up K}{\footnote {\up K} InstantADS.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantADS.pas \cf1\b0\fs16 
\par \strike Classes\strike0{\v Scribble12750>nav} 
\par \pard\sb25\sa25\fs18 InstantObjects Advantage Database Server support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12750}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantADS\strike0{\v Scribble12740>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantADS
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantADSConnector\strike0{\v Scribble2040>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12760}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantBDE.pas}
{\up +}{\footnote {\up +} unitssymbol:000030}
{\up K}{\footnote {\up K} InstantBDE.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantBDE.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike Classes\strike0{\v Scribble12770>nav}\tab\strike Types\strike0{\v Scribble12780>nav} 
\par \pard\sb25\sa25\tx1435\fs18 InstantObjects BDE support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12770}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantBDE\strike0{\v Scribble12760>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantBDE
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantBDEConnector\strike0{\v Scribble2560>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12780}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantBDE\strike0{\v Scribble12760>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantBDE
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantBDEDriverType\strike0{\v Scribble12140>main}
\par \pard\li195\sb15\sa25\fs16 The BDE driver type
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12790}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantBrokers.pas}
{\up +}{\footnote {\up +} unitssymbol:000040}
{\up K}{\footnote {\up K} InstantBrokers.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantBrokers.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\tx4315\cf2\strike Classes\cf3\strike0{\v Scribble12800>nav}\cf1\tab\cf2\strike Types\cf3\strike0{\v Scribble12810>nav}\cf1 
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\fs18 InstantObjects Broker and Connector Classes
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12800}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \cf2\strike Instant\lang1033\f1 Brokers\cf3\strike0{\v Scribble12790>main}\cf1\lang1040\f0 
\par \pard\sb55\sa55\b\fs18 Classes in Unit Instant\lang1033\f1 Brokers\lang1040\f0 
\par \pard\li80\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang3081\b0\f2 TInstantBrokerCatalog
\par TInstantConnectionBasedConnectionDef
\par \cf2\strike TInstantConnectionBasedConnector\cf3\strike0{\v Scribble3400>main}\cf1 
\par TInstantCustomRelationalBroker
\par TInstantCustomRelationalQuery
\par TInstantCustomResolver
\par TInstantLinkResolver
\par TInstantNavigationalBroker
\par TInstantNavigationalLinkResolver
\par TInstantNavigationalQuery
\par TInstantNavigationalResolver
\par TInstantQueryTranslator
\par TInstantRelationalConnectionDef
\par \cf2\strike TInstantRelationalConnector\cf3\strike0{\v Scribble9960>main}\cf1 
\par TInstantRelationalTranslator
\par TInstantSQLBroke\lang1033\f5 r\lang3081\f2 
\par TInstantSQLBrokerCatalog
\par TInstantSQLGenerator
\par TInstantSQLLinkResolver
\par TInstantSQLQuery
\par TInstantSQLResolve\lang1033\f5 r\lang3081\f2 
\par TInstantStatementCache
\par TInstantStatement
\par \pard\li100\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640 
\par \pard\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang1040\strike\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12810}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \cf2\strike Instant\lang1033\f1 Types\cf3\strike0{\v Scribble13140>main}\cf1\lang1040\f0 
\par \pard\sb55\sa55\b\fs18 Types in Unit Instant\lang1033\f1 Brokers\lang1040\f0 
\par \pard\li80\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang3081\b0\f2 PInstantOperationInfo
\par PObjectRow
\par TInstantBrokerOperation
\par TInstantCustomRelationalQueryClass
\par \cf2\strike TInstantGetDataSetEvent\cf3\strike0{\v Scribble12410>main}\cf1 
\par \cf2\strike TInstantInitDataSetEvent\cf3\strike0{\v Scribble12440>main}\cf1 
\par TInstantNavigationalResolverClass
\par TInstantNavigationalResolverOperation
\par TInstantOperationInfo
\par TInstantRelationalBroker
\par TInstantRelationalQuery
\par TInstantRelationalTranslatorClass
\par TInstantResolver
\par TInstantSQLGeneratorClass
\par TObjectRow
\par \pard\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang1040\strike\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12820}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantClasses.pas}
{\up +}{\footnote {\up +} unitssymbol:000050}
{\up K}{\footnote {\up K} InstantClasses.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantClasses.pas \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\strike Classes\strike0{\v Scribble12830>nav}\tab\strike Functions\strike0{\v Scribble12840>nav}\tab\strike Types\strike0{\v Scribble12850>nav}
\par \pard\sb25\sa25\tx1435\tx2875\fs18 InstantObjects Classes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12830}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantClasses
\par \pard\keep\li95\sb25\sa25\b0\strike EInstantConversionError\strike0{\v Scribble1230>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for conversion errors.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantError\strike0{\v Scribble1350>main}
\par \pard\li195\sb15\sa25\fs16 The common ancestor of exception classes.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantRangeError\strike0{\v Scribble1600>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for too large or too small integer values.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantStreamError\strike0{\v Scribble1700>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for streaming errors.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantValidationError\strike0{\v Scribble1800>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for validation errors.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantCollection\strike0{\v Scribble2970>main}
\par \pard\li195\sb15\sa25\fs16 TInstantCollection is a container for \strike TInstantCollectionItem\strike0{\v Scribble3090>main} objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantCollectionItem\strike0{\v Scribble3090>main}
\par \pard\li195\sb15\sa25\fs16 TInstantCollectionItem is the ancestor for collection item classes.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantFileStream\strike0{\v Scribble6660>main}
\par \pard\li195\sb15\sa25\fs16 Provides stream-based access to data stored in a file.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantOwnedCollection\strike0{\v Scribble9170>main}
\par \pard\li195\sb15\sa25\fs16 TInstantOwnedCollection is a collection that has an owner.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantResourceStream\strike0{\v Scribble10110>main}
\par \pard\li195\sb15\sa25\fs16 TInstantResourceStream provides access to a compiled resource in the application.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantStream\strike0{\v Scribble10540>main}
\par \pard\li195\sb15\sa25\fs16 TStream is the base class for classes that provide streaming capabilities for various kinds of media.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantStreamable\strike0{\v Scribble10830>main}
\par \pard\li195\sb15\sa25\fs16 TInstantStreamable is the base class for classes that are streamable.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantStringStream\strike0{\v Scribble11110>main}
\par \pard\li195\sb15\sa25\fs16 TInstantStringStream provides stream-based access to a string.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12840}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb55\sa55\b\fs18 Functions in Unit InstantClasses
\par \pard\keep\li95\sb25\sa25\b0\strike InstantObjectBinaryToText\strike0{\v Scribble11660>main}
\par \pard\li195\sb15\sa25\fs16 Converts the binary representation of an object to a textual representation.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantObjectTextToBinary\strike0{\v Scribble11680>main}
\par \pard\li195\sb15\sa25\fs16 Converts the textual representation of an object to a binary representation.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantReadObject\strike0{\v Scribble11720>main}
\par \pard\li195\sb15\sa25\fs16 Reads an object from a stream
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantReadObjects\strike0{\v Scribble11740>main}
\par \pard\li195\sb15\sa25\fs16 Reads objects from a stream
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantWriteObject\strike0{\v Scribble12030>main}
\par \pard\li195\sb15\sa25\fs16 Writes an object to a stream
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantWriteObjects\strike0{\v Scribble12050>main}
\par \pard\li195\sb15\sa25\fs16 Writes objects to a stream
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12850}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantClasses\strike0{\v Scribble12820>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantClasses
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantProcessObjectEvent\strike0{\v Scribble12510>main}
\par \pard\li195\sb15\sa25\fs16 The event type for object processing events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantStreamFormat\strike0{\v Scribble12580>main}
\par \pard\li195\sb15\sa25\fs16 The possible stream formats
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12860}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantConnectionManager.pas}
{\up +}{\footnote {\up +} unitssymbol:000060}
{\up K}{\footnote {\up K} InstantConnectionManager.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantConnectionManager.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\strike Classes\strike0{\v Scribble12870>nav}\tab\strike Types\strike0{\v Scribble12880>nav} 
\par \pard\sb25\sa25\tx1435\fs18 InstantObjects Connection Manager.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12870}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantConnectionManager\strike0{\v Scribble12860>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantConnectionManager
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantConnectionManager\strike0{\v Scribble3520>main}
\par \pard\li195\sb15\sa25\fs16 Allows the user to manage connections to various databases.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12880}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantConnectionManager\strike0{\v Scribble12860>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantConnectionManager
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantConnectionManagerActionType\strike0{\v Scribble12190>main}
\par \pard\li195\sb15\sa25\fs16 Connection manager action types.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantConnectionManagerActionTypes\strike0{\v Scribble12200>main}
\par \pard\li195\sb15\sa25\fs16 Connection manager action types.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12890}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantConsts.pas}
{\up +}{\footnote {\up +} unitssymbol:000070}
{\up K}{\footnote {\up K} InstantConsts.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantConsts.pas \b0\fs16 
\par \cf2\strike Constants\cf3\strike0{\v Scribble12900>nav}\cf0 
\par \pard\sb25\sa25\fs18 InstantObjects constants and resource strings.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12900}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantConsts\strike0{\v Scribble12890>main} 
\par \pard\sb55\sa55\b\fs18 Constants in Unit InstantConsts
\par \pard\keep\li95\sb25\sa25\b0\strike InstantDateFormat\strike0{\v Scribble12650>main}
\par \strike InstantDateTimeFormat\strike0{\v Scribble12670>main}
\par \strike InstantTimeFormat\strike0{\v Scribble12690>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12910}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDBISAM.pas}
{\up +}{\footnote {\up +} unitssymbol:000080}
{\up K}{\footnote {\up K} InstantDBISAM.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDBISAM.pas \cf1\b0\fs16 
\par \strike Classes\strike0{\v Scribble12920>nav} 
\par \pard\sb25\sa25\fs18 InstantObjects DBISAM support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12920}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantDBISAM\strike0{\v Scribble12910>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantDBISAM
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantDBISAMConnector\strike0{\v Scribble5780>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12930}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantDBX.pas}
{\up +}{\footnote {\up +} unitssymbol:000090}
{\up K}{\footnote {\up K} InstantDBX.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantDBX.pas \cf1\b0\fs16 
\par \strike Classes\strike0{\v Scribble12940>nav} 
\par \pard\sb25\sa25\fs18 InstantObjects dbExpress support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12940}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantDBX\strike0{\v Scribble12930>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantDBX
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantDBXConnector\strike0{\v Scribble5950>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12950}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantExplorer.pas}
{\up +}{\footnote {\up +} unitssymbol:000100}
{\up K}{\footnote {\up K} InstantExplorer.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantExplorer.pas \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\strike Classes\strike0{\v Scribble12960>nav}\tab\strike Functions\strike0{\v Scribble12970>nav}\tab\strike Types\strike0{\v Scribble12980>nav}
\par \pard\sb25\sa25\tx1435\tx2875\fs18 InstantObjects Object Explorer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12960}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantExplorer
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantExplorer\strike0{\v Scribble6230>main}
\par \pard\li195\sb15\sa25\fs16 Allows navigation of objects within a tree.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12970}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb55\sa55\b\fs18 Functions in Unit InstantExplorer
\par \pard\keep\li95\sb25\sa25\b0\strike InstantExploreObject\strike0{\v Scribble11420>main}
\par \pard\li195\sb15\sa25\fs16 Explores an object
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12980}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantExplorer\strike0{\v Scribble12950>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantExplorer
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantExplorerLayout\strike0{\v Scribble12310>main}
\par \pard\li195\sb15\sa25\fs16 Determines the layout of the explorer.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantExplorerNodeType\strike0{\v Scribble12320>main}
\par \pard\li195\sb15\sa25\fs16 Defines node types of an explorer.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantExplorerNodeTypes\strike0{\v Scribble12330>main}
\par \pard\li195\sb15\sa25\fs16 Defines node types of an explorer.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble12990}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantFlashFiler.pas}
{\up +}{\footnote {\up +} unitssymbol:000110}
{\up K}{\footnote {\up K} InstantFlashFiler.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantFlashFiler.pas \cf1\b0\fs16 
\par \strike Classes\strike0{\v Scribble13000>nav} 
\par \pard\sb25\sa25\fs18 InstantObjects FlashFiler support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13000}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantFlashFiler\strike0{\v Scribble12990>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantFlashFiler
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantFlashFilerConnector\strike0{\v Scribble6740>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13010}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantIBX.pas}
{\up +}{\footnote {\up +} unitssymbol:000120}
{\up K}{\footnote {\up K} InstantIBX.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantIBX.pas \cf1\b0\fs16 
\par \cf2\lang1033\strike\f1 Classes\cf3\strike0{\v Scribble13020>nav}\cf1\lang1040\f0 
\par \pard\sb25\sa25\fs18 InstantObjects InterBase Express support.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13020}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantIBX\strike0{\v Scribble13010>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantIBX
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantIBXConnector\strike0{\v Scribble6960>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13030}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantMetadata.pas}
{\up +}{\footnote {\up +} unitssymbol:000130}
{\up K}{\footnote {\up K} InstantMetadata.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantMetadata.pas \cf1\b0\fs16 
\par \cf2\strike Classes\cf3\strike0{\v Scribble13040>nav}\cf1 
\par \pard\sb25\sa25\fs18 InstantObjects Metadata Classes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13040}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \cf2\strike Instant\lang1033\f1 Metadata\cf3\strike0{\v Scribble13030>main}\cf1\lang1040\f0 
\par \pard\sb55\sa55\b\fs18 Classes in Unit Instant\lang1033\f1 Metadata\lang1040\f0 
\par \pard\li80\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang3081\b0\f2 TInstantAttributeMap
\par TInstantAttributeMaps
\par TInstantAttributeMetadata
\par TInstantAttributeMetadatas
\par TInstantCatalog
\par TInstantClassMetadata
\par TInstantClassMetadatas
\par TInstantFieldMetadata
\par TInstantFieldMetadatas
\par TInstantIndexMetadata
\par TInstantIndexMetadatas
\par TInstantMetadata
\par TInstantMetadatas
\par TInstantModel
\par TInstantModelCatalog
\par TInstantScheme
\par TInstantTableMetadata
\par TInstantTableMetadatas
\par \pard\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang1040\strike\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13050}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantPersistence.pas}
{\up +}{\footnote {\up +} unitssymbol:000140}
{\up K}{\footnote {\up K} InstantPersistence.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantPersistence.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\tx4315\strike Classes\strike0{\v Scribble13060>nav}\tab\strike Functions\strike0{\v Scribble13070>nav}\tab\strike Types\strike0{\v Scribble13080>nav}\tab\strike Constants\strike0{\v Scribble13090>nav} 
\par \pard\sb25\sa25\tx1435\tx2875\tx4315\fs18 InstantObjects Core Classes
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13060}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantPersistence
\par \pard\keep\li95\sb25\sa25\b0\strike EInstantAccessError\strike0{\v Scribble1000>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for access errors.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantConflict\strike0{\v Scribble1120>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for conflict errors.
\par \pard\keep\li95\sb25\sa25\strike\fs18 EInstantKeyViolation\strike0{\v Scribble1490>main}
\par \pard\li195\sb15\sa25\fs16 The exception class for key violations.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantAttribute\strike0{\v Scribble2170>main}
\par \pard\li195\sb15\sa25\fs16 The common ancestor of all the attribute classes.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantBlob\strike0{\v Scribble2680>main}
\par \pard\li195\sb15\sa25\fs16 TInstantBlob represents a binary large object (BLOB).
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantBoolean\strike0{\v Scribble2860>main}
\par \pard\li195\sb15\sa25\fs16 TInstantBoolean represents a Boolean value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantComplex\strike0{\v Scribble3190>main}
\par \pard\li195\sb15\sa25\fs16 The ancestor of all the attribute classes that represent objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantConnector\strike0{\v Scribble3770>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantContainer\strike0{\v Scribble4300>main}
\par \pard\li195\sb15\sa25\fs16 TInstantContainer is the ancestor of attribute classes that represent a relationship with multiple objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantDateTime\strike0{\v Scribble5670>main}
\par \pard\li195\sb15\sa25\fs16 TInstantDateTime represents a TDateTime value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantElement\strike0{\v Scribble6050>main}
\par \pard\li195\sb15\sa25\fs16 TInstantElement is the ancestor of attribute classes that represent a relationship with a single object.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantFloat\strike0{\v Scribble6840>main}
\par \pard\li195\sb15\sa25\fs16 TInstantFloat represents a Double value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantInteger\strike0{\v Scribble7070>main}
\par \pard\li195\sb15\sa25\fs16 TInstantInteger represents a 32-bit Integer value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantMemo\strike0{\v Scribble7190>main}
\par \pard\li195\sb15\sa25\fs16 TInstantMemo represents a memo.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantNumeric\strike0{\v Scribble7290>main}
\par \pard\li195\sb15\sa25\fs16 TInstantNumeric is the ancestor of attribute classes that represent a numeric value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantObject\strike0{\v Scribble7390>main}
\par \pard\li195\sb15\sa25\fs16 The ancestor for classes with persistence capabilities.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantPart\strike0{\v Scribble9250>main}
\par \pard\li195\sb15\sa25\fs16 TInstantPart represents a part relationship to a single object.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantParts\strike0{\v Scribble9390>main}
\par \pard\li195\sb15\sa25\fs16 TInstantParts represents a part relationship to multiple objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantReference\strike0{\v Scribble9520>main}
\par \pard\li195\sb15\sa25\fs16 TInstantReference represents a reference relationship to a single object.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantReferences\strike0{\v Scribble9780>main}
\par \pard\li195\sb15\sa25\fs16 TInstantReferences represents a reference relationship to multiple objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantSimple\strike0{\v Scribble10430>main}
\par \pard\li195\sb15\sa25\fs16 The ancestor of all the attribute classes that represent simple types.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantString\strike0{\v Scribble11000>main}
\par \pard\li195\sb15\sa25\fs16 TInstantString represents a string value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13070}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb55\sa55\b\fs18 Functions in Unit InstantPersistence
\par \pard\keep\li95\sb25\sa25\b0\strike InstantCheckConnection\strike0{\v Scribble11250>main}
\par \pard\li195\sb15\sa25\fs16 Checks the assignment of a connection
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantCheckConnector\strike0{\v Scribble11260>main}
\par \pard\li195\sb15\sa25\fs16 Checks the assignment of a connector
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantClassNameToName\strike0{\v Scribble11280>main}
\par \pard\li195\sb15\sa25\fs16 Converts a class name to a name.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantDefaultConnector\strike0{\v Scribble11370>main}
\par \pard\li195\sb15\sa25\fs16 Returns the default connector instance.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantDisableNotifiers\strike0{\v Scribble11380>main}
\par \pard\li195\sb15\sa25\fs16 Disables all notifiers
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantEnableNotifiers\strike0{\v Scribble11400>main}
\par \pard\li195\sb15\sa25\fs16 Enables all notifiers
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantFindClass\strike0{\v Scribble11500>main}
\par \pard\li195\sb15\sa25\fs16 Finds and returns a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantGetClass\strike0{\v Scribble11550>main}
\par \pard\li195\sb15\sa25\fs16 Finds and returns a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantGetClasses\strike0{\v Scribble11570>main}
\par \pard\li195\sb15\sa25\fs16 Extracts a list of registered classes.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantIsValidObjectId\strike0{\v Scribble11590>main}
\par \pard\li195\sb15\sa25\fs16 Tests for a valid Object Id.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantNameToClassName\strike0{\v Scribble11640>main}
\par \pard\li195\sb15\sa25\fs16 Converts a name to a class name.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantRefreshObjects\strike0{\v Scribble11760>main}
\par \pard\li195\sb15\sa25\fs16 Refreshes all instances of an array of classes
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantRegisterClass\strike0{\v Scribble11800>main}
\par \pard\li195\sb15\sa25\fs16 Registers a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantRegisterClasses\strike0{\v Scribble11820>main}
\par \pard\li195\sb15\sa25\fs16 Registers an array of classes derived from \strike TInstantObject\strike0{\v Scribble7390>main}.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantUnregisterClass\strike0{\v Scribble11990>main}
\par \pard\li195\sb15\sa25\fs16 Unregisters a class derived from \strike TInstantObject\strike0{\v Scribble7390>main}
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantUnregisterClasses\strike0{\v Scribble12010>main}
\par \pard\li195\sb15\sa25\fs16 Unregisters an array of classes derived from \strike TInstantObject\strike0{\v Scribble7390>main}
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13080}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantPersistence
\par \pard\keep\li95\sb25\sa25\lang1033\b0\strike\f1 T\lang1040\f0 InstantAttribute\strike0{\v Scribble2170>main}
\par \pard\li195\sb15\sa25\fs16 The common ancestor of all the attribute classes.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantAttributeChangeEvent\strike0{\v Scribble12120>main}
\par \pard\li195\sb15\sa25\fs16 The event type for attribute change notification events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantConnectorClass\strike0{\v Scribble12210>main}
\par \pard\li195\sb15\sa25\fs16 Provides access to a database.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantContentChangeEvent\strike0{\v Scribble12220>main}
\par \pard\li195\sb15\sa25\fs16 The event type for content change notification events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantErrorEvent\strike0{\v Scribble12300>main}
\par \pard\li195\sb15\sa25\fs16 The event type for error events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantNotifyEvent\strike0{\v Scribble12470>main}
\par \pard\li195\sb15\sa25\fs16 TInstantNotifyEvent is the event type for simple notification events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantObjectNotifyEvent\strike0{\v Scribble12480>main}
\par \pard\li195\sb15\sa25\fs16 TInstantObjectNotifyEvent is used for notification.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantProgressEvent\strike0{\v Scribble12520>main}
\par \pard\li195\sb15\sa25\fs16 The event type for progress events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantSchemeEvent\strike0{\v Scribble12530>main}
\par \pard\li195\sb15\sa25\fs16 The event type for database-build related events.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantSortCompare\strike0{\v Scribble12540>main}
\par \pard\li195\sb15\sa25\fs16 Prototype of function used to Compares objects
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13090}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPersistence\strike0{\v Scribble13050>main} 
\par \pard\sb55\sa55\b\fs18 Constants in Unit InstantPersistence
\par \pard\keep\li95\sb25\sa25\b0\strike InstantAttributePrefix\strike0{\v Scribble12620>main}
\par \pard\li195\sb15\sa25\fs16 The prefix used for attribute fields.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantClassPrefix\strike0{\v Scribble12640>main}
\par \pard\li195\sb15\sa25\fs16 The prefix used for classes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13100}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantPresentation.pas}
{\up +}{\footnote {\up +} unitssymbol:000150}
{\up K}{\footnote {\up K} InstantPresentation.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantPresentation.pas \cf1\b0\fs16 
\par \pard\keepn\sb25\tx1435\tx2875\strike Classes\strike0{\v Scribble13110>nav}\tab\strike Functions\strike0{\v Scribble13120>nav}\tab\strike Types\strike0{\v Scribble13130>nav} 
\par \pard\sb25\sa25\tx1435\tx2875\fs18 InstantObjects Presentation Classes.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13110}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantPresentation
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantCustomExposer\strike0{\v Scribble4790>main}
\par \pard\li195\sb15\sa25\fs16 The ancestor of components that make objects accessible via data-aware controls.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantExposer\strike0{\v Scribble6450>main}
\par \pard\li195\sb15\sa25\fs16 Provides dataset-based access to objects.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantSelector\strike0{\v Scribble10200>main}
\par \pard\li195\sb15\sa25\fs16 TInstantSelector provides dataset-based access to a selection of objects.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13120}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantPresentation\strike0{\v Scribble13100>main} 
\par \pard\sb55\sa55\b\fs18 Functions in Unit InstantPresentation
\par \pard\keep\li95\sb25\sa25\b0\strike InstantFindAccessorClass\strike0{\v Scribble11480>main}
\par \pard\li195\sb15\sa25\fs16 Finds and returns a class derived from TInstantAccessor.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantGetAccessorClass\strike0{\v Scribble11530>main}
\par \pard\li195\sb15\sa25\fs16 Finds and returns a class derived from TInstantAccessor.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantRegisterAccessorClass\strike0{\v Scribble11780>main}
\par \pard\li195\sb15\sa25\fs16 Registers a class derived from TInstantAccessor.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantUnregisterAccessorClass\strike0{\v Scribble11970>main}
\par \pard\li195\sb15\sa25\fs16 Unregisters a class derived from TInstantAccessor
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13130}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \cf2\strike InstantPresentation\cf3\strike0{\v Scribble13100>main}\cf1 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantPresentation
\par \pard\keep\li95\sb25\sa25\cf2\b0\strike TInstantAddClassFieldDefEvent\cf3\strike0{\v Scribble12090>main}\cf1\strike 
\par \pard\li195\sb15\sa25\strike0\fs16 The event type for \lang1033\f1 exposer field definition\lang1040\f0  \lang1033\f1 creation\lang1040\f0  events.\strike\fs18 
\par \pard\keep\li95\sb25\sa25\cf2 TInstantAccessMode\cf3\strike0{\v Scribble12100>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 Determines how an object is being accessed.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantCompareObjectsEvent\cf3\strike0{\v Scribble12150>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for object comparison events.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantCreateObjectEvent\cf3\strike0{\v Scribble12260>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type used for object creation events.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantExposerOptions\cf3\strike0{\v Scribble12340>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 Specifies options for an exposer.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantFieldDefEvent\cf3\strike0{\v Scribble12360>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for field definition initialization events.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantFieldErrorEvent\cf3\strike0{\v Scribble12370>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for field errors.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantFieldEvent\cf3\strike0{\v Scribble12380>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for field events.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantIncludeFieldEvent\cf3\strike0{\v Scribble12430>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for field inclusion events.
\par \pard\keep\li95\sb25\sa25\cf2\strike\fs18 TInstantLimitObjectsEvent\cf3\strike0{\v Scribble12460>main}\cf1 
\par \pard\li195\sb15\sa25\fs16 The event type for object limitation events.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13140}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantTypes.pas}
{\up +}{\footnote {\up +} unitssymbol:000160}
{\up K}{\footnote {\up K} InstantTypes.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantTypes.pas \cf1\b0\fs16 
\par \cf2\lang1033\strike\f1 Types\cf3\strike0{\v Scribble13150>nav}\cf1\lang1040\f0 
\par \pard\sb25\sa25\fs18 InstantObjects \lang1033\f1 Types\lang1040\f0 .
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13150}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \cf2\strike Instant\lang1033\f1 Types\cf3\strike0{\v Scribble13140>main}\cf1\lang1040\f0 
\par \pard\sb55\sa55\b\fs18 Types in Unit Instant\lang1033\f1 Types \lang1040\f0 
\par \pard\li80\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang3081\b0\f2 TInstantAttributeCategory
\par \cf2\strike TInstantAttributeType\cf3\strike0{\v Scribble12130>main}\cf1 
\par TInstantCacheNodeColor
\par TInstantCatalogFeature
\par TInstantCatalogFeatures
\par \cf2\strike TInstantConflictAction\cf3\strike0{\v Scribble12180>main}\cf1 
\par \cf2\strike TInstantContentChangeType\cf3\strike0{\v Scribble12240>main}\cf1 
\par \cf2\strike TInstantDataType\cf3\strike0{\v Scribble12270>main}\cf1 
\par \cf2\strike TInstantDataTypes\cf3\strike0{\v Scribble12270>main}\cf1 
\par TInstantDBBuildCommandType
\par \cf2\strike TInstantErrorAction\cf3\strike0{\v Scribble12280>main}\cf1 
\par \cf2\strike TInstantFieldOption\cf3\strike0{\v Scribble12390>main}\cf1 
\par \cf2\strike TInstantFieldOptions\cf3\strike0{\v Scribble12390>main}\cf1 
\par TInstantGraphicFileFormat
\par TInstantObjectNotification
\par \cf2\strike TInstantOperationType\cf3\strike0{\v Scribble12490>main}\cf1 
\par \cf2\strike TInstantPersistence\cf3\strike0{\v Scribble12500>main}\cf1 
\par \cf2\strike TInstantStorageKind\cf3\strike0{\v Scribble12560>main}\cf1 
\par \cf2\strike TInstantVerificationResult\cf3\strike0{\v Scribble12600>main}\cf1 
\par TInstantWarningEvent
\par \pard\tx1440\tx2880\tx4320\tx5760\tx7200\tx8640\lang1040\strike\f0 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13160}
{\up >}{\footnote {\up >} main}
{\up $}{\footnote {\up $} InstantUtils.pas}
{\up +}{\footnote {\up +} unitssymbol:000170}
{\up K}{\footnote {\up K} InstantUtils.pas;}
}
\viewkind4\uc1\pard\keepn\lang1040\b\f0\fs24 InstantUtils.pas \cf1\b0\fs16  
\par \pard\keepn\sb25\tx1435\tx2875\strike Classes\strike0{\v Scribble13170>nav}\tab\strike Functions\strike0{\v Scribble13180>nav}\tab\strike Types\strike0{\v Scribble13190>nav}
\par \pard\sb25\sa25\tx1435\tx2875\fs18 InstantObjects Utilities
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13170}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb55\sa55\b\fs18 Classes in Unit InstantUtils
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantVersion\strike0{\v Scribble12070>main}
\par \pard\li195\sb15\sa25\fs16 Specifies the version of a file.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13180}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb55\sa55\b\fs18 Functions in Unit InstantUtils
\par \pard\keep\li95\sb25\sa25\b0\strike InstantCharSetToStr\strike0{\v Scribble11220>main}
\par \pard\li195\sb15\sa25\fs16 Co\lang1033\f1 n\lang1040\f0 verts a set of char to a string.
\par \pard\keep\li95\sb25\sa25\strike\fs18 function InstantCompareObjects(Obj1: TObject; Obj2: TObject; PropNames: TStrings; Options: TInstantCompareOptions): Integer;\strike0{\v Scribble11310>main}
\par \pard\li195\sb15\sa25\fs16 Compares two objects by comparing multiple named published properties.
\par \pard\keep\li95\sb25\sa25\strike\fs18 function InstantCompareObjects(Obj1: TObject; Obj2: TObject; PropName: string; Options: TInstantCompareOptions): Integer;\strike0{\v Scribble11300>main}
\par \pard\li195\sb15\sa25\fs16 Compares two objects by comparing a named published property.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantCompareText\strike0{\v Scribble11320>main}
\par \pard\li195\sb15\sa25\fs16 Compares two strings by ordinal value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantCompareValues\strike0{\v Scribble11330>main}
\par \pard\li195\sb15\sa25\fs16 Compares the values of two variants.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantConstArrayToVariant\strike0{\v Scribble11340>main}
\par \pard\li195\sb15\sa25\fs16 Converts an array of constants to a variant array.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantDateTimeToStr\strike0{\v Scribble11350>main}
\par \pard\li195\sb15\sa25\fs16 Converts a TDatetime value to a string.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantFileVersion\strike0{\v Scribble11440>main}
\par \pard\li195\sb15\sa25\fs16 Returns the version of a file as a record
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantFileVersionStr\strike0{\v Scribble11460>main}
\par \pard\li195\sb15\sa25\fs16 Returns the version of a file as a string
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantGenerateId\strike0{\v Scribble11520>main}
\par \pard\li195\sb15\sa25\fs16 Generates an unique Id.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantIsIdentifier\strike0{\v Scribble11580>main}
\par \pard\li195\sb15\sa25\fs16 Determines if a string is a valid identifier
\par \pard\keep\li95\sb25\sa25\strike\fs18 function InstantMatchObject(Obj: TObject; PropNames: TStrings; const KeyValues: Variant; Options: TInstantCompareOptions): Boolean;\strike0{\v Scribble11620>main}
\par \pard\li195\sb15\sa25\fs16 Compares multiple values to the values of an objects properties
\par \pard\keep\li95\sb25\sa25\strike\fs18 function InstantMatchObject(Obj: TObject; PropName: string; const KeyValue: Variant; Options: TInstantCompareOptions): Boolean;\strike0{\v Scribble11600>main}
\par \pard\li195\sb15\sa25\fs16 Compares a value to the value of an objects property
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantPartStr\strike0{\v Scribble11700>main}
\par \pard\li195\sb15\sa25\fs16 Extracts a part of a delimited string.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantRightPos\strike0{\v Scribble11840>main}
\par \pard\li195\sb15\sa25\fs16 Returns the starting position of the last occurrence of a substring in a given string.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantStrToCharSet\strike0{\v Scribble11860>main}
\par \pard\li195\sb15\sa25\fs16 Converts a string to a set of char.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantStrToDate\strike0{\v Scribble11890>main}
\par \pard\li195\sb15\sa25\fs16 Converts a string to a TDateTime value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantStrToDateTime\strike0{\v Scribble11910>main}
\par \pard\li195\sb15\sa25\fs16 Converts a string to a TDateTime value.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantStrToList\strike0{\v Scribble11930>main}
\par \pard\li195\sb15\sa25\fs16 Adds the individual strings of a delimited string to a TStrings object.
\par \pard\keep\li95\sb25\sa25\strike\fs18 InstantStrToTime\strike0{\v Scribble11950>main}
\par \pard\li195\sb15\sa25\fs16 Converts a string to a TDateTime value.
\par 
\par \pard\plain\f0

{\page}

{\pard\plain\f0\fs20
{\up #}{\footnote {\up #} Scribble13190}
}
\viewkind4\uc1\pard\keepn\sb25\lang1040\b\f0\fs24 Unit Overview \cf1\b0\fs16 
\par \strike InstantUtils\strike0{\v Scribble13160>main} 
\par \pard\sb55\sa55\b\fs18 Types in Unit InstantUtils
\par \pard\keep\li95\sb25\sa25\b0\strike TInstantCompareOption\strike0{\v Scribble12160>main}
\par \pard\li195\sb15\sa25\fs16 Specifies options for a comparison.
\par \pard\keep\li95\sb25\sa25\strike\fs18 TInstantCompareOptions\strike0{\v Scribble12170>main}
\par \pard\li195\sb15\sa25\fs16 Specifies options for a comparison.
\par 
}
